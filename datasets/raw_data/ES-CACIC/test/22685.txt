Sistema de arranque UEFI la seguridad la adecuada instalación y la libertad de elección
﻿ En el marco de modernizar el proceso de arranque de las 
computadoras y aportar una mayor seguridad al mismo, Unified EFI Forum 
propone la implementación de la interfaz UEFI (Unified Extensible Firmware 
Interface). La característica principal es que el firmware BIOS y el software 
utilizado estará firmado digitalmente.  Este artículo analiza ventajas y 
desventajas de la utilización de UEFI, considerando entre otras situación la 
libertad de instalar diferentes sistemas operativos, a través de un caso de 
estudio, analizando su aplicabilidad. 
Palabras claves: Gestor de arranque, sistema operativo, UEFI, GPL, BIOS 
1 Introducción 
Cuando se enciende una computadora se realizan una serie de pasos de los cuales el 
arranque del sistema operativo es trascendental. Esta acción se realiza a través de un 
gestor de arranque. 
Si en la computadora conviven distintos sistemas o versiones de sistemas 
operativos, a través del gestor de arranque el usuario puede seleccionar cuál de dichos 
sistemas arrancará1. 
A continuación se describe el proceso de arranque (o “booteo”) en computadoras 
basadas en IBM PC, ya sea con procesadores 16, 32 o 64 bits. 
El BIOS (Basic Input Output System) es un software de bajo nivel que se halla en 
el motherboard. Cuando se arranca la computadora el BIOS se ejecuta, realizando el 
POST (Power-on self-test), que incluye rutinas que, entre otras actividades, fijan 
valores de las señales internas, y ejecutan test internos (RAM, el teclado, y otros 
dispositivos a través de los buses ISA y PCI). Luego se lee el primer sector del disco 
                                                          
1  En este documento se usarán indistintamente los nombres x86 e IA32 para denominar a los 
procesadores de Intel de 32 bits y x86-64, x64 y AMD64 para denominar a la arquitectura de 
64 bits desarrollada inicialmente por AMD y luego adoptada por Intel. Los procesos de 
arranque en equipos ARM e IA64 (Intel Itanium) están fuera del alcance de este documento. 
 
de inicio (seleccionado de entre un conjunto de posibles dispositivos de arranque), 
llamado MBR (master boot record). Esto se carga en memoria y se ejecuta. El MBR 
puede contener un código de arranque denominado MBC (master boot code) y una 
marca de 2 bytes que indica su presencia o puede solamente contener la tabla de 
particiones. En el último caso el BIOS ignora este MBR [1]. 
Un gestor de arranque es un pequeño programa para arrancar un sistema operativo. 
Habitualmente se instala en el MBR y asume el rol de MBC. 
En una computadora en la que hay sólo un sistema operativo, no hay referencias a 
pantalla generalmente. Si hay un gestor de arranque, este programa nos permitirá 
elegir el sistema operativo a arrancar. 
El código del MBC de Windows, por ejemplo, busca en la tabla de particiones cual 
es la primer partición primaria con el flag de “booteo” activo y transfiere el control al 
código que se encuentra al comienzo de dicha partición: el PBR (partition boot 
record). 
En el caso del sistema operativo Linux, se puede optar por distintos gestores de 
arranque, por ejemplo, LILO (Linux Loader), GRUB (Grand Unified Bootloader) o 
GAG (Gestor de arranque Gráfico). 
LILO no se basa en un sistema de archivos específico. Funciona en una variedad de 
sistemas de archivos. GRUB en cambio, debe comprender el sistema de archivos y el 
formato de los directorios2. GRUB tiene algunas ventajas con respecto a LILO: tiene 
una línea de comandos interactiva como, permite arrancar desde una red, y podría 
considerarse más seguro [2]. 
El BIOS se utiliza en computadoras IBM PC y sus “clones” desde alrededor de la 
década del 80 con pocas modificaciones, siempre manteniendo compatibilidad hacia 
atrás a nivel binario. Esto provoca que el código de arranque que se almacena en el 
MBR y es ejecutado por el BIOS no pueda ocupar más de 440 bytes, deba ejecutarse 
en modo real x86 con direcciones de 20 bits (aprovechando segmentación), y utilizar 
interrupciones como medio de comunicación con el BIOS. Además, el BIOS está 
adaptado a arquitecturas x86. 
Las restricciones de direcciones de memoria de 20 bits y el límite en el tamaño del 
gestor de arranque de 440 bytes no son aceptables en la actualidad considerando que 
los gestores de arranque modernos leen múltiples sistemas de archivos, muchas veces 
tienen interfaces gráficas con imágenes de fondo y tienen que cargar en memoria 
kernels en distintos formatos que ocupan mucho más de 220 bytes. Es por ello que 
habitualmente funcionan en múltiples etapas (o stages) y deben tener código para 
pasar a “modo protegido” en IA32 o “long mode” en AMD64, haciendo que el 
proceso de arranque sea mucho más complejo que lo que debería ser. 
Por ejemplo el gestor de arranque GRUB 2, se divide en dos imágenes:  
