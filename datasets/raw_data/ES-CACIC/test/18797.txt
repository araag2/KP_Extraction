Un modelo de eventos discretos para la simulación de sistemas de tiempo real
﻿ En este trabajo se presenta un modelo de eventos discretos para el 
diseño de simuladores de Sistemas de Tiempo Real. Los simuladores sirven 
para realizar comprobaciones de algoritmos, modelos, técnicas y para evaluar 
métricas de rendimiento. El modelo de eventos discretos se ajusta 
perfectamente a los sistemas dinámicos discretos como lo son los Sistemas de 
Tiempo Real. El modelo se desarrolla empleando la técnica de grafo de eventos, 
debido a su sencillez y facilidad de implementación. 
Palabras clave: Sistemas de Tiempo Real, Simulación, Modelado, Eventos 
Discretos. 
1. Introducción 
En la actualidad el uso de la simulación por computadora es esencial en un gran 
número de disciplinas. La misma es un soporte fundamental para la obtención de 
nuevos resultados en investigaciones, acelerando los procesos de creación de nuevos 
métodos y técnicas. Sin embargo, pocas veces se pone énfasis en la revisión y 
validación del software empleado para llegar a cabo los resultados publicados. Por 
otro lado, es evidente la importancia que posee para otros grupos de investigación, el 
poder validar dichos resultados, mediante la reproducción de los experimentos 
realizados, empleando las mismas soluciones de software u otras que sigan los 
mismos lineamientos y diseños. 
Este trabajo presenta un modelo de eventos discretos para la simulación de 
Sistemas de Tiempo Real (STR). El objetivo es contar con un modelo marco, sobre el 
cual desarrollar sistemas de simulación por computadora. Este modelo ha sido 
empleado con éxito en el simulador de STR del grupo de investigación de la 
UNPSJB1. 
                                                          
1  Grupo de investigación en STR de la Universidad Nacional de la Patagonia San Juan Bosco 
(UNPSJB) Sede Puerto Madryn (http://www.rtsg.unp.edu.ar). 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1403
En el pasado, un conjunto de aplicaciones y frameworks han sido desarrollados 
para la simulación de STR. Se pueden mencionar, entre las más conocidas, a STRESS 
([1]), PERTS ([2]), YASA ([3]), Cheddar ([4]), RealTTS ([5]) y el simulador de la 
Université Libre de Bruxelles ([6]). Se ha encontrado también aplicaciones como 
MAST ([7]) que ofrecen herramientas de modelado, o FORTISSIMO ([8]) que ofrece 
un framework para el diseño de simulaciones. Un trabajo que estudia los STR como 
sistemas discretos es [9], donde son modelados mediante redes de Petri, a fin de 
permitir análisis temporales eficientes. También en [10], donde se presenta un marco 
formal general para el estudio de STR. 
El trabajo se encuentra organizado de la siguiente manera: en la sección 2 se 
realiza una breve introducción y análisis de los STR. En la sección 3, se presenta una 
introducción a la simulación por eventos discretos y a la técnica de modelado grafo de 
eventos. En la sección 4 se desarrolla el modelo de eventos discretos y en la sección 5 
se describe una implementación de referencia. Finalmente, las conclusiones, junto con 
posibles trabajos futuros, son discutidas en la sección 6. 
2. Introducción a los STR 
Una definición formal de los STR, ampliamente aceptada en la disciplina, es la 
formulada por Stankovic en [11], la cual dice: “En los STR los resultados no solo 
deben ser correctos aritmética y lógicamente, si no que, además, deben producirse 
antes de un determinado tiempo, denominado vencimiento”. 
Dependiendo de cuan crítico es el cumplimiento de este vencimiento, se puede 
clasificar a los STR en tres tipos. El primer tipo no tolera la perdida de ningún 
vencimiento, y se los denomina duros o críticos. El segundo tipo permite la pérdida 
de algunos vencimientos, por lo cual se los conoce como blandos. Finalmente, los de 
tercer tipo, denominados firmes, tipifican las pérdidas según algún criterio estadístico. 
En los STR duros la pérdida de un vencimiento puede tener graves consecuencias 
para la integridad del sistema y, posiblemente para su entorno. Este tipo de STR es 
utilizado en aviónica, sistemas de control industrial, soporte a la vida, etc. Debido a su 
criticidad, es necesario realizar un análisis de planificabilidad para garantizar, a 
priori, el cumplimiento de las constricciones temporales de todas las tareas. 
El marco de trabajo para sistemas mono-recurso y multitarea fue presentado en 
[12], donde las tareas son consideras periódicas, independientes y apropiables. Las 
tareas pueden ser asignadas al recurso mediante una asignación estática o basada en 
prioridades. Esta última es la más utilizada, y emplea una política de prioridades que 
permite al planificador determinar que tarea utilizará el recurso en un instante dado. 
Bajo este marco de trabajo, una tarea i (τi) de tiempo real (TR) es parametrizada 
mediante su peor tiempo de ejecución (Ci), periodo (Ti) y vencimiento (Di). Luego, un 
conjunto de n tareas de TR es especificado como 1 1 1( ) {( , , ),..., ( , , )}n n nn C D T C T DΓ = . Se 
define ci(t) como el tiempo ejecutado de la tarea i al instante t. 
En [12] se demostró también, que el peor estado de carga para un planificador 
mono-recurso es aquel en que todas las tareas solicitan ejecución en un mismo 
instante. A este instante se lo denomina instante crítico. Si el planificador logra 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1404
ejecutar todas las instancias de las tareas que llegaron en el instante crítico, antes de 
su vencimiento, el STR se dice planificable y consecuentemente lo es para cualquier 
otro estado de carga. 
2.1. Caracterización y Análisis de Sistemas de Tiempo Real 
Un sistema dinámico es aquel cuyo estado evoluciona a través del tiempo. 
Consecuentemente, un STR es un sistema dinámico. Un análisis de los STR como 
sistemas dinámicos, cuando los mismos son planificados por Rate Monotonic (RM, 
[12]) o Deadline Monotonic (DM, [13]), ha sido realizado en [14]. En el mismo, se 
presenta la evolución del STR a partir del instante crítico, utilizando el método de 
cálculo del peor tiempo de respuesta de una tarea, por medio de una ecuación de 
Punto Fijo (PF), descrita en [15]: 
1
1
1
qi
q
i j
jj
t
t C C
T
−
+
=
⎡ ⎤= + ⎢ ⎥⎢ ⎥∑  (1) 
Esta ecuación permite, modelar y calcular, mediante un proceso iterativo, la 
evolución del subsistema Γ(i) desde el instante crítico. El método iterativo se detiene 
si encuentra un PF tal que tq = tq+1 ≤ Di, luego el sistema es planificable. Si el PF se 
encuentra en un instante posterior al vencimiento de la tarea analizada, es no 
planificable, tq+1 > Di. En sistemas sobresaturados puede no existir un PF tal que tq = 
tq+1. La ecuación (1) muestra las siguientes características: 
• Es monótona creciente. 
• Describe la evolución de un sistema dinámico. 
• Es determinística, ya que para cada valor de t existe un único estado posible. 
• La función techo ( ⎡ ⎤⎢ ⎥ ) introduce no-linealidad. 
Esto permite concluir que un STR es un sistema dinámico, no-lineal, discreto y 
determinístico ([14]), cuando el mismo es diagramado mediante alguna disciplina de 
prioridades fijas como por ejemplo RM o DM. 
3. Simulación por Eventos Discretos 
A continuación se presenta una introducción al paradigma de simulación por eventos 
discretos, y a la técnica de modelado grafo de eventos. 
La simulación por eventos discretos (Discrete Event Simulation, DES) es aplicada 
en el estudio de sistemas que pueden ser representados mediante modelos lógicomatemáticos discretos2. En los mismos las variables de interés cambian de manera 
instantánea, sólo en un determinado número contable de instantes precisos, dado un 
intervalo determinado de tiempo ([16]). Se define como evento (v), al conjunto 
atómico de modificaciones sobre las variables de estado del sistema en un instante 
determinado. 
                                                          
2 El sistema original puede ser tanto discreto como continuo. 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1405
Los modelos empleados son generalmente representados mediante relaciones 
recursivas, como por ejemplo tk+1 = 2tk, donde k denota los pasos discretos en el 
tiempo, o como la ecuación (1). 
Durante la simulación se cuenta con un reloj de simulación, t, que registra el 
instante de tiempo actual, y una lista de eventos futuros Λ. Esta es un conjunto de 
tuplas (ti, vi), siendo ti ≥ t el instante en donde se ejecutará el evento vi. Generalmente 
Λ es implementado como una lista de prioridades, en base a los valores ti. 
En cada paso de la simulación, se ejecuta el primer evento vi en Λ (el de mayor 
prioridad), y se actualiza t con el valor ti asociado a vi. Procesos concurrentes pueden 
ser simulados fácilmente mediante múltiples eventos planificados en un mismo ti. La 
simulación comienza con un conjunto inicial de eventos, generalmente con ti = 0. 
Finaliza cuando t supera un cierto valor determinado (tend), se encuentra un evento 
especial de finalización (vend) o Λ no contiene más elementos (Λ =∅ ). 
3.1. Grafos de Eventos 
Un modelo de eventos discretos puede diseñarse mediante la técnica de grafo de 
eventos ([17, 18]). La dinámica del sistema es caracterizada mediante eventos, que 
representan las modificaciones al estado del sistema. Las relaciones lógicas y 
temporales entre los mismos son indicadas mediante arcos. Es importante resaltar que 
el grafo de eventos no representa un autómata. 
Un modelo de grafo de eventos M consiste de los siguientes componentes: 
• S, un conjunto de variables que definen el estado del sistema. 
• V, un conjunto de vértices que representan los eventos de interés en el sistema. 
• E, un conjunto de arcos dirigidos eod = (vo, vd) (evento origen-destino) que 
indican las relaciones temporales y lógicas entre pares de eventos en V. 
• { }:  vf v= → ∀ ∈F S S V , funciones asociadas a cada vértice v∈V , que 
describen los cambios en S, producto de la ocurrencia del evento. 
• { }: {0,1}od odc e= → ∀ ∈C S E , las condiciones asociadas a cada arco eod. La 
transición eod es válida si y sólo si cod es evaluada con éxito (cod = 1). 
• { }0od odeδ += ∈ ∀ ∈\D E  los deltas (tiempos de retraso) asociadas a cada arco eod. 
• { }, ode E= ∈eA A , atributos asociados al arco eod. 
• { },v V= ∈vB B , parámetros asociados al evento v. 
Luego un modelo de grafo esta especificado como ( , , , , , , , )=M V E S F C D A B . Cada 
arco dirigido eod = (vo, vd) se recorre si y sólo si la condición cod, es válida luego de 
ejecutar el evento vo. Recorrer el arco equivale a programar la ejecución del evento vd 
en el instante t + δod, siendo δod el delta asociado al arco eod. 
Dado un arco eod, el conjunto de atributos Ae asociado serán los argumentos 
formales que el evento vd recibirá como parámetros (conjunto Bv). En caso de no 
requerirse parámetros A y B son conjuntos vacíos. 
Es importante notar que tanto Λ como t están asociados con la ejecución de la 
simulación de M, y no son partes propiamente dichas del modelo. Esta técnica será 
empleada a continuación para realizar el modelado de un STR como un sistema de 
eventos discretos. 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1406
4. Modelado de un STR mediante eventos discretos 
A continuación se desarrolla el modelo de eventos discretos de un STR, mediante la 
técnica de grafo de eventos. El modelo identifica los arribos de nuevas instancias y la 
programación de los eventos de ejecución, desalojo y finalización. 
4.1. Eventos 
El modelo del STR que se propone cuenta con seis eventos. El primer evento, v0, 
corresponde con el Inicio del STR (tiempo de setup). Para una instancia cualquiera de 
una tarea de TR, se identifican los eventos Arribo (v1), Ejecución (v2), Finalización 
(v3) y Desalojo (v4). El evento v1 recibe como parámetro la tarea del STR a ejecutar. 
Finalmente, el evento Terminación (v5) indica el fin de la ejecución de la simulación. 
Es planificado en el instante tend en donde se desea que la misma finalice. 
4.2. Prioridades de los eventos 
Durante la ejecución de la simulación es posible que dos o más eventos se encuentren 
planificados en un mismo instante t. Es necesario realizar una asignación de 
prioridades sobre los eventos. De esta manera, el orden de ejecución de los mismos 
será coherente para los fines de la simulación. Las prioridades son indicadas en la 
Tabla 1. El máximo nivel de prioridad es 0. 
Tabla 1. Prioridades de Ejecución de los Eventos 
Evento Prioridad 
Inicio (v0) 0 
Terminación (v5) 1 
Finalización (v3) 2 
Desalojo (v4) 3 
Arribo (v1) 4 
Ejecución (v2) 5 
4.3. Arcos 
Los eventos v0 a v4 son conectados por 6 arcos (Figura 1): 
• Arco e01: programa los arribos de la primera instancia de cada tarea del STR. 
• Arco e11: planifica el próximo evento v1 (Arribo). 
• Arco e12: programa el evento v2 (Ejecución). 
• Arco e23: realiza la planificación del evento v3 (finalización). 
• Arco e24: programa el evento v4 (Desalojo). 
• Arco e32: planifica un nuevo evento v2 (Ejecución). 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1407
4.4. Condiciones 
El arco e01 se recorre una única vez, al planificar los eventos v1 iniciales, al inicio de 
la simulación. Por lo tanto no cuenta con una condición asociada. A continuación se 
presenta cada condición cod asociada al arco eod, que debe de cumplirse para la 
programación del evento destino (vd): 
• Condición c11: La instancia anterior de la tarea τi no excedió su tiempo de 
ejecución, por lo tanto se programa el próximo arribo de la tarea. 
• Condición c12: No existen eventos v1 en Λ (arribos de nuevas instancias de 
tareas de TR) en el instante actual, por lo tanto se pasa a programar el evento v2. 
• Condición c23: La instancia actual puede finalizar su ejecución antes del arribo 
del próximo evento v1 más próximo. 
• Condición c24: La instancia actual no finaliza su ejecución antes del arribo del 
evento v1 más próximo, por lo tanto es desalojada del recurso. 
• Condición c32: No existen eventos v1 en Λ para el instante actual y hay al menos 
una tarea de TR que no ha finalizado su ejecución en la cola de listos del 
planificador. 
La condición c32 evita la duplicación de un evento v2, en caso de existir un evento 
v1 en el mismo instante. Las condiciones c23 y c24 son mutuamente excluyentes.  
4.5. Tiempos de retraso 
La planificación de un nuevo evento vi debe realizarse para un instante ti ≥ t. Para el 
modelo de grafo de eventos, esto implica asociar a cada arco eod un delta δod ≥ 0, tal 
que ti = t + δod. 
El arco e11 planifica el próximo arribo del evento v1, que representa una nueva 
instancia de la tarea i. El retraso δ11 es calculado mediante: 
11
i
i
i
t T
T t
T
δ +⎢ ⎥= −⎢ ⎥⎣ ⎦  
Los arcos e12 y e32 programan el evento v2 en el instante actual, por lo tanto δ12 = 
δ32 = 0. El delta asociado al arco e23 es δ23 = Ci – ci(t), el tiempo remanente de 
ejecución de la tarea. Luego, el evento v3 es programado para el instante t + δ23. El 
arco e24 es recorrido cuando un arribo (evento v1) interrumpe la ejecución de la 
instancia actual. El evento desalojo (v4) será planificado en el mismo instante del 
evento v1 más próximo (t1). Luego el delta asociado a e24 será δ24 = t1 – t. 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1408
 
Figura 1. Grafo de eventos del modelo de un STR.  
4.6. Ejecución de los Eventos 
A continuación se detallan las modificaciones al estado del sistema (S) realizadas en 
cada evento. Esto es, la función fi asociadas a cada evento vi. En este modelo S = Γ(n). 
El evento Inicialización (v0) programa las instancias de Arribo (v1) iniciales, una 
por cada tarea del STR a simular. Se inicializa el reloj de la simulación, generalmente 
con t = 0. Cualquier otra actividad de setup debe de realizarse en este evento, como 
por ejemplo el cálculo de tiempos ociosos en el sistema en el instante crítico, peores 
tiempos de respuesta, etc. 
El evento Arribo (v1) agrega la tarea que recibió como parámetro en la cola de 
listos del planificador. Luego programa el arribo del próximo evento v1 agregando la 
tupla (t + δ11, v1) a Λ. Finalmente, de cumplirse la condición c12, se planifica un 
evento Ejecución (v2) en el instante actual, Λ ← (t, v2). 
El evento Ejecución (v2), invoca el método o rutina correspondiente del 
planificador, para realizar las actividades relacionadas con la ejecución de la tarea de 
mayor prioridad en su cola de listos. Luego, si se satisface la condición c23 un evento 
Finalización (v3) es planificado, Λ ← (t + δ23, v3). En caso de cumplirse c24, un evento 
Desalojo (v4) se programa para el instante t + δ24. 
El evento Finalización (v3) invoca los métodos o rutinas necesarios para actualizar 
S, reflejando la finalización de la ejecución de la tarea de TR correspondiente. A 
continuación, de ser válida la condición c32, un nuevo evento v2 se programa para el 
instante actual, a fin de continuar ejecutando el resto de las tareas en la cola de listos 
del planificador. 
De manera similar, el evento Desalojo (v4) invoca los métodos o rutinas requeridas 
para modificar S debido al desalojo de una tarea del recurso. 
Finalmente, el evento Terminación (v5), programado en tend, libera los recursos 
utilizados, e invoca las rutinas de generación de reportes necesarias. 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1409
5. Implementación 
A continuación se ofrecerá una breve descripción de una implementación mediante la 
librería SSJ ([19]) para Java. Esta librería ofrece el paquete simevents para la 
simulación por eventos discretos. La misma cuenta con dos clases principales, 
Simulator y Event.  
La clase Simulator, representa el ejecutivo de simulación. Provee el reloj de la 
simulación, la administración de la lista de eventos Λ, mediante diferentes 
implementaciones (lista doblemente enlazada, árbol binario, biselado, etc.) y métodos 
para iniciar, finalizar y reiniciar la ejecución de la simulación. 
La clase Event representa una abstracción de un evento. Cada evento presentado en 
la sección 4.1 se implementa como una clase que extiende Event (Init, Arrival, Run, 
End y Preempt). Cada clase sobrecarga el método actions() con las acciones a realizar 
al ejecutar el evento, esto es las funciones fv descritas en la sección 4.6. 
Se asume que se cuenta con una lista o arreglo con el STR a ejecutar, y clases 
auxiliares que implementen, por ejemplo, el planificador (Scheduler) y los métodos o 
técnicas a evaluar. 
La clase Init (v0), en su método actions(), crea una instancia de Arrival (v1) por 
cada tarea del STR. Estas instancias son programadas en los instantes 
correspondientes, mediante el método schedule(delay), provisto por la clase Event. La 
clase Arrival, desde su método actions(), agrega la instancia a la cola de listos del 
planificador. Luego comprueba la condición c12 y, de cumplirse, planifica una 
instancia de la clase Run (v2). Esta clase invocará los métodos auxiliares necesarios 
para cualquier modificación en S, y según se cumplan las condiciones c23 o c24, 
programará una instancia de End (v3) o Preempt (v4) respectivamente. Tanto la clase 
End como Preempt invocarán métodos que implemente el planificador, según 
corresponda. Por ejemplo, End invocará el método Scheduler.finishTask(), y la clase 
Preempt, el método Scheduler.preemptTask(). De esta manera se desacopla de los 
eventos la lógica del planificador. La clase End, de cumplirse la condición c32, 
programará una nueva instancia de la clase Run, en el instante actual. La clase 
Simulator ofrece métodos para inspeccionar Λ, a fin de comprobar las diferentes 
condiciones cod. 
6. Conclusiones y Trabajos Futuros 
Se ha presentado un modelo de eventos discretos para la simulación de un STR, en 
base a un análisis de los STR como sistemas dinámicos, discretos, no-lineales y 
determinísticos. La técnica de grafo de eventos ha sido empleada para el diseño del 
modelo, debido a su sencillez y fácil implementación. El modelo resultante brinda una 
base teórica para el desarrollo de un simulador de STR, pudiendo utilizarse cualquiera 
de los paquetes DES disponibles en el mercado. A su vez, el presente trabajo sirve de 
base para futuros trabajos que extiendan el mismo, como por ejemplo para la 
simulación de STR heterogéneos. 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1410
7.
