El marcado de un árbol dialéctico en DeLP es pspace completo
﻿ La Programación en Lógica Rebatible (DeLP) es una extensión de la Programación en Lógica que permite representar conocimiento
tentativo y razonar a través de argumentos a partir de él. Su semántica
operacional está basada en un análisis dialéctico donde argumentos a favor y en contra de un literal interactúan, construyendo un árbol dialéctico.
En este trabajo, nos enfocamos al estudio de la complejidad del proceso
de marcado del árbol dialéctico, con el cual se determina si su raíz fue
derrotada. Este punto es de gran importancia en DeLP, ya que permite
determinar si el literal soportado por el argumento raíz del árbol será
considerado entre las creencias de un agente que razona. Hemos probado
que el marcado del árbol dialéctico es pspace-completo.
Palabras Clave: Sistemas Argumentativos, Razonamiento Rebatible, Programación en Lógica, Complejidad
1 Introducción
La Programación en Lógica Rebatible (Defeasible Logic Programming), de ahora
en más DeLP es una herramienta basada en argumentación para representar
conocimiento tentativo y razonar con él [9]. Su semántica operacional está basada
en un análisis dialéctico donde los argumentos a favor y en contra de un literal
interactúan con el objeto de determinar si ese literal es aceptado entre las creencias de un agente que razona3.
La teoría de la complejidad se ha vuelto una herramienta muy importante
para comparar diferentes formalismos y para ayudar a mejorar las implementaciones, siempre que sea posible. Por esta razón es importante analizar la complejidad computacional y el poder expresivo de DeLP, ya que la primera nos
3 Ver http://lidia.cs.uns.edu.ar/DeLP
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1334
indica cuán difícil es responder una consulta, mientras que la segunda da una
caracterización precisa de los conceptos que son posibles definir como consultas.
Históricamente, las implementaciones de los sistemas de argumentación han
sido limitados al área legal en la que no hay restricciones de respuesta en tiempo
real [11, 14]. Sin embargo, en los últimos años, varias aplicaciones han sido desarrolladas e implementadas usando sistemas argumentativos. Por ejemplo, aplicaciones relacionadas con sistemas multiagentes y con búsqueda en la web [5–7].
La escalabilidad y la robustez de tales enfoques depende fuertemente de las
propiedades computacionales de los algoritmos que los soportan. Por lo tanto,
es necesario estudiar estas propiedades con el objeto de expandir los campos de
aplicación de los sistemas argumentativos.
Algunos resultados sobre complejidad computacional han sido presentados
sobre frameworks abstractos de argumentación, basados en las semánticas admisible y preferida (ver [8]). Sin embargo, estos resultados no se aplican directamente a DeLP.
En este trabajo, se presenta el estudio del marcado de un árbol de decisión
en DeLP. Este proceso es fundamental en DeLP pues permite determinar si un
literal pertenece a las creencias de un agente. Considerando la analogía de un
árbol dialéctico con los juegos y con el problema de decisión QSAT se demuestra
que el marcado de un árbol dialéctico es pspace-completo.
El resto de este trabajo está estructurado como sigue. Primero introducimos brevemente los fundamentos de DeLP, y describimos su semántica operacional. Luego, analizamos la complejidad computacional del marcado del árbol
dialéctico. En este sentido, se explica la analogía existente con el problema de
decisión QSAT, se presenta una reducción y se demuestra que el marcado es
pspace-completo. Finalmente, resumimos la contribución de este trabajo y presentamos futuras líneas de investigación.
2 DeLP
En esta sección introducimos algunos conceptos básicos de DeLP (ver [9] para
más detalles). En el lenguaje de DeLP un literal L es un átomo A o un átomo
negado∼A, donde ∼ representa la negación fuerte en el sentido de la programación en lógica. El complemento de un literal L, que notamos L, está definido
como: L =∼A, si L es un átomo A, de otro modo, si L es un átomo negado ∼A,
L = A.
Definición 1. Una regla estricta es un par ordenado, que notamos
Cabeza ← Cuerpo cuyo primer miembro Cabeza es un literal ground4 L0, y cuyo
segundo miembro Cuerpo es un conjunto finito de literales ground {L1, . . . Ln, n >
0}. Si el cuerpo es un conjunto vacío, luego podemos escribir L0., y será llamado
un Hecho. Una regla rebatible es un par ordenado, que notamos Cabeza—≺ Cuerpo
cuyo primer miembro Cabeza es un literal ground L0, y cuyo segundo miembro
4 Ground: que no contiene variables. Por no encontrar un vocablo en español que se
ajuste correctamente, utilizaremos el término en inglés.
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1335
Cuerpo es un conjunto finito no vacío de literales ground {L1, . . . Ln, n > 0}.
Un programa lógico rebatible (defeasible logic program) P, que abreviaremos
de.l.p., es un conjunto finito de reglas estrictas y hechos Π y un conjunto finito
de reglas rebatibles ∆.
Intuitivamente, mientras que Π es un conjunto de conocimiento certero y libre de excepciones, ∆ es un conjunto de conocimiento rebatible, i.e., información
tentativa que puede ser usada, siempre que nada pueda ser argumentado en su
contra.
La semántica operacional de DeLP está basada en los desarrollos de sistemas
argumentativos rebatibles [11, 13]. Un argumento para un literal L es un subconjunto minimal de ∆ que junto con Π deriva consistentemente L. La noción
de derivación corresponde a la derivación usual SLD usada en la programación
en lógica, ejecutada en un proceso backward sobre las reglas estrictas y rebatibles, donde los átomos negados son tratados como nuevos átomos en la signatura
subyacente. Así, un agente puede explicar un literal L, a través de su argumento.
Con el objeto de determinar si un literal L está soportado por un de.l.p. se
construye un árbol dialéctico para L. La raíz del árbol dialéctico es un argumento
para L y todo otro nodo en el árbol es un derrotador de su padre. En cada
nivel, para un un nodo dado, debemos considerar todos los argumentos en su
contra. Así, cada nodo tiene un descendiente por cada derrotador. Existen ciertas
restricciones al construir el árbol entre las que cuenta que un subargumento de
un argumento ya introducido en una rama no puede ser reintroducido, evitando
de este modo ciclos. Por otra parte, se exige que el conjunto de los argumentos
que soportan a L (en una rama del árbol dialéctico, los argumentos en posición
impar) sea consistente. Idénticamente, se exige que el conjunto de los argumentos
en contra (posición par en la rama) también sea consistente. Finalmente, si dos
argumentos se derrotan entre sí, se considera una derrota por bloqueo. Si un
argumento A es derrotado por otro B por bloqueo, luego A tiene a B como hijo
en el árbol dialéctico. En estos casos, se exige que los derrotadores de B que se
agregan al árbol como hijos de B, no sean derrotadores por bloqueo, esto es, los
nodos hijos de B no pueden ser derrotados por B.
Un criterio de comparación es necesario para determinar cuando un argumento derrota a otro. Aunque existen varias relaciones de preferencia, en este
trabajo nos abstraemos de este tema.
Diremos que un literal L está garantizado si existe un argumento para L y en
su árbol dialéctico cada derrotador de la raíz está derrotado. Recursivamente,
esto lleva a un proceso de marcado del árbol que comienza considerando que las
hojas del árbol son argumentos no derrotados, ya que no tienen derrotadores.
La siguiente definición especifica el procedimiento que marca a los nodos de un
árbol dialéctico con las etiquetas “U”, no derrotado, o “D”, derrotado.
Definición 2. Sea T un árbol de dialéctica cuya raíz es el argumento A de L.
Un árbol de dialéctica marcado, denotado T ∗ puede obtenerse marcando cada
nodo en T de la siguiente forma:
1. Todas las hojas de T se marcan con “U” en T ∗.
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1336
2. Sea N un nodo interno de T . El nodo N se marca con “U” si todo nodo hijo
de N está marcado con “D”, y N se marca con “D” si existe al menos un
nodo hijo de N marcado con “U”.
Un agente creerá en un literal L, si L es un literal garantizado, i.e., si existe
un árbol dialéctico cuya raíz es un argumento que soporta a L y el proceso de
marcado finaliza con la raíz etiquetada con U.
Existen cuatro posibles respuestas para una consulta L: si si L está garantizado, no si L está garantizado (i.e., el complemento de L está garantizado),
indeciso si ni L ni L están garantizados, y desconocido si L no está en la
signatura subyacente del programa.
El razonamiento basado en argumentos tiene una analogía con los juegos. El
árbol de dialéctica puede ser visto como un juego entre dos jugadores: el proponente y el oponente. Si el juego es ganado por el proponente (la raíz del árbol
dialéctico está etiquetada con U) entonces decimos que el literal está garantizado. La semántica declarativa basada en juegos GS de DeLP captura a la teoría
de prueba de DeLP a través de un modelo minimal trivaluado (más detalles en
[3, 4, 1, 2]).
3 Complejidad del marcado del árbol dialéctico
DeLP es un sistema de razonamiento donde cada consecuencia de un de.l.p.
es analizada considerando todos los argumento a favor y en contra de él. De
este modo se construye un árbol dialéctico a través del cual se analiza si un
literal está garantizado. Este árbol dialéctico es análogo a la idea de un juego
entre dos participantes: un proponente y un oponente. Así es posible definir
declarativamente si existe una estrategia ganadora[4, 1, 2] para el proponente,
esto es, si el proceso de marcado del árbol dialéctico termina etiquetando a la
raíz con U. Un problema de decisión ampliamente estudiado que se relaciona con
los juegos es QSAT.
El problema de decisión QSAT o satisfacibilidad cuantificada se define como
sigue: dada una fórmula Booleana φ en forma normal conjuntiva con las variables Booleanas x1, x2, . . . xn, ¿es la fórmula en forma normal prenex(los cuantificadores aparecen todos a la izquierda de la fórmula) ∃x1∀x2∃x3 . . . Qnxnφ
satisfacible? siendo Qi uno de los dos cuantificadores ∀ o ∃ según i sea par o
impar.
QSAT es pspace-complete[10] y es interesante ya que tiene una gran similitud con un juego de dos jugadores: ∃ y ∀. Los dos jugadores mueven en forma
alternativa, siendo ∃ quien mueve primero. Un movimiento consiste en determinar el valor de verdad de la siguiente variable, siendo ∃ el que fija el valor para
xi si i es impar y ∀ el que fija el valor si i es par. Después de n movimientos,
número de variables, uno de los dos jugadores gana el juego.
Así, para juegos generalizados tenemos el siguiente problema de decisión:
dada una situación legal del juego y un jugador, ¿tiene ese jugador una estrategia
ganadora? Por ejemplo, si tenemos los jugadores A y B y comienza A, luego la
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1337
pregunta puede ser expresada como:
∃ movimiento para A ∀ movimiento para B ∃ . . . (A gana)
Nótese que esto presenta una semejanza con la forma en que se hace el marcado de un árbol dialéctico, en el que el jugador ∃ intenta hacer satisfacible a la
fórmula sin ser derrotado y el jugador ∀ trata de hacer insatisfacible a la fórmula.
Con el objeto de probar que el marcado del árbol dialéctico es pspacecompleto debemos encontrar una reducción de un problema pspace-completo
a él. Así comenzaremos con la definición de la transformación del problema de
decisión QSAT a éste.
Definición 3. Definimos la siguiente transformación de una fórmula Booleana
cuantificada en forma normal conjuntiva prenex ∃x1∀x2∃x3 . . . Qnxnφ a un árbol
dialéctico:
– Los nodos del árbol dialéctico son:
n es impar {φ,¬φ, x1, . . . , xn,¬x1, . . . ,¬xn, C1, . . . Cm,¬C1, . . .¬Cm}
n es par {φ,¬φ, x1, . . . , xn, xn+1,¬x1, . . . ,¬xn, C1, . . . Cm,¬C1, . . .¬Cm}
siendo φ la fórmula booleana libre de cuantificadores, xi, 1 ≤ i ≤ n las
variables en φ, xn+1 un argumento auxiliar y C1, . . . Cm todas las claúsulas
que aparecen en φ, esto es, φ = C1 ∧ C2 ∧ . . . ∧ Cm.
– La relación de ataque y derrota entre los nodos se define del siguiente modo:
n es impar {(¬φ, φ), (x1,¬φ), (¬x1,¬φ), (x2, x1), (x2,¬x1), (¬x2, x1),
(¬x2,¬x1), (x3, x2), (x3,¬x2), (¬x3, x2), (¬x3,¬x2), . . . , (xn, xn−1),
(xn,¬xn−1), (¬xn, xn−1), (¬xn,¬xn−1)}
n es par {(¬φ, φ), (x1,¬φ), (¬x1,¬φ), (x2, x1), (x2,¬x1), (¬x2, x1),
(¬x2,¬x1), (x3, x2), (x3,¬x2), (¬x3, x2), (¬x3,¬x2), . . . , (xn, xn−1),
(xn,¬xn−1), (¬xn, xn−1), (¬xn,¬xn−1)(xn+1, xn), (xn+1,¬xn)}
Finalmente, en ambos casos, cada claúsula Ci ataca y derrota a xn si n es
impar y a xn+1 si n es par y si Ci es verdadera bajo la asignación de valores
de verdad en esa rama, entonces Ci es derrotada por ¬Ci.
Ejemplo 1. Consideremos la siguiente fórmula cuantificada
φ = ∃x1∀x2∃x3(x1 ∨ x2) ∧ (¬x1 ∨ ¬x3) ∧ (x2 ∨ ¬x3)
El árbol dialéctico que se generaría es el que se muestra en las Figuras 1 y 2.
El nodo raíz es la fórmula booleana que es derrotada por su negación. A
partir de este punto, cada variable derrota a la variable del nivel anterior. Cada
nodo correspondiente a la variable es el equivalente a indicar si es verdadera
(nodo xi) o falsa (nodo ¬xi).
Obsérvese que cada claúsula en la fórmula derrota a la última variable. Si la
claúsula es verdadera en esa rama (según como se fue asignando los valores de
verdad de las variables), entonces es derrotada por la negación de esa claúsula.
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1338
¬(C1) U
C1 D C2 U
¬(C3) U
C3 D

HHHH
x3 D
¬(C1) U
C1 D
¬(C2) U
C2 D
¬(C3) U
C3 D

HHHH
¬x3 U

PPPPP
x2 D
¬(C1) U
C1 D C2 U C3 U
 LL
HHHH
x3 D
¬(C1) U
C1 D
¬(C2) U
C2 D
¬(C3) U
C3 D

HHHH
¬x3 U

aaaa
¬x2 D
((((((((((
hhhhhhhhhh
x1 U
. . .
¬x1 D

¬φ D
φ U
Fig. 1. Árbol dialéctico parcial etiquetado de la fórmula Booleana donde C1 = x1∨x2,
C2 = ¬x1 ∨ ¬x3 y C3 = x2 ∨ ¬x3.
El árbol muestra el marcado comenzando en las hojas con U. Nótese que
aquella asignación que hace verdadera a todas las claúsulas termina asignando a
la jugada de la variable existencial la etiqueta U y las asignaciones que no hacen
a todas las claúsulas verdaderas asignan a la variable existencial D.
. . .
x1 U
¬(C1) U
C1 D
¬(C2) U
C2 D
¬(C3) U
C3 D

HHHH
x3 U
¬(C1) U
C1 D
¬(C2) U
C2 D
¬(C3) U
C3 D

HHHH
¬x3 U

PPPPPP
x2 D
C1 U
¬(C2) U
C2 D C3 U

HHHH
x3 D
C1 U
¬(C2) U
C2 D
¬(C3) U
C3 D
!!!! 
HHHH
¬x3 D

aaaa
¬x2 U
((((((((((
hhhhhhhhhhh
¬x1 D
AA
¬φ D
φ U
Fig. 2. Árbol dialéctico parcial etiquetado de la fórmula Booleana donde C1 = x1∨x2,
C2 = ¬x1 ∨ ¬x3 y C3 = x2 ∨ ¬x3.
En la Figura 1 se ve que existe un valor para x1 = true, tal que para todo
valor de x2, existe un valor para x3 (para x2 = true, x3 = false y para x2 =
false, x3 = false) que satisface a la fórmula. En la Figura 2 se observa que para
x1 = false no se satisface la fórmula para todos los valores de x2, en particular
no se satisface para x2 = false.
Recordemos que en el marcado del árbol dialéctico el nodo padre se marca
con U cuando todos sus hijos están marcados con D. Intuitivamente, quisiéramos
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 1339
poder utilizar esto cuando el nodo padre corresponde a una variable cuantificada
universalmente, de este modo controlamos que todos los hijos satisfagan a la
fórmula.
Por otro lado, un nodo padre se etiqueta con D cuando al menos un hijo
está etiquetado con U. Éste es el comportamiento que deseamos de un padre que
corresponde a una variable cuantificada existencialmente.
Intuitivamente, lo que buscamos es que el marcado de los niveles que juega
∃ quede todo etiquetado con D, para que el nivel superior, correspondiente al
jugador ∀ quede etiquetado con U y así sucesivamente.
Ejemplo 2. Consideremos la siguiente fórmula cuantificada
φ = ∃x∀y (x ∨ y) ∧ (¬x ∨ ¬y)
El árbol dialéctico que se generaría es el que se muestra en la Figura 3. La
fórmula es insatisfacible y el árbol termina etiquetado con D.
En este caso la cantidad de variables es par, por lo que requerimos un nodo
auxiliar para hacer que en el árbol dialéctico la primer variable analizada corresponda al jugador ∀.
¬(C1) U
C1 D C2 U
 @@
z D
y U
¬(C1) U
C1 D
¬(C2) U
C2 D
