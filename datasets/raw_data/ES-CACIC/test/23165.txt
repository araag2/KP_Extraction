Utilización de un índice métrico para búsqueda aproximada de patrones
﻿
Uno de los problemas abiertos en la búsqueda de patrones combinatoria es la indexación de
texto para permitir búsqueda aproximada sobre él. Presentamos aquí una implementación de un
método nuevo y simple de indexación para el problema de búsqueda aproximada de patrones. El
esquema aprovecha las propiedades métricas que posee la distancia de edición y puede ser aplicado a cualquier otra métrica existente entre strings. Consideramos un espacio métrico donde los
elementos son los sufijos del texto, construimos un índice métrico, y las búsquedas aproximadas
se ven como consultas por proximidad sobre ese espacio métrico.
Palabras claves: búsqueda en texto, algoritmos, espacios métricos.
*Este trabajo ha sido financiado parcialmente por el Proyecto RIBIDI CYTED VII.19 (ambos autores), por el Centro
del Núcleo Milenio para Investigación de la Web, Grant P04-067-F, Mideplan, Chile (segundo autor).
1. Introducción y motivación
Uno de los problemas abiertos en búsqueda de patrones combinatoria es la indexación de texto
para permitir búsqueda aproximada sobre dicho texto. El problema de búsqueda aproximada de patrones es: Dado un texto largo T de longitud n, un patrón (string) P de longitud m (comparativamente
corto) y un umbral r, recuperar todas las ocurrencias del patrón, es decir, los substrings del texto cuya
distancia de edición al patrón es a lo más r. La distancia de edición entre dos strings se define como
la mínima cantidad de inserciones, supresiones o substituciones de caracteres necesaria para que los
strings sean iguales. Esta distancia es usada en muchas aplicaciones, pero cualquier otra distancia que
sea de interés puede ser aplicada.
En la versión on-line de este problema, el patrón puede ser preprocesado pero el texto no. Existen
numerosas soluciones a este problema [18], pero ninguna de ellas es aceptable cuando el texto es
demasiado largo porque el tiempo de búsqueda es proporcional a la longitud del texto. Sólo recientemente se le ha prestado más atención al problema de indexación de texto para búsqueda aproximada
de strings y por ello los esquemas de indexación para este problema están aún bastante inmaduros.
Existen algunos esquemas de indexación especializados para buscar de a palabras sobre textos de
lenguaje natural [16, 4]. Estos índices se desempeñan bastante bien en ese caso pero no se pueden
extender para trabajar en el caso general. Existen aplicaciones extremadamente importantes que caen
fuera de este caso tales como ADN, proteínas, música o lenguajes orientales.
Los índices que resuelven el problema general se pueden dividir en tres clases.Backtracking [13,
21, 9, 12] que usa el árbol de sufijo [1], arreglo de sufijo [15] o grafos dirigidos acíclicos de palabras
(DAWG) [10] del texto con el fin de factorizar sus repeticiones. Se latsimula un algoritmo secuencial
sobre el texto haciendo backtracking sobre la estructura. Estos algoritmos son atractivos cuando se
buscan patrones muy cortos.
Particionado [20, 19, 3] particiona el patrón en piezas para asegurar que alguna de las piezas deba
aparecer sin alteraciones dentro de cada ocurrencia. Se usa un índice capaz de realizar búsquedas
exactas para detectar las piezas y se verifican con un algoritmo secuencial las áreas del texto que
tengan suficiente evidencia de contener una ocurrencia. Estos algoritmos funcionan bien sólo cuando
r/m es pequeño.
La tercera clase [17, 5] es un híbrido entre las otras dos. Se divide el patrón en piezas largas que
pueden aún contener (menos) errores, se las busca usando backtracking y se verifican las potenciales
ocurrencias de texto como en el método de particionado. Los algoritmos híbridos son más efectivos
porque pueden encontrar el punto adecuado entre longitud de las piezas a buscar para un nivel de error
permitido. Estos métodos toleran factores de error r/m moderados.
En [8] se propuso una nueva manera de aproximarse a este problema, la cual considera que la
distancia de edición satisface la desigualdad triangular y por lo tanto define un espacio métrico sobre
el conjunto de los substrings del texto. Así se reexpresa el problema de la búsqueda aproximada como
un problema de búsqueda por rango sobre este espacio métrico. Este enfoque se ha intentado antes
en [6, 2], pero en esos casos las particularidades del problema hacían posible indexar O(n) elementos.
En el caso general se tienen O(n2) substrings del texto. Su principal contribución es que brinda un
método (basado sobre el árbol de sufijos del texto) que colapsa los O(n2) substrings del texto en
O(n) conjuntos y encuentra una manera de construir un espacio métrico sobre esos conjuntos. El
resultado es un método de indexación que, a costa de requerir en espacio promedio O(n log n) y
tiempo de construcción promedio O(n log2 n), permite encontrar las R ocurrencias aproximadas del
patrón en tiempo promedio O(m log2 n + m2 + R), lo cual produce una brecha de complejidad sobre
trabajos previos, y se puede extender más fácilmente la idea a otras funciones de distancia (tales como
inversiones).
Más aún, este método representa un enfoque original al problema y abre muchas posibilidades
para mejoras. Presentamos aquí una versión más simple del índice propuesto en [8] que necesita
espacio O(n) y que, a pesar de no producir una brecha en la complejidad, puede ser mejor en la
práctica.
Utilizaremos la siguiente notación en este artículo. Dado un string s ∈ Σ∗ denotamos su longitud
con |s|. Denotamos también con si al i-ésimo símbolo de s, para un entero i ∈ 1, . . . , |s| y con
si...j = sisi+1 . . . sj (que sería el string vacío si i > j) y si... = si...|s|. El string vacío se denota como
. Se dice que un string x es un prefijo de xy, un sufijo de yx y un substring de yxz.
Este artículo está organizado de la siguiente manera: la Sección 2 describe algunos conceptos
relacionados a la búsqueda en espacio métricos, la Sección 3 describe en más detalle el enfoque
planteado en [8], la Sección 4 explica en mayor detalle el método utilizado en esta implementación,
la Sección 5 muestra algunos resultados experimentales y la Sección 6 da las conclusiones y las
propuestas para trabajo futuro.
2. Espacios Métricos
Nos concentramos en esta sección en dar sólo los conceptos relacionados a la búsqueda en espacios métricos que son relevantes para este trabajo, más detalles se pueden ver en [7].
Informalmente, un espacio métrico es un conjunto de objetos y una función de distancia definida
entre ellos, la cual satisface la desigualdad triangular. El problema de búsqueda por proximidad en espacios métricos consiste de indexar el conjunto de manera tal que luego dada una consulta se puedan
encontrar rápidamente todos los elementos del conjunto que estén suficientemente cerca del elemento
consultado. Esto tiene aplicaciones en un gran número de campos, tales como bases de datos no tradicionales (donde no se usa la búsqueda exacta); aprendizaje de máquina y clasificación; cuantización
y compresión de imágenes; recuperación de texto; biología computacional; predicción de funciones;
etc.
Formalmente, un espacio métrico es un par (X, d), donde X es un “universo” de objetos y d : X×
X → R
+ es una función de distancia definida sobre X que devuelve valores no negativos. La distancia
satisface las propiedades de reflexividad (d(x, x) = 0), positividad estricta (x = y ⇒ d(x, y) > 0),
simetría (d(x, y) = d(y, x)) y desigualdad triangular (d(x, y) ≤ d(x, z) + d(z, y)).
Un subconjunto finito U de X, de tamaño n = |U|, es el conjunto de objetos donde se busca. Entre
todas las clases de consultas de interés en espacios métricos, estamos interesados en las llamadas
consultas por rango: Dada una consulta q ∈ X y un radio de tolerancia r, encontrar el conjunto de
todos los elementos de U que están a lo sumo a distancia r de q. Formalmente, la salida de la consulta
(q, r)d = {x ∈ U , d(q, x) ≤ r}. El objetivo es preprocesar el conjunto a fin de minimizar el costo
computacional de producir la respuesta (q, r)d.
Sobre la amplia gama de algoritmos existentes para indexar espacios métricos, nos concentramos
en los llamados basados en pivotes, los cuales se construyen sobre una sola idea general: Seleccionar
k elementos {p
1
, p
2
, . . . , pk} de U (llamados pivotes), e identificar cada elemento u ∈ U con un punto
k–dimensional ((d(u, p
1
), . . . , d(u, pk)). Con esta información, podemos filtrar, usando la desigualdad
triangular, cualquier elemento u tal que |d(q, pi)− d(u, pi)| > r para algún pivote pi, dado que en ese
caso sabemos que d(q, u) > r sin necesidad de evaluar realmente d(q, u). Aquellos elementos que no
se puedan filtrar usando esta regla se comparan directamente contra q.
Una característica interesante de los algoritmos basados en pivotes es que reducen el número final
de evaluaciones de distancia aumentando el número de pivotes. Se define
Dk(x, y) = máx1≤j≤k |d(x, pj) − d(y, pj)|. Hacer uso de los pivotes equivale a descartar los elementos u tales que Dk(q, u) > r. A medida que se agreguen más pivotes se realizan más evaluaciones
de distancia (exactamente k) para computar Dk(q, ∗) (a éstas se las llama evaluaciones internas), pero
por otra parte Dk(q, ∗) incrementa su valor y así tiene una mayor probabilidad de filtrar o descartar
más elementos (a aquellas comparaciones contra elementos que no pueden ser descartados por Dk se
las llama externas). Por lo tanto existe un número de pivotes óptimo.
Si estamos interesados no sólo en el número de evaluaciones de distancia realizadas sino también en el tiempo total de CPU requerido, entonces recorrer todos los n elementos para descartar
algunos de ellos podría ser inaceptable. En ese caso, se necesitan métodos de búsqueda por rango
multidimensional, los cuales incluyen estructuras tales como kd–tree, R–tree, X–tree, etc. [22, 11].
Esas estructuras permiten indexar un conjunto de objetos en un espacio k–dimensional con el fin de
procesar consultas por rango.
En este trabajo nos interesamos en un espacio métrico donde el universo es el conjunto de strings
sobre algún alfabeto, es decir X = Σ∗, y la función de distancia es la llamada distancia de edición o
distancia de Levenshtein. Ésta se define como el mínimo número de cantidad de inserciones, supresiones o substituciones de caracteres necesaria para hacer que los strings sean iguales [14, 18]. La
distancia de edición, y de hecho cualquier otra distancia definida como la mejor manera de convertir
un elemento en otro, es reflexiva, estrictamente positiva (en la medida que no existan operaciones de
costo cero), simétrica (siempre y cuando las operaciones permitidas sean simétricas) y satisface la
desigualdad triangular.
El algoritmo para computar la distancia de edición ed() se basa en programación dinámica.
Supongamos que se necesita computar ed(x, y). Se debe llenar una matriz C
0..|x|,0..|y|, donde
Ci,j = ed(x1..i, y1...j), entonces C
|x|,|y| = ed(x, y). Esto se computa de la siguiente manera:
Ci,0 = i , C0,j = j,
Ci,j = if(xi = yj) then Ci−1,j−1 else 1+mín(Ci−1,j, Ci,j−1, Ci−1,j−1)
El algoritmo toma O(|x|, |y|) tiempo. La matriz puede ser llenada por fila o por columna. El
espacio requerido será solamente O(|y|), dado que solamente se deben almacenar las filas previas
para computar una nueva, además se debe mantener una fila y almacenarla.
3. Índice Métrico para Búsqueda Aproximada de Patrones
Una aproximación directa de la indexación de un texto para búsqueda aproximada usando técnicas
de espacios métricos tiene como principal problema la existencia de O(n2) substrings diferentes en
un texto y por lo tanto se deben indexar O(n2) objetos, lo cual es inaceptable.
El árbol de sufijos provee una representación concisa de todos los substrings del texto en O(n)
espacio. Así, en lugar de indexar todos los substrings del texto, solamente se indexan los nodos explícitos del árbol de sufijos. Por lo tanto hay O(n) objetos ha ser indexados como un espacio métrico
bajo la distancia de edición.
Ahora, cada nodo interno explícito del árbol de sufijos se representa a sí mismo y a los nodos que
descienden de él por un paso unario. Así, cada nodo explícito que corresponde a un string xy y su
padre corresponde al string x representa el siguiente conjunto de strings
x[y] = {xy
1
, xy
1
y
2
, . . . , xy}
Por ejemplo si el string “a[bra]” es un nodo interno de árbol, éste representa
“a[bra]” = {“ab”, “abr”, “abra”}
Las hojas del árbol de sufijos representan un único substring del texto y todas sus extensiones
hasta llegar al sufijo de texto completo.
Entonces en lugar de indexar O(n2) substrings del texto, se indexarán O(n) conjuntos de strings,
que son los conjuntos representados por los nodos explícitos internos y externos del árbol de sufijos.
Al momento de decidir cómo indexar este espacio métrico formado por O(n) conjuntos de strings
surgen varias opciones posibles, pero la propuesta en este artículo es la basada en pivotes. Se seleccionan aleatoriamente k pivotes de longitudes 0, 1, 2, . . . , k− 1. Para cada nodo explícito del árbol de
sufijos x[y] y cada pivote pi se calcula la distancia entre pi y todos los strings representados por x[y].
Del conjunto de distancias desde un nodo x[y] a pi se almacenarán la mínima y la máxima. Como
todos esos strings son de la forma {xy
1
, . . . , yj, 1 ≤ j ≤ |y|} las distancias de edición pueden ser
computadas en O(|pi||xy|) tiempo.
Dado que en los nodos externos del árbol de sufijos el y tiende a ser bastante largo (O(n) en
promedio) se usa una gran cantidad de tiempo computacional calculando las distancias de edición
y se obtienen distancias máximas muy altas. La solución dada por los autores a esta situación fue
la pesimista: cuando el nodo del árbol sea externo se asumirá que su distancia máxima es n. La
distancia mínima puede encontrarse en O(|pi|máx(|pi|, |x|)) porque no es necesario considerar strings
arbitrariamente largos xy
1
, . . . , yj.
Una vez que se ha hecho esto, para todos los nodos del árbol de sufijos y todos los pivotes, se
tiene un conjunto de k valores máximos y mínimos para cada nodo explícito del árbol de sufijos. Esto
puede ser visto como un hiper-rectángulo en k dimensiones:
x[y] → 〈 (mín(ed(x[y], p
0
)), . . . , mín(ed(x[y], pk−1))),
(máx(ed(x[y], p
0
)), . . . , máx(ed(x[y], pk−1))) 〉
y es seguro que todos los strings en x[y] caen dentro del rectángulo.
Sea P el patrón a buscar con, a lo sumo, r errores. Esto es un query por rango con radio r en el
espacio métrico de los nodos del árbol de sufijos. Como en los algoritmos basados en pivotes, se compara el patrón P contra los k pivotes y se obtiene una coordenada k-dimensional (ed(P, p
1
), . . . , ed(P, pk)).
Sea pi un pivote dado y x[y] un nodo dado. Si se cumple que:
ed(P, pi) + r < mín(ed(x[y], pi)) ∨ ed(P, pi) − r > máx(ed(x[y], pi)
entonces, por desigualdad triangular, se sabe que ed(P, xy ′) > r para cualquier xy′ ∈ x[y]. La eliminación de un string, como posible respuesta, puede ser hecha usando cualquier pivote pi. De hecho
los nodos que no pueden ser eliminados son aquellos cuyo hiper-rectángulo tiene una intersección no
vacía con el hiper-rectángulo 〈(ed(P, p
1
)−r, . . . , (ed(P, pk)−r), (ed(P, p1)+r, . . . , (ed(P, pk)+r)〉.
En la Figura 1 puede verse el nodo que contiene un conjunto de puntos y se almacena su mínima y
su máxima distancia a dos pivotes. Esto determina un rectángulo bidimensional donde caen todas las
distancias desde cualquier substring del nodo a los pivotes. El query es un patrón P y una tolerancia
r, la cual define un círculo alrededor de P .
Después, teniendo la distancia de P a los pivotes, se puede crear un hiper-cubo (en este caso un
cuadrado) de lado 2r + 1. Si el cuadrado no interseca con el rectángulo ningún substring del nodo
está lo suficientemente cerca de P . El problema de encontrar todos los rectángulos k-dimensionales
que intersecan con el rectángulo de un query dado es el clásico problema de búsqueda por rango
multimensional. Aquellos nodos x[y] que no puedan ser eliminados por ningún pivote deberán ser
comparados directamente contra el patrón P . Para aquellos cuya distancia mínima a P es a lo más
r se reportarán todas sus ocurrencias. Los puntos de comienzos de las mismas se encuentran en las
hojas de los subárboles con raíz en el nodo que coincidió.
