ABN Considerando características de los objetos de negociación
﻿Un escenario típico de negociación involucra dos agentes cooperativos que poseen recursos y tienen la necesidad de realizar un intercambio para alcanzar sus objetivos. Los recursos tienen características
que pueden ser determinantes para alcanzar o no, sus metas. Los agentes
conocen con certeza tanto sus recursos como las características que estos
tienen, pero suelen tener creencias, posiblemente erróneas o incompletas,
sobre los recursos del oponente. Para acordar cuales recursos trocar, establecen una comunicación en donde se ofrecen propuestas de posibles
intercambios y se responden con críticas y contrapropuestas. El rumbo
de la comunicación va cambiando en la medida de que los agentes revelan
los recursos que poseen y las características de estos. En este trabajo se
presenta un modelo de negociación automática basada en argumentación
para agentes que quieren negociar en este tipo de escenarios. Se utilizan
técnicas de revisión de creencias para la interpretación de las propuestas
y argumentación para la generación de propuestas.
1. Introducción
La negociación es una forma de interacción entre dos o más agentes que
tienen objetivos en conflicto y buscan un acuerdo aceptable. Un escenario típico de negociación involucra a dos agentes co-dependientes (necesitan del otro
agente para alcanzar su objetivo) que deben negociar para alcanzar un beneficio mutuo. Diferentes enfoques se han desarrollado para abordar la negociación
en sistemas multiagentes [7] entre las cuales se puede destacar la negociación
basada en argumentación –ABN: argumentation-based negotiation– (por ej. [1],
[4], [6],[7], ). En ABN se plantea que los agentes que negocian no sólo intercambien propuestas, sino que también las razones que soportan a las mismas.
51
Esto permite a los agentes conocer las creencias y preferencias de la contraparte
modificando la aceptabilidad y valoración de cada propuesta [3]. Además, dado
que los agentes generalmente tienen información incorrecta o incompleta sobre
los otros, el intercambio de argumentos les brinda información que les posibilita
actualizar sus creencias.
Para participar en el proceso de negociación, los agentes ABN tienen que
ser capaces de generar, seleccionar y evaluar los argumentos asociados a las
propuestas y actualizar acordemente sus estados mentales[6]. En [5] los autores
han presentado un modelo de negociación automática entre dos agentes cooperativos, benevolentes (i.e. siempre tratan de hacer lo que se les pide) y veraces
(i.e. no comunican información que conocen que es falsa). Las propuestas son
modeladas como argumentos, se consideran recursos tanto a los objetos físicos
como al conocimiento necesario para alcanzar los objetivos y se utilizan técnicas de revisión de creencias para el proceso de interpretación y generación de
argumentos. En ese modelo se permite intercambiar conjuntos de recursos, sin
embargo no se considera la descripción de características que tienen los objetos
y por lo tanto, en el diálogo no se incluyen argumentos que traten sobre estas
características.
Las características de los objetos son importantes en el proceso de una negociación en el contexto planteado, ya que determinan si se puede con estos
recursos alcanzar o no un objetivo. Por ejemplo, generalmente con un martillo y
un clavo se puede colgar un cuadro en la pared, pero si el clavo es pequeño suele
no servir para ese fin. En [1] los autores muestran como a través de un diálogo
que incluye propiedades de los objetos/sujetos a negociar en los argumentos,
puede influir en las preferencias de los agentes que negocian y por ende, en el
resultado de la negociación.
En este trabajo se extiende el modelo de negociación basada en argumentación
presentado en [5] en distintos aspectos. En primer lugar, se incluye la representación de las características de los objetos y su utilización en los argumentos
que soportan o critican a las distintas propuestas. Luego, se extiende las formalización de una propuesta para que incluya la argumentación de lo que se
ofrece. Además, los mensajes que intercambian los agentes son más completos, pudiendo incluir una crítica a la última propuesta recibida. Para dar una
mejor representación al conocimiento que tiene un agente, sobre los planes que
le permitan alcanzar o no, los distintos objetivos (los cuales dependen de las
propiedades de los recursos que están involucrados), se ha decidido utilizar una
lógica rebatible para su representación.
Se considera un escenario de negociación que involucra a dos agentes que
poseen recursos y tienen la necesidad de realizar un intercambio (trueque) para
alcanzar sus objetivos. Los recursos tienen características que pueden ser determinantes para alcanzar o no, sus metas. Los agentes conocen con certeza sus
objetivos, sus recursos y las propiedades que estos tienen y por otra parte, tienen
creencias, posiblemente incompletas o erróneas, sobre los objetivos y los recursos
del oponente. Además, pueden tener conocimiento erróneo o incompleto sobre
cuáles son los planes y recursos que le permiten satisfacer sus propias metas.
52
Para acordar cuáles recursos trocar, establecen una comunicación en donde se
intercambian mensajes. Dentro de estos mensajes se ofrecen posibles intercambios (propuestas) y se responden con críticas y contra-ofertas. En la medida de
que los agentes revelan los recursos que poseen y las características que estos
tienen, las creencias de los agentes respecto al oponente van cambiando y con
ello, se modifican las propuestas a intercambiar. En este trabajo se formaliza un
modelo de negociación automática basada en argumentación para este tipo de
escenario, utilizando técnicas de revisión de creencias para la interpretación y la
generación de las propuestas. A continuación se presenta un ejemplo motivador
del modelo de negociación que se propone.
Example 1. Dos agentes Ag1 y Ag2 se encuentran en una habitación, cada uno
tiene un objetivo diferente que no pueden alcanzar con sus propios recursos.
El agente Ag1 tiene como objetivo decorar una pared. Posee los siguientes
recursos: tiene un cuadro pequeño, un pincel, un tornillo y un martillo. Cree
que: colgando un cuadro a la pared o pintándola de rojo (solamente) la pared
quedará decorada, usando un martillo y un clavo usualmente se puede colgar
el cuadro, usando un martillo y un clavo pequeño usualmente se puede colgar
un cuadro pequeño y que usando un tornillo y un destornillador usualmente se
puede colgar un espejo. Respecto al agente Ag2 cree que su objetivo es pintar la
pared y que posee un destornillador y pintura pero no de color rojo.
Por el otro lado, el agente Ag2 tiene como objetivo colgar un espejo en la
pared. Tiene los siguientes recursos: un espejo, una tachuela y un destornillador.
Tiene las siguientes creencias: una tachuela es un clavo chico, con un martillo y un
clavo usualmente se puede colgar un cuadro, pero si el clavo es chico usualmente
no se lo puede colgar, con un martillo y un clavo usualmente se puede colgar un
espejo, pintar la pared la decora. También tiene como creencia, que el objetivo
del agente Ag1 es pintar una pared.
Adicionalmente ambos creen: que si la pared está pintada de rojo, entonces
está pintada y que con un pincel y pintura usualmente se pinta la pared,
Cabe destacar que en este escenario, los agentes se encuentran en la siguiente
situación: (1) ninguno de los dos puede alcanzar su meta por si mismo, (2)
tienen información incompleta o incorrecta respecto del otro agente (por ej. la
creencia de Ag2 sobre el objetivo de Ag1 es incorrecta) (3) tienen información
contradictoria respecto a como alcanzar un objetivo (por ej. si se puede o no,
colgar un cuadro utilizando un clavo pequeño).
El resto de este trabajo está estructurado de la siguiente forma, en la Sección
2 se presenta el lenguaje que utiliza un agente y en la Sección 3 se describe
su arquitectura. Luego, en la Sección 4 se introduce el diálogo entre agentes
y la Sección 5 los procesos de evaluación, interpretación y generación de las
propuestas. Finalmente, se presenta en la Sección 6 algunas conclusiones y en el
apéndice un diálogo posible entre los agentes del ejemplo motivador, .
2. Representación del conocimiento del Agente
En este trabajo se utiliza Defeasible Logic Programing (DeLP) como lenguaje
de representación y mecanismo de deducción de los agentes, que permite tratar
53
conocimiento rebatible. Luego las creencias de cada uno son representadas como
un “Defeasible Logic Program”. A continuación se introduce DeLP de manera
compacta, el lector puede referirsea [2] para una presentación completa de DeLP.
En DeLP, un programa P es un par (Π,∆) donde Π es un conjunto consistente
de hechos y reglas estrictas y ∆ un conjunto de reglas rebatibles. Los hechos son
representados por literales (átomos o átomos negados que utilizan la negación
fuerte “∼”), las reglas estrictas se denotan “l0 ← l1, .., ln” mientras que las rebatibles “l0 ≺ l1, .., ln”. Las reglas rebatibles representan información tentativa,
pueden ser utilizadas para la deducción de la conclusión si no se plantea nada en
su contra, mientras que los hechos y reglas estrictas representan el conocimiento
no rebatible. Por lo tanto, una regla rebatible representa una conexión débil entre el cuerpo y la cabeza, y debe leerse como ”si l1, .., ln entonces usualmente se
cumple l0‘. En DeLP también existe la posibilidad de representar hechos negados y reglas cuyas cabezas contienen literales negados. Por lo tanto es posible la
derivación de conclusiones contradictorias. Un conjunto A ⊂ ∆ es un argumento
para el literal l (denotado 〈A, l〉) si Π∪A es consistente y deriva a l. Para establecer si 〈A, l〉 es no–derrotado, se lo compara con todos los contra–argumentos es
decir argumentos que lo refutan o contradicen y por algún criterio son preferidos
a 〈A, l〉. Dado que los contra–argumentos también son argumentos, estos pueden
ser derrotados por otros, y así formar una secuencia de argumentos. Una línea
de argumentación aceptable es una secuencia finita de argumentos [A1, .., An] tal
que: Cada argumento derrota a su predecesor; son consistentes tanto la union de
los argumentos que soportan a la conclusión (A2k+1) como la unión de los que
la que desafían (A2k); no existen argumentos que sean sub argumentos de otros
que aparezca antes en la secuencia. Por lo general, cada argumento tiene más de
un argumento que lo derrota y por lo tanto, podría existir más de una línea de
argumentación. El conjunto de líneas de argumentación forma un árbol, llamado
árbol dialéctico, que tiene argumentos como nodos y cada camino desde la raíz a
una hoja representa una línea de argumentación. El árbol se utiliza para decidir
si un literal l se justifica o no. Si en un árbol dialéctico cuya raíz es 〈A, l〉 existe
una línea de argumentación de longitud par, significa que existe un argumento
que desafía a la conclusión y que no puede ser derrotado. En estos casos el árbol
dialéctico no justifica al literal l. Un literal l es justificado en un programa DeLP,
si existe un árbol dialéctico que lo justifica. De esta manera, dado un programa
P , y una consulta l el intérprete DeLP responde: YES si P justifica l, NO si
P justifica ∼ l, UNDECIDED si P no justifica ni l ni ∼ l, UNKNOWN si no
pertenece al lenguaje del programa.
En el contexto de negociación establecido, los agentes negocian objetos que
poseen características con el fin de satisfacer sus metas. De esta manera, los
objetos, las características y las metas son elementos de la negociación que deben
ser representados por el lenguaje y es necesario distinguirlos en el lenguaje DeLP,
Los literales que se distinguen para representar los elementos de la negociación son los siguientes: Rat, un conjunto de fórmulas atómicas que representan clases de recursos (ej. hammer(h), nail(n), picture(p)), Fat, un conjunto de fórmulas atómicas que representan características de recursos (ej. red(c),
54
small(n)), Gat un conjunto de fórmulas atómicas que representan metas (ej.
decorate wall, hang(p)).
Los conjuntos de reglas que se distinguen para representar la relación entre
los elementos de la negociación son los siguientes:
Rd = {r0 ≺ r1, f1, .., fn | ri ∈ Rat, fj ∈ Fat}. El conjunto de las fórmulas
en forma de regla que relacionan recursos y características con otros recursos
Estas reglas representan la creencia de que un recurso r0 usualmente es considerado un recurso r1 con las características f1, ..., fn. Por ejemplo la fórmula
tack(c) ≺ nail(c), small(c) indica que una tachuela es un clavo chico, y la fórmula ∼ tack(c) ≺ nail(c),∼ small(c) indica que si el clavo no es chico entonces no
es considerada tachuela;
Rp = {f0 ≺ r0, | r0 ∈ Rat, f0 ∈ Fat}, el conjunto de las fórmulas en forma
de regla que relacionan recursos con características, estas reglas representan la
creencia de que un recurso r0 usualmente tiene la característica f0. Por ejemplo
la fórmula small(c) ≺ tack(c) indica que una tachuela es considerada como algo
chico;
Gd = {g0 ← g1, .., gn | gi ∈ Gat}, el conjunto de las fórmulas en forma
de regla que relacionan metas con otras metas. Estas reglas significan que la
meta g0 es alcanzada si todos las sub-metas g1, ..gn son alcanzadas. Por ejemplo:
decorate wall← red paintwork(c) significa que una pared se decora si se pinta
de rojo;
P = {g ≺ r1, f11 , .., f
m
1 , .., rn, f
1
n, .., f
l
n| g ∈ G
at, ri ∈ Rat, f
j
i ∈ F
at} el conjunto de las fórmulas en forma de regla que relacionan las metas con los objetos y características. Este tipo de regla significa que la meta g usualmente se
puede alcanzar con el recurso r1 que posee las características f11 , .., f
m
1 , con
el recurso r2 con características f12 , .., f
k
2 y así sucesivamente. Por ejemplo,
la fórmula hang(p) ≺ picture(p), hammer(h), nail(n) significa que un cuadro
se puede colgar utilizando un martillo y un clavo, mientras que la fórmula
∼ hang(p) ≺ picture(p), hammer(h), nail(n) sugiere que no es posible si el clavo
es pequeño.
De esta manera, las fórmulas del lenguaje que describen los recursos se denotan como R = Rat ∪Fat ∪Rd ∪Rp y las que describen las metas G = Gat ∪ Gd.
En este trabajo las creencias de cada agente están enfocadas a representar
los recursos que posee y su descripción (R), las metas y las sub-metas necesarias
para alcanzar otras metas (G) y los recursos que son necesarios para alcanzar
metas (P). Se define al lenguaje de creencias como: B = R∪ G ∪ P.
3. Arquitectura del Agente
El estado mental de cada agente negociador Agi posee un conjunto de creencias (Bi), un objetivo a alcanzar (Gi), así como también un conjunto de creencias
(Bji ) sobre su agente oponente Agj y cual es el objetivo de su oponente (G
j
i ).
Además de las creencias, el estado mental de los agentes incluye el historial de
negociación, es decir el diálogo establecido desde el comienzo de la negociación
(Ver Def. 4 para mas detalles), lo cual se formaliza a continuación.
55
Definition 1. Sean Agi, Agj los agentes involucrados en la negociación. El
estado mental del agente Agi y de manera equivalente el de Agj es una tupla
MSi = < Bi, Gi, B
j
i , G
j
i , Hi >, donde: Bi, B
j
i ⊂ B; Gi, G
j
i ∈ G
at y H es la
historia de negociación entre Agi y Agj.
Continuando con el ejemplo 1, se formaliza a Ag1 como
MS1 =< B1, G1, B21 , G
2
1, H1 >, donde:
B1 = {picture(p), small(p), brush(b), screw(s), hammer(h),
decorate wall← hang(p); decorate wall← red paintwork(c)
∼ decorate wall←∼ red paintwork(c)
hang(p) ≺ picture(p), hammer(h), nail(n)
hang(p) ≺ picture(p), small(p), hammer(h), nail(n), small(n)
hang(m) ≺ mirror(m), screw(s), screwdriver(sc)
paintwork(c) ≺ brush(b), paint(c); paintwork(c) ≺ red paintwork(c) }
G11 = decorate wall
B21 = {paint(c),∼ red(c), screwdriver(sc)}
G21 = paintwork(c)
H1 = ∅
El mecanismo de decisión de los agentes utiliza la información del estado mental
(MS) para calcular que mensaje enviar al otro agente. La función Init calcula
el primer mensaje del diálogo, los demás mensajes son calculados por Answer.
Definition 2. El mecanismo de decisión de un agente Agi consiste en una
tupla DM i =< Initi, Answeri >, donde:
Initi : MSi →MSi ×Message
Answeri : MSi ×Message→MSi ×Message ∪ {accept, withdraw}
El algoritmo Init es el encargado de comenzar la negociación, en primer lugar
selecciona las propuestas que cree que sirven tanto para alcanzar su meta como
la del otro agente, si no existen selecciona las propuestas que solamente sirven
para alcanzar su meta sin tener en cuenta si lo ofrecido le es útil al otro agente,
si tampoco existen envía el mensaje withdraw indicando que abandona la negociación. Por otro lado, el algoritmo Answer actualiza las creencias del agente
utilizando la propuesta recibida (proceso de interpretación). A continuación, si
lo ofrecido le permite alcanzar su meta y puede cumplir con lo que le demandan,
envía el mensaje accept indicando que está de acuerdo (proceso de evaluación).
En caso contrario genera una crítica y una contra propuesta (proceso de generación). Los procesos de interpretación, evaluación y generación de propuestas
se detallan en la sección 5.
Finalmente se define un agente negociador como un estado mental, que lleva
cuenta de la información relevante para la negociación y por un mecanismo de
decisión que calcula el próximo mensaje del diálogo. En la próxima sección se
definen las propuestas y críticas que pueden ser enviadas en los mensajes.
Definition 3. Un agente Agi es una tupla < MSi, DM i >, donde MSi representa su estado mental y DM i su mecanismo de decisión.
56
4. Propuestas y Críticas para Alcanzar un Acuerdo
El diálogo entre dos agentes esta determinado por una secuencia finita de
mensajes enviados de manera alternada por cada uno de los agentes participantes
de la negociación. Los mensajes contienen propuestas y críticas, el mensaje final
del diálogo es uno que indica que hay acuerdo entre los agentes (accept) o bien
uno que indica que no hay acuerdo (withdraw).
Definition 4. Un diálogo entre dos agentes negociadores Agi y Agj es una
secuencia finita de mensajes [m1, ...,mn−1,mn] tal que: (1) m1 es una propuesta
p1, (2) para 1 < i < n, mi es un par (ci, pi) donde ci es una crítica a pi−1 y pi
es una propuesta. (3) mn ∈ {accept, withdraw}, (4) no hay mensajes repetidos,
i.e. ms 6= mt, with t, s < n ; (5) dos mensajes consecutivos no pertenecen al
mismo agente.
Una propuesta es una sentencia que deja al descubierto la intención que tiene
un agente de intercambiar un conjunto de recursos que posee (Oferta) por otro
conjunto de recursos que necesita (Demanda). Adicionalmente la propuesta incluye una justificación de porque esta interesado en realizar ese intercambio. Una
propuesta puede verse como la siguiente sentencia:
Necesito Bd, porque Bds, luego alcanzo Gd.
A cambio te doy Bo, porque Bos, luego alcanzás Go.
donde Bd representa el conjunto de recursos que el agente demanda, Bds representa el conjunto de creencias que utiliza el agente para justificar que con los
recursos demandados alcanza la meta Gd. De manera análoga, Bo representa el
conjunto de recursos que el agente ofrece a cambio, Bos representa el conjunto
de creencias que el agente utiliza para justificar que con los recursos ofrecidos se
alcanza la meta Go. Estos conceptos son formalizados en la Definición 5.
Definition 5. Sean Bd, Bds, Bo, Bos subconjuntos de BL; y Gd, Go elementos
de Gat. Una Propuesta es una tupla 〈d, o〉, donde el primer elemento es una
demanda d = 〈Bd, Bds, Gd〉, el segundo una oferta o = 〈Bo, Bos, Go〉 y se cumple
lo siguiente:4
1. Bd ∪Bds|∼ Gd 2. Bds|6∼ Gd 3. Bo ∪Bos|∼ Go 4. Bos|6∼ Go
Continuando con el ejemplo 1, suponga que Ag1 comienzala negociación con el
siguiente mensaje:
Necesito un clavo porque con el martillo que tengo, podría amurar un cuadro a
la pared y de esta manera quedaría decorada la pared. Quiero decorar la pared.
A cambio te doy un pincel para que lo uses con la pintura que tenés para pintar
la pared.
Formalmente este mensaje se representa como p1 = 〈d1, o1〉, donde:
d1 = 〈{nail(n)}, {hammer(h); picture(p);
hang(p) ≺ picture(p), hammer(h), nail(n); decorate wall← hang(p)},
decorate wall〉
o1 = 〈{brush(b)}, {paint(c); paintwork(c) ≺ brush(b), paint(c)}, paintwork(c)〉
4 Se escribe P |∼ a cuando la respuesta de la consulta a en el programa DeLP P es
YES y P |6∼ a cuando la respuesta es NO o UNDECIDED.
57
Luego de que un agente recibe una propuesta, él puede contestar con un mensaje:
de aceptación (accept), en cuyo caso se realiza el intercambio de recursos de
acuerdo a la última propuesta; de salida de la negociación (withdraw) en este
caso no se efectúa ningún intercambio; o bien, puede rechazar la propuesta sin
salir de la negociación haciendo una crítica a la última propuesta y agregar una
nueva propuesta.
Definition 6. Sea una propuesta p = 〈d, o〉, donde: d = 〈Bd, Bds, Gd〉 y o =
〈Bo, Bos, Go〉, se define una crítica c como 〈(C1, C2), C3〉 donde C1 ⊂ DL,
C1 ⊂ BL, C3 ∈ {∅, yes, no} y alguna de las siguientes condiciones se cumple:
1. (Bd−C1)∪Bds|6∼ Gd 2. Bd ∪Bds ∪ C2|6∼ Gd 3. C3 = no
Se observa que C1 y C2 son críticas a la demanda (d1), básicamente la primer
crítica afirma la falta de los recursos demandados, la segunda crítica adiciona
información de manera que la meta no pueda ser justificada. También se puede
observar que C3 es una crítica a la oferta (o1), básicamente es un rechazo a la
oferta, sin especificar la causa. Continuando con el ejemplo, Ag2 podría responder
a la propuesta p1 usando alguna de las siguientes críticas:
C1 = {nail(n)} (No tengo un clavo.)
C2 = {tack(n); nail(c) ≺ tack(c); small(c) ≺ tack(c);
∼ hang(p) ≺ picture(p), hammer(h), nail(n), small(n)}
(Tengo una tachuela, que es un clavo chico. Si el clavo es chico, usualmente
no se puede amurar un cuadro.)
C3 = no (No creo que tu oferta sea útil para mi.)
5. Interpretación, Evaluación y Generación de Propuestas
El proceso de interpretación comienza luego de que un agente recibe una
propuesta, éste está basado en las siguientes intuiciones: Como los agentes son
veraces, benevolentes y conocen sus propios recursos, cuando el agente Agj recibe
una propuesta p = 〈〈Bd, Bds, Gd〉, 〈Bo, Bos, Go〉〉 de Agi, el primero puede inferir
lo siguiente: (1) que Agi no tiene Bd (lo que demanda) y si tiene Bo (lo que
ofrece), (2) que Agi cree en Bds y Bos, (3) que Agi tiene como objetivo Gd. A
partir de estas inferencias, el estado mental se actualiza utilizando operadores
de revisión de creencias, de manera similar [5].
A continuación el agente realiza un proceso de evaluación de la propuesta.
Dado que un agente es consciente de los recursos, creencias y objetivos que posee,
puede determinar de manera individual si: (1) posee los recursos demandados,
(2) no existe ningún conjunto de creencias que refuten la demanda, (3) que la
oferta de la propuesta permita alcanzar la meta. En caso de que todas estás
condiciones se cumplan, el agente acepta la propuesta, por el contrario si alguna
condición no se cumple entonces puede generar la crítica adecuada.
De manera similar a [5], el proceso de generación de propuestas Gen se basa
en un operador ⊕ que calcula todas las pruebas tentativas de un programa DeLP.
A continuación se define el operador ⊕ y la función Gen de la siguiente manera:
58
Definition 7. Sea P un programa DeLP, y h un literal, se define el conjunto
P ⊕ h de la siguiente manera: X ∈ P ⊕ h sii X es la unión de hechos y reglas
que participan en algún árbol dialéctico que garantiza h en el programa P .
Podemos ver que cada elemento X ∈ P ⊕ h, (1) es un programa DeLP, (2)
garantiza h, (3) si se elimina un hecho o regla de los argumentos que soportan
la conclusión, entonces X deja de garantizar h.
Definition 8. Sean B′, B′′ ⊂ B y G′ ⊂ G, se define Gen de la siguiente manera:
Gen(B′, B′′, G′) =def { 〈B,Bs, G〉 : B,Bs,⊂ B, G ⊂ G, G = G′
(Bs ∪B) ∈ (B′ ∪R′′ ∪B)⊕G′, }
Proposition 1. Sea un agente con estado mental MSi =< Bi, Gi, B
j
i , G
j
i , Hi >
se cumple lo siguiente: Si d ∈ Gen(Bi, B
j
i , Gi), o ∈ Gen(B
j
i , Bi, G
j
i ) y la oferta
(o) y demanda (d) no comparten recursos entonces: 〈o, d〉 es una propuesta
6. Conclusiones
En este trabajo se ha presentado un modelo de negociación automática basada en argumentación donde los agentes utilizan conocimiento rebatible y técnicas
de revisión de creencias para la interpretación y la generación de las propuestas.
Se ha extendido el modelo de negociación basada en argumentación presentado
en [5] en distintos aspectos. En primer lugar, se incluyó la representación de las
características de los objetos y su utilización en los argumentos que soportan
o critican a las distintas propuestas. También, se extendió las formalización de
una propuesta para que incluya la argumentación de lo que se ofrece. Además,
los mensajes que intercambian los agentes son más complejos, pudiendo incluir
una crítica a la última propuesta recibida. Para dar una mejor representación al
conocimiento que tiene cada agente, sobre los planes que le permitan alcanzar o
no, los distintos objetivos (los cuales dependen de las propiedades de los recursos
que están involucrados), se utilizó una lógica rebatible para su representación.
Actualmente se trabaja en la extensión y adaptación de la implementación de
los agentes desarrollados en Prolog en [5] para poder implementar y experimentar
con agentes dentro de este modelo más amplio de negociación.
Apéndice: Diálogo entre Agentes
A continuación se presenta un diálogo posible entre los dos agentes del ejemplo motivador:
Ag1 Me das un clavo? porque quiero decorar la pared. Con el martillo que tengo,
podría amurar un cuadro a la pared y de esta manera quedaría decorada la
pared. A cambio te doy un pincel para que lo uses con la pintura que tenés
para pintar la pared.
d = 〈{nail(n)}, {hammer(h); picture(p); decorate wall← hang(p);
hang(p) ≺ picture(p), hammer(h), nail(n); }, decorate wall〉
o = 〈{brush(b)}, {paint(c); paintwork(c) ≺ brush(b), paint(c)}, paintwork(c)〉
Ag2 Tengo una tachuela, que es un clavo chico, y si el clavo es chico,usualmente
el cuadro no se puede amurar a la pared.
59
C2 = {tack(n); nail(c) ≺ tack(c); small(c) ≺ tack(c);
∼ hang(p) ≺ picture(p), hammer(h), nail(n), small(n)}
Me das un martillo? porque quiero colgar un espejo. Con la tachuela que
tengo, podría amurar el espejo. A cambio te doy pintura para que lo uses
con el pincel que tenés para pintar la pared, creo que si la pared esta pintada
entonces está decorada, por lo tanto decorás la pared.
d = 〈{hammer(h)}, {tack(n);mirror(m);nail(n) ≺ tack(n)
hang(m) ≺ mirror(m), hammer(h), nail(n); }, hang(m)〉
o = 〈{paint(c)}, {brush(b); paintwork(c) ≺ brush(b), paint(c);
decorate wall← paintwork(c)}, decorate wall〉
Ag1 La pintura no es de color rojo, por lo tanto no la decora.
C2 = {∼ red(p);∼ red paintwork(c) ≺ brush(b), paint(p),∼ red(p)
∼ decorate wall←∼ red paintwork(c), paintwork(c)}
Me das un clavo chico? porque quiero decorar la pared. Con el martillo que
tengo, podría amurar un cuadro a la pared porque este es pequeño. y de esta
manera quedaría decorada la pared. A cambio te doy un tornillo para que lo
uses con el destornillador y cuelgues el cuadro.
d = 〈{nail(n), small(n)}, {hammer(h); picture(p);
hang(p) ≺ picture(p), small(p), hammer(h), nail(n), small(n);
decorate wall← hang(p)}, decorate wall〉
o = 〈{screw(s)}, {hang(m) ≺ mirror(m), screw(s), screwdriver(sc);
screwdriver(sc)}, hang(m)〉
Ag2 Acepto
