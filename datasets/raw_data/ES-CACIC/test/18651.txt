Factores influyentes en el consumo energético de los sistemas de Computación de Altas Prestaciones basados en CPUs y GPUs
﻿
Actualmente, la energia es un factor limitante para la computacion de altas prestaciones (HPC). La reduccion del consumo energético se ha Vuelto uno de los mayores desafios en este campo. Nuestra
linea de investigacion se orienta a construir un sistema de gestion de
energia que proporcione diferentes alternativas de ejecucion, determinadas por valores predichos de: consumo energético, potencia maxima, y
rendimiento. Para esto necesitamos predecir energia y rendimiento. Sin
embargo, los modelos existentes de prediccion energia o no son adecua—
dos para nuestros requerimientos 0 son dependientes de la plataforma.
Antes de dise?ar un nuevo modelo energético (para nuestros sistemas),
es necesario estudiar los factores in?uyentes en el consumo energético y
el rendimiento. Asi, en el presente trabajo se propone una metodologia
para evaluar plataformas de HPC basadas en CPUs y GPUs. Los resultados de aplicar nuestra metodologia podrian utilizarse para establecer
recomendaciones que permitan desarrollar aplicaciones energéticamente
e?cientes en la plataforma destino.

1. Introduccién

La computacion de altas prestaciones (HPC, High Performance Computing)
ha tenido, por decadas, el i’1nico objetivo de incrementar la Velocidad de procesamiento de las aplicaciones cienti?cas. Asi, se ha propiciado la aparicion de
supercomputadoras cada Vez mas grandes, que consumen enormes cantidades
de energia electrica. Ademas del da?o ecologico, el costo economico es altisimo.
Actualmente, el gasto energetico producido por las supercomputadoras, durante
su tiempo de Vida, es similar al costo de adquisicion de las mismas. De esta
manera, el consumo energetico se a Vuelto un factor limitante para el HPC 

En 2007 se publico la primera lista del Green500 que clasi?ca a las 500 supercomputadoras de mayor e?ciencia energetica del mundo, dando inicio a la
nueva era de la supercomputacion Verde o ecologica. En la filtima lista publicada por este organismo, en Junio de 2011, de las 10 supercomputadoras mas

 e?cientes energeticamente, 7 estan basadas en aceleradoras y 3 en procesadores
de proposito general (CPU, Central Processing Unit). De las aceleradoras, 3 estan basadas en procesadores Cell (PowerXCell 8i) de IBM y las restantes 4 se
basan en unidades de procesamiento gra?co (GPU, Graphics Processing Units)
de NVIDIA o AMD. El uso de una GPU para computo cienti?co e ingenieril de
proposito general se denomina GPGPU (Ceneral—Purpose Computing on GPU).

La e?ciencia en el consumo energetico no involucra solo al hardware, sino
tambien al software. El software requiere ser disefiado y ejecutado pensando en
el consumo energetico. En este campo se ubica nuestra linea principal de investigacion cuyo objetivo es la propuesta de un sistema de gestion de energia para
una plataforma de HPC. El escalado dinamico de Voltaje (DVFS, Dynamic Voltage and Frequency Scaling) es una tecnica estandar para gestionar el consumo
energetico de un sistema  Se basa en la reduccion del Voltaje para reducir la
energia consumida.

Las tecnologia SpeedStep de Intel, y PowerNow! y Cool’n’Quiet de AMD
son ejemplos de algoritmos DVFS. Sin embargo, ellos estan orientados a aplica—
ciones interactivas. Asi, han surgido estudios destinados a aplicaciones de HPC
como [3,4,5], los cuales intentan reducir el consumo energetico manteniendo el
rendimiento. Teniendo en cuenta que el consumo energetico es un factor limitante para el HPC, creemos que este esquema resulta muy rigido ya que impide
resignar rendimiento para optar por niveles menores de consumo energetico.
Ademas, los sistemas existentes se limitan solo a reducir la energia pero no consideran la potencia maxima, un factor importante que determina la capacidad
de la infraestructura electrica y del equipo de refrigeracion. A mayor potencia,
mayor generacion de calor que implica un mayor consumo energético en refrigeracion, cuyo costo comnnmente alcanza hasta el 40 % del costo de operacion de
la plataforma paralela 

El objetivo de nuestra linea de investigacion es la propuesta de un nuevo
sistema de gestion energetico que proporcione, para una aplicacion y plataforma
de HPC dada, las diferentes alternativas de ejecucion determinadas por Valores predichos de: consumo energetico, potencia maxima, y rendimiento. Asi, es
necesario disponer de modelos de prediccion del consumo energetico, la potencia
maxima y el rendimiento para la plataforma destino.

Los contadores de rendimiento (PMCS, Performance Monitoring Counters)
junto con metodos de regresion son normalmente utilizados para modelar y estimar el consumo energético. Sin embargo, relacionar el consumo energetico, cargas
de trabajo y PMCS no es una tarea trivial y generalmente se logra mediante estudios de la arquitectura, tal son los casos de [7,8,9,10]. Otros, como [11], intentan
ser independientes de la plataforma utilizando modelos estocasticos, pero necesitan retroalimentar su modelo con informacion de consumo energetico en linea,
capturada por un dispositivo externo. Sin embargo, mantener un dispositivo externo que permanentemente este midiendo el consumo energético es Viable para
una pequefia plataforma pero totalmente inviable para una supercomputadora
con un elevado nfimero de nodos de computo.

Con el ?n de obtener informacion que nos permita construir un modelo energetico y de rendimiento de nuestras plataformas de HPC, nos propusimos estudiar los factores in?uyentes en el consumo energetico y el rendimiento de las
mismas. E1 estudio de dichos factores es el objetivo del presente trabajo, enfocado en dos tipos de plataformas, una basada en CPUS y otra en GPU. Nuestro
trabajo se limita al estudio de microprocesadores multicore (CPUS) y mar1y—core
(GPUS) y sus interacciones con la jerarquia de memoria, mientras que las interacciones con los dispositivos de entrada y salida (Como almacenamiento en
disco y dispositivos de red) estan fuera del alcance del mismo. Adicionalmente,
estudiamos el comportamiento energetico y de rendimiento de la plataforma de
CPUS con diferentes cargas de trabajo y frecuencias de reloj. Este ?ltimo estudio
solo se limita a la plataforma de CPUS debido a que actualmente no disponemos
de una GPU que permita modi?car su frecuencia de reloj.

Creemos que la metodologia aqui expuesta facilitara el estudio de los factores
in?uyentes en el consumo energetico y de rendimiento de otras arquitecturas.
E1 conocer dichos factores y el comportamiento de los microprocesadores ante
diversas cargas de trabajo, permitiria construir aplicaciones de bajo consumo
energetico. Ademas, permitiria encontrar explicaciones a, por ejemplo, el impacto

del modelo de programacion paralela en el consumo energetico de los sistemas
de HPC [12].

2. Trabajos relacionados

Muchos trabajos estudian evaluaciones energeticas de sistemas, ya sea en
GPUS [13], CPUS y Cells [14]. No obstante, no buscan explicacion al menor o
mayor consumo energetico de sus experimentos.

E11 [10] se presenta un modelo energetico y de rendimiento de una GPU
basado en  E11 [7] se presenta un modelo de energia y rendimiento para microprocesadores, que asume a los diferentes componentes arquitecturales Como
determinantes del consumo energetico. E1 modelo depende de parametros que
deben ser determinados empiricamente y para lo cual no se describe ninguna
metodologia. Nuestro trabajo es complementario al recientemente citado dado
que Veri?ca la Validez de asumir que los componentes arquitecturales son determinantes en el consumo.

Para lo mejor de nuestro conocimiento, nadie ha presentado una metodologia
para estudiar los factores in?uyentes en la energia y el rendimiento, ni estudian
el comportamiento del sistema ante los posibles y diversos tipos de carga de
trabajo y frecuencias de reloj.

3. Descripcion de las plataformas bajo estudio

3.1. Plataforma basada en GPU

E1 modelo de computacion de GPU es utilizar una CPU y GPUS juntas en un
modelo de computo de coprocesamiento heterogeneo. La parte secuencial de la
aplicacion se ejecuta en la CPU y la parte de computo intensivo se ejecuta en la L3 am canssxay L] 1f1(4?95|(EJ

L2 um (25sK?) L2 a:1(z5aKEJ L2 #2 (25sKa) L2 :33 EZSEKEJ

L1 an (32:37 L1 #1(3lKE) L1 :2 (szxa) L1 4:3 (32:13;

 

Memufv
Conlmller

Pruczssor Q P,‘ Pmzessot

Ia \ mun;
K Jmu?w

urn

Me mcry Etnnggmj Memory

 

Figura 1. Arquitectura de una GPU Figura 2. Plataforma de CPUS

GPU. En la ?gura 1 se muestra la arquitectura de una GPU, la cual tiene N multiprocesadores con M n1’1cleos cada uno. Los n1’1cleos dentro del multiprocesador
comparten una 1’1nica unidad de instruccion. Hay una memoria global (SDRAM)
ubicada fuera del chip, dos memorias caché (constant y texture) de solo lectura
(conectadas a la memoria global), y cada multiprocesador tiene una memoria
compartida (entre sus n1’1cleos). Cada procesador tiene sus propios registros de
32 bits. Las GPU se conectan con el host a través de conexiones PCIEXpress.

Nuestra plataforma basada en GPU tiene un procesador dualcore Intel Pentium 4 E7400 con 2GB de rnernoria principal, y una GPU NVIDIA GeForce
9500GT de 32 n1’1cleos y 1 GB de memoria. Los 32 nflcleos estan divididos en 4
multiprocesadores.

3.2. Plataforma basada en CPUS

La plataforrna paralela basada en CPUs que utilizarnos para los experirnentos
es un servidor Intel de dos sockets modelo SC5650BCDP, con procesadores de
dos n1’1cleos Intel Xeon E5502 y 16 GB de memoria principal (8 GB por socket).
La ?gura 2 rnuestra la arquitectura y jerarquia de memoria de la plataforrna.
Tiene acceso a memoria no uniforrne (NUMA, Non— Uniform Memory Access),
cada procesador tiene un controlador de niernoria integrado, y el sisterna de
interconexion entre los procesadores es Intel QnickPath Interconnect (QPI), una
conexion punto a punto de alta Velocidad. Las frecuencias de reloj disponibles
son: 1,6, 1,73 y 1,86 GHZ.

4. 1\/Ietodologia de evaluacién de los factores
energéticamente in?uyentes

Para encontrar los factores in?uyentes en el consurno energético y de ren
dimiento, es necesario determinar cuales y qué caracteristicas tienen los componentes de la arquitectura bajo estudio (en nuestro caso, las expuestas en la

 seccion  Una vez identi?cados los coniponentes, se construyen pequefias apli—
caciones sinteticas (microbenchmar/cs) cuyas operaciones evali’1en alguna Caracteristica especial y puntual de cada coniponente.

Una vez construidas estas aplicaciones, se ejecutan en la platafornia destino
mientras se efectfian las niediciones. Las variables de interes para los experinientos son: el rendiniiento, la potencia niaxinia y la energia. Las mediciones
energeticas se realizaron para el nodo conipleto. Para esto, utilizanios el registrador oscilogra?co Yokogavva OR1400 y la sonda de corriente Fluke 80i—110s. El
voltaje fue niedido directaniente por uno de los canales de entrada del registrador, niientras que la corriente del conductor fase fue niedida con la pinza Fluke
conectada a otro de los canales de entrada del niisnio. La tasa de niuestreo fue
deterniinada en 10 Hz. Para facilitar las coniparaciones entre experinientos, a
veces las mediciones se presentan en valores relativos o porcentajes.

A continuacion extendenios la nietodologia expuesta a las dos platafornias
evaluadas.

4.1. Metodologia de evaluacién para GPU

Para construir los diferentes niicrobenchniarks se utilizaron las APIs (Application Programming Interface) de JOCL (Java OpenCL) y JCUDA (Java CUDA) corriendo sobre la maquina virtual Java SE 6. De acuerdo a la arquitectura
hardware de la GPU, consideranios desarrollar una serie de niicrobenchniarks
que pueden ser clasi?cados o agrupados en:

Bus de transferencia Para ejecutar cualquier progrania en la GPU se necesita
transferir datos de la nienioria principal a la nienioria de la GPU, y luego a la
inversa para retornar los resultados. Asi, consideramos iniportante estudiar el
consunio energetico de dichas transferencias. Desarrollanios un n1icrobench—
mark en J CUDA (por facilidad de iniplenientacion) que trans?ere un arreglo
de 10.000 elementos de 32 bits cada uno (40000 bytes). El niicrobenchniark
ejecuta 26.000 veces esta transferencia para que la ejecucion dure un tienipo
considerable que perniita capturar el consunio energetico.

Operacién y tipo de dato Las diferentes operaciones sobre algfin tipo de dato tienen distinta coniplejidad de iniplenientacion en hardware. Por lo tanto, se decidio construir niicrobenchniarks en JOCL para las operaciones
de sunia, resta, division y niultiplicacion, para los tipos de datos entero
y ?otantes, cuyos operandos se obtienen de dos arreglos de 10 elenientos y
el resultado es alniacenado en un tercer arreglo. Las operaciones se aplican
10.000.000 de veces para niedir la energia.

N?mero de n?cleos El niodelo de ejecucion OpenCL de las GPU distribuye
un kernel (0 progrania) a cierto nnniero de nficleos del dispositivo, y cada uno
realiza un calculo individual. Se decidio construir cuatro niicrobenchniarks,
dos de 8 y 32 nficleos liniitados en coniputo, y otros dos de 8 y 32 nncleos
liniitados por niernoria.

Dispersion de datos El modelo de memoria de OpenCL de?ne una n1en1o—
ria global que reside en la nienioria del dispositivo, la cual es accedida por transacciones de memoria de 32, 64 o 128 bytes. Es decir, cuando un thread
(ejecutando en un nncleo) solicita un dato, la transaccion retorna mnltiples
datos que otros threads podrian necesitar. Este servicio de m11ltiples peticiones en una sola transaccion se llama coalescing. Esta propiedad es indicio
de que la dispersion de datos es un factor in?uyente en la energia. Por lo
tanto, dise?amos un benchmark con acceso a datos secuencial (acceso coalescing) y uno con accesos dispersos 0 con pérdida de proximidad espacial
(acceso no coalescing). El benchmark coalescing suma dos arreglos de 100
elementos, mientras que el no coalescing recibe dos arreglos de 100.000 elementos y suma ?nicamente los elementos de posiciones m?ltiplos de 1.000
(ambos suman en total 100 elementos). Los elementos son ?otantes y el resultado se retorna en otro arreglo. Las operaciones se aplican 100.000 Veces
para medir la energia.

4.2. Metodologia de evaluacién para la plataforma de CPUS

Los microbenchmarks se desarrollaron en lenguaje C. Salvo casos particulares, cada microbenchmark lanza 4 threads, cada uno ejecutando un bucle con
50 Gigaoperaciones. Utilizamos threads con plani?cacion FIFO_SCHED para
evitar que los threads sean desalojados de las CPUs y, ademas, que los datos
en memoria sean reemplazados. De acuerdo a las caracteristicas hardware de la
plataforma de CPUs, consideramos desarrollar una serie de microbenchmarks
que pueden ser clasi?cados o agrupados en:

Operacién y tipo de dato Las diferentes operaciones sobre algnn tipo de dato tienen distinta complejidad de implementacion en hardware. Se construyeron microbenchmarks para las operaciones de suma, division y multiplicacion, para los tipos de datos entero y ?otantes. Los operandos se obtienen
de un Valor inmediato y un registro.

J erarquia de memoria El acceso a las distintas memorias (con distinta tecnologia y ubicacion en la jerarquia) de un microprocesador y el modo de
acceso (lectura/escritura) son factores candidatos a in?uir en el consumo
energetico. Disenamos dos tipos de benchmarks. Uno donde los accesos mayoritariamente aciertan en la L1 (mediante accesos secuenciales a un arreglo),
y otro cuyos accesos fallan en la L1, L2 y L3, y se terminan resolviendo en la
memoria principal. Este nltimo tipo de benchmark se logra mediante accesos
a datos espacialmente alejados, a una distancia determinada por el tama?o
de la L3. Por cada tipo de benchmark se de?nieron dos benchmarks, uno con
accesos del tipo lectura y el otro de escritura.

Acceso NUMA En esta arquitectura se tiene un nnico espacio de direcciones,
pero los accesos pueden ser locales o foraneos. El acceso foraneo implica
utilizar el enlace de interconexion QPI. Por lo tanto, decidimos construir
dos benchmarks que escriben datos en memoria, uno accediendo de manera
local y el otro foranea.

E?ciencia en el uso de recursos Muchas Veces los sistemas no son plani?—
cados correctamente y la e?ciencia en el uso de recursos disminuye. Asi, decidimos estudiar la in?uencia en el consumo energetico de un benchmark
con alta e?ciencia y otro con baja e?ciencia. El de alta e?ciencia ejecuta
escrituras en memoria utilizando los 4 n1’1cleos de la plataforma, mientras
que el de baja e?ciencia lo hace con 1 n1’1cleo.

Frecuencia de relo j La frecuencia de reloj de las CPUs es disminuida cuando
se disminuye el Voltaje, lo que indudablemente modi?ca el consumo energetico. De esta manera, estudiamos la in?uencia de la frecuencia de reloj en
todos los benchmarks dise?ados.

5. Resultados experimentales

5.1. Resultados de evaluacién de la plataforma con GPU

La ?gura 6 muestra la in?uencia del factor “operacion y tipo de dato” en el
consumo energetico, la potencia maxima y el tiempo de ejecucion. Se aprecia
que las operaciones sobre enteros consumen menos energia que las operaciones
sobre ?otantes. El orden de menor a mayor consumo energetico es: resta, suma,
multiplicacion y division. La potencia maxima presenta Variaciones inferiores a
4 W.

En la ?gura 4 se observa la in?uencia del “n1’1mero de n1’1c1eos” en el consumo
energetico, la potencia maxima, y el tiempo de ejecucion. Para los benchmarks
limitados por computo, ejecutar en mas n1’1cleos consume menos energia, tarda
menos tiempo y la potencia maxima es mayor. Para los benchmarks limitados
por memoria, el consumo energetico, la potencia maxima y el tiempo de ejecucion
son iguales para el caso de 8 y 32 n1’1c1eos. Es decir, si el programa esta limitado
por memoria, el aumento del n1’1mero de n1’1cleos no produciria cambios en el
comportamiento de los 3 factores estudiados.

La in?uencia de la “dispersion de datos” se presenta en la ?gura 5. Se observa
que el acceso a elementos alejados presenta un mayor consumo energetico y
tiempo de ejecucion que el acceso a elementos cercanos, mientras que se comporta
de forma opuesta en relacion a la potencia demandada.

La prueba del “bus de transferencia” tuvo un consumo energetico de 0,67 Wh,
una potencia maxima de 176 W, y un tiempo de ejecucion de 13,94 seg. Ademas,
comprobamos que conviene, en los tres aspectos, realizar pocas transferencias de
muchos datos en Vez de muchas transferencias de pocos datos.

7,0

6 5 g I Tiempo de
’ T; ejecucion
E) (399)
5,0 g I Potencia
|-U maxima (W)
55 I Energia (W)

AddF|oat DivF|oat Mu|F|oatMinusF|oat Addlnt Divlnt Mullnt Minuslnt

W
M
o
O

_\
01
O

_\
(D
O

01
O

T. ej. (Seg)/Potencia( )
O

Figura 3. Evaluacion de operacion y tipo de dato en GPU

 1000 1000

100 _ 100
I Tlempo de
10 ejecucién (Seg) 10
I Potencia 1
méxima (W) 0 1
0,1 I Energia (W) ’

_\

32cores/cémputo 32cores/memoria Ovol
8cores/cémputo 8cores/memoria Aleiados Cercanos
Figura4. Evaluacion del n1’1mero de n1’1cleos en Figura 5. Evaluacion de la
GPU dispersion de datos en GPU
1800 200 I Tjempo de
1600 180 ?éecu)cIén

f\ A 99

5,’; 1400 150 E IEnergia(Wh]
751200 140 -§ IPote_ncIa

:9 120 E maxlma (W)

g 1000 °

E 100 E

“’ 800 E

% 80 5

% 600 60 ‘E

i; 400 40 E

200 20
O 0
addlnt addF|nat divlnt multlnt mu|tF|r)at |nadCanhe |nadMem stnreCanhe stnreMem

Figura 6. Evaluacion de operacion y tipo de dato, y jerarquia de memoria en CPUS

5.2. Resultados de evaluacién de la plataforma con CPUS

El resultado de evaluar los microbenchmarks de “operacion y tipo de dato”,
y “jerarquia de memoria” a la maxima frecuencia de CPUS son mostrados en
la ?gura 6. Tanto el consumo energetico, la potencia maxima y el tiempo de
ejecucion Varian para todos los casos, con lo cual con?rmamos la in?uencia de
los factores analizados. En la ?gura 7 se observa el impacto de ejecutar los
microbenchmarks con la menor frecuencia de reloj. Se aprecia una reduccion
energetica clara para la escritura de datos en memoria (storeMem) y en menor
medida para la escritura en la cache L1.

En cuanto a la “e?ciencia en el uso de recursos” en la ?gura 8 se observa que
el benchmark mas e?ciente disminuye su consumo energetico y el tiempo de ejecucion pero aumenta la potencia maxima. Al disminuir la frecuencia del reloj, el
benchmark menos e?ciente tarda bastante mas tiempo en ejecutar, consume mas
energia y disminuye levemente la potencia maxima. En cambio, el mas e?ciente
tarda solo un poco mas, y disminuye drasticamente el consumo de energia y la
potencia maxima.

El resultado de la evaluacion del factor “acceso NUMA” se muestra en la
?gura 9, donde se observan las conveniencias en cuanto a consumo energético y de
rendimiento de realizar accesos locales. No obstante, hay un peque?o aumento en
la potencia maxima. A mayor frecuencia de reloj, mayor es la Ventaja en ahorro
energético y rendimiento pero mayor es el aumento de la potencia maxima.

En general los aumentos de la potencia se producen cuanto mas rapido las
operaciones acceden sus operandos. Esto demuestra que el procesador es mas 20,00%
1500% I Disminucién
tiempo de
1000% ejecucién
I Disminucién
5,00% l consumo
energético
000% I Disminucién
potencia

_5Y00o/0 maxima
addlnt addF|nat divlnt multlnt mu|tF|nat |nadCache |nadMem Stnrefiache SmreMem

Figura 7. Impacto de la frecuencia de reloj en distintos tipos de operaciones en CPUS

3 4000 250 :g: 20,00% _ _ _’
g E I Dlsmlnuclon
:5’ 3000 200 E I Tiempo de 15'O0% t'e.’mp°.(,je
.2 150 2; ejecucion e’e°”°'°”
$ 2000 0. (869) 1000% I Disminucién
—o 100 \ , . consumo
" I E Wh , .
8 100° 50 E I P:teer:]:a( J 590% er.'er9et'°9
S ‘(g . . W I Dlsmlnuclon
i: 0 0 T; maxma ( ) 0 00% potencia
Fast Slow Fast Slow EC: slow fast maxlma

storeMem1 storeMem4 -5.00%

Figura 8. Escritura en memoria con 1 Figura 9. Ventajas por a memoria 10o 4 cores en CPUS cal en CPUS

demandante de energia que las memorias. Se recomienda evitar accesos no locales
(tra?co NUMA) y solo disminuir la frecuencia de reloj en operaciones de escritura
(cache o memoria).

6. Conclusiones y trabajo futuro

En este trabajo se presenta una metodologia para la evaluacion de factores in?uyentes en el consumo energético de sistemas de computacion de altas
prestaciones. Para encontrar los factores in?uyentes en el consumo energético y
de rendimiento, la metodologia plantea el analisis de las caracteristicas de los
componentes de la arquitectura. Una Vez identi?cados los componentes y sus
propiedades, se construyen peque?as aplicaciones sintéticas (microbenchmarks)
cuyas operaciones eVal1’1an alguna caracteristica especial y puntual de cada componente. Extendimos la metodologia a dos casos practicos, un sistemas basado
en CPUs y otro basado en GPUs. Los resultados aqui presentados seran utilizados como conocimiento para la construccion de un modelo energético y de
rendimiento de ambos sistemas de computo. Previo a esto, deberemos completar
el conjunto de experimentaciones a las aqui presentadas; por ejemplo: estudiar
los accesos a L2 y L3 en la plataforma de CPUs, y en GPU, evaluar diferentes
agrupaciones de threads y el acceso a memoria compartida y caches.

