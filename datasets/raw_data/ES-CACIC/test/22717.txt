Modelo de inclusión de la funcionalidad UNDO REDO
﻿ Se propone la utilización de  un servicio de software (SaaS) junto a 
una metodología para realizar en forma ordenada la inclusión de la 
funcionalidad de Undo/Redo dentro de una aplicación nueva o existente.  
 
Palabras Clave: Funcionalidad UNDO/REDO, inclusión de servicios 
metodología 
1. Introducción 
Los principios de usabilidad son un conjunto de buenas prácticas de software, las 
cuales hacen que una aplicación tenga una interacción acorde a las características y 
expectativas del usuario [1], dentro de estos principios se encuentra la funcionalidad 
de Undo/Redo, la cual permite que un usuario pueda deshacer o rehacer una acción, 
de aquí en mas se nombrará indistintamente al patrón como Undo/Redo o solo Undo. 
La inclusión de esta funcionalidad en un sistema nuevo o existente no es un proceso 
trivial, una de las razones es que su inclusión generalmente se realiza en una etapa 
avanzada del desarrollo de sistemas [1], cuando las decisiones claves de diseñado ya 
han sido tomadas.  
Estos principios de usabilidad han tomado la forma de patrones de usabilidad, los 
cuales han sido concebidos con el objetivo,  que el desarrollo de software sea simple y 
predecible [2], estos patrones se pueden definir como mecanismos utilizados durante 
el diseño del sistema para proporcionar al software un conjunto de característica 
específica de usabilidad [1]. Algunos patrones de usabilidad definidos en la literatura 
son: Feedback, Undo/Redo, Cancel, Form/Field Validation, Wizard, User Profile y 
Help [3]. El principal escollo para la aplicación de estos patrones es la no existencia 
de un entorno de trabajo, de aquí en mas Framework, que contemple todo el proceso 
de inclusión del artefacto software “Funcionalidad de Usabilidad” en una aplicación 
nueva o existente, de aquí en más aplicación anfitriona, haciendo hincapié en aspectos 
arquitectónicos, de diseño y de performance asociados con los patrones de usabilidad. 
Esto significa que los patrones tienen que ser aplicado ad hoc en cada sistema; esto 
implica que el costo del desarrollo del sistema se incrementará como resultado de la 
mayor carga de trabajo causada por cada diseño e implementación de las 
funcionalidades de usabilidad, además, ciertas características de usabilidad quedarán 
fuera del desarrollo para reducir ese esfuerzos.  
El objetivo de este trabajo es desarrollar un Framework para los principales patrones 
de usabilidad. Se ha seleccionado para comenzar el patrón Undo/Redo,  este es un 
patrón de uso común en la literatura [4]; esto justifica la selección del mismo para el 
Framework. Hay otros motivos de carácter técnico que sostienen la decisión de 
empezar con el patrón Undo; es que este patrón, comparte gran parte de su 
infraestructura con otro patrón que es Cancel y también esto se aplica pero en menor 
grado a patrones como Feedback y Wizard. 
Varios autores han definido alternativas al patrón Undo, estas se centran en dominios 
particulares, en especial en el área de los editores de texto [5] [6], aunque los 
conceptos subyacentes pueden ser exportables a otros dominios; estas propuestas se 
definen a nivel alto, sin una implementación real que demuestre su capacidad de ser 
reutilizable en diferentes tipos de sistemas, en consecuencia, estas propuestas no 
resuelven el problema en un sentido amplio. 
En este artículo se presenta un nuevo enfoque para la funcionalidad Undo/Redo, esta 
propuesta resuelve un subconjunto de casos (modelo de operaciones sin estado) en 
forma eficiente, demostrando la importancia de disponer de una solución 
automatizada para la inclusión de la funcionalidad en sistemas nuevos o existentes. 
Se ha implementado un Framework el cual consta de un servicio (SaaS) de 
Undo/Redo y la metodología para su inclusión en forma ordenada y progresiva en una 
aplicación anfitriona; para este desarrollo se han tomado como idea base Frameworks 
como ser Spring [7] e Hibernante [8], por último se ha hecho mucho hincapié en el 
hecho que la aplicación anfitriona deba recibir un conjunto reducido y sencillo de 
modificaciones para poder incluir la funcionalidad de Undo/Redo. 
Este artículo se estructura como sigue. La sección 2 describe el estado de la cuestión;  
la sección 3 presenta el problema a resolver; la sección 4 presenta la solución 
propuesta y por último, la sección 5 discute brevemente y se presentan las principales 
aportaciones de nuestro trabajo. 
2. Estado de la Cuestión 
La funcionalidad de Undo/Redo es una característica muy utilizada y central en toda 
una gama de aplicaciones como ser, los procesadores de texto, hojas de cálculo, 
editores gráficos, etc.  A modo de ejemplo se puede hacer referencia a Bates y Ryan 
[6] y Baker y Storisteanu [9] que han patentado métodos para la implantación de la 
funcionalidad de Undo/Redo en los editores de documentos en entornos monousuario. 
Existen soluciones específicas para los editores de texto de uso compartido que 
soportan funcionalidad de Undo/Redo, como en Sun [10] y Chen y Sun [11] y Yang 
[12]. La razón de la cantidad de soluciones presentadas para editores de texto es su 
relativa simplicidad. Conceptualmente, un editor es un contenedor de objetos con 
ciertas propiedades (forma, posición, etc.), por lo tanto, el Undo es relativamente fácil 
de implementar, trata de almacenar el estado del contenedor en unidades de tiempo i, i 
+1, ..., i + n; luego, cuando el comando Undo es invocado, el contenedor se ejecuta a 
la inversa i + n, i + n-1, i. Una derivación de las soluciones propuestas para los 
editores de texto es una implementación alternativa de Undo/Redo para sistemas de 
correo electrónico como Brown y David [13], estas soluciones se implementan dentro 
del editor de texto que posee sistemas de correo electrónico.  
Los problemas de Undo en entornos multiusuario también han atraído una atención 
significativa, Abrams y Oppenheim [14] han propuesto mecanismos para el uso de 
Undo en entornos distribuidos, Abowd y Dix [4] proponen un marco formal de 
referencia para poder definir la funcionalidad de Undo. En los entornos distribuidos, 
la solución tiene que manejar la complejidad de los cambios de los datos compartidos 
esto se realiza por medio de un archivo de historial de cambios [15]. 
Varios trabajos han proporcionado información sobre los aspectos internos de Undo, 
como ser Mancini y Dix [16] que describe las características del proceso de Undo, del 
mismo modo, Berlage [17] propuso la construcción de un método de Undo en base a 
comandos en entornos gráficos, Burke [18] ha trabajado sobre el concepto de una 
infraestructura de Undo y Korenshtein [19] da las pautas para realizar un modelo de 
Undo selectivo. 
Otro aspecto en el cual se ha estado trabajado es la elaborado es un modelo de 
representación de las acciones realizadas por los usuarios en Washizaki y Fukazawa 
[20], esta es una estructura dinámica de los comandos ejecutados en forma histórica. 
La funcionalidad de Undo mediante la representación de modelos de grafos ha sido 
ampliamente desarrollada por Berlage [17], aquí se presenta una distinción entre el 
Undo lineal por medio de un archivo histórico y un no lineal, el cual es representado 
por un grafo, donde se pueden abrir diferentes ramas de acuerdo a las acciones del 
usuario. Edwards [21] también presenta una estructura de grafo donde a diferencia del 
trabajo anterior las ramas del árbol representan un nuevo conjunto de acciones 
realizadas por el usuario. Dix [22] trabajo sobre un grafo en forma de cubo para 
representar la historia de las acciones realizadas por el usuario.  Por su parte Edwards 
[23] modela las acciones de Undo en forma de hilos paralelo de ejecución. 
Milestoning y Rollback [24] han utilizado un registro donde se almacena 
temporalmente las acciones, este modelo ha sido ampliamente utilizado por su 
sencillez. Todos estas alternativas de representación de las acciones de Undo en forma 
de comandos son válidos, pero no es una tarea sencilla de implementar, ya que crear 
una nueva rama de acción y la unión de dos ramas existentes no es una acción trivial, 
pues se deben conocer todas los posibles caminos que puede tomar un usuario; en 
consecuencia puede ser recomendable generar una estructura lineal ordenada por 
tiempo, esta estructura puede ser una cola, que es fácil de implementar y administrar. 
Históricamente, se han utilizado para representar el Undo/Redo el patrón “Command” 
[25], Fayard, Shumidt [26] y Meshorer [27] esto sirve para mantener una lista de 
comandos ejecutados por el usuario, pero no es suficiente para crear un Framework 
que sea sencillo de incluir en sistemas existentes. La funcionalidad de Undo/Redo 
también se ha asociado a los mecanismos de excepción para revertir una acción que 
falla como en Shinnar  et.al. [28], este modelo sólo se invoca ante una falla. 
También se ha trabajado en patentes, como el método para la construcción de un 
proceso de Undo/Redo en un sistema,  como en Keane y Mitchell [29] curiosamente, 
en este trabajo se presenta lo contrario de un proceso de Undo, es decir, ejecutar 
nuevamente la acción de deshacer el deshacer. Nakajima y Wash [30] definen un 
mecanismo para la gestión de múltiples niveles de Undo/Redo, Li [31] describe un 
algoritmo de Undo/Redo, y Martínez y Rhan [32] presentan un método de 
administración gráfica de Undo/Redo, basado principalmente en un modelo de 
interfaz gráfica. 
El mayor problema con lo antes referido es una vez más, son difíciles de adoptar en 
los procesos de desarrollo de software fuera del dominio de editor de textos. La única 
excepción notable a esto es un patrón a nivel de diseño llamado Memento [33]. Este 
modelo recupera un objeto a un estado anterior y proporciona un mecanismo 
independiente de la implementación que se pueden integrar fácilmente en un sistema; 
el inconveniente es que este patrón no es fácil de incluir en un sistema existente. 
Además, Memento sólo restaura un objeto a un estado anterior, no se considera 
ninguna de las otras opciones que un patrón de Undo debe incluir. 
Las soluciones presentadas están optimizadas para casos particulares y son difíciles de 
aplicar a otros dominios, por el otro lado, es necesario incluir una gran cantidad de 
código asociado a la funcionalidad de Undo en la aplicación anfitriona. 
3. Problema 
Para un sistema software la inclusión de la funcionalidad Undo/Redo puede ser una 
funcionalidad primordial o ser una funcionalidad deseable. 
En los de primer tipo, funcionalidad primordial, un diseñador contempla la 
construcción de esta en el cuerpo principal de la aplicación;  estas son aplicaciones 
que no pueden ser concebidas sin la existencia de la funcionalidad de Undo/Redo, en 
esta categoría se incluyen los procesadores de texto, un usuario de este tipo de 
sistemas espera la existencia de la misma. Aquí se incluye planillas de cálculo, 
gestores de correos electrónicos, sistemas de mensajería instantánea, entre otras. 
Por otro lado las aplicaciones que se enrolan en la segunda categoría, funcionalidad 
deseable, el diseñador enfrenta el problema que debe incluirla para que la aplicación 
sea desde el punto de vista de la usabilidad completa, pero esto insume tiempo y 
esfuerzo para una funcionalidad que no es el núcleo de la aplicación, en esta categoría 
se enrolan aplicaciones como gestores de administración de base de datos, sistemas de 
carga de datos con interfaz de usuario, entre otros. Como se puede observar en esta 
última categoría los usuarios del sistema al manejar un ingreso de datos están 
propensos a generar errores en la carga que deben ser corregidos, los usuarios 
desearían poder corregir esto rápidamente, con lo cual se podría inferir que la 
funcionalidad es deseable e importante. 
Enfocados en esta segunda categoría el presente trabajo intentara dar respuesta a los 
siguientes disparadores;  (a) es posible desarrollar una infraestructura tal que, la 
inclusión de la funcionalidad de Undo/Redo sea simple y rápida en una aplicación 
nueva o existente; (b) es posible definir una metodología para la detección de las 
características de Undo/Redo que una aplicación necesita. 
4. Solución Propuesta 
En la siguiente sección se detallan distintas aproximaciones para satisfacer la 
funcionalidad e Undo/Redo, en esta se realiza una comparación entre ellas y se fija 
posición ante cada una, las misma son:  
Ad Hoc: Es la inclusión de la funcionalidad de Undo dentro de una aplicación 
particular escribiendo todo el código, no se reutiliza código anterior ni de las 
lecciones aprendidas en otras aplicaciones y se dimensiona según las necesidades de 
cada sistema  
Patrones: Se incluye la funcionalidad de Undo dentro de una aplicación siguiendo los 
lineamientos de una solución probada, todo el código se incluye en la aplicación 
anfitriona. La desventaja de la realización de esta alternativa de diseño es la inclusión 
de toda la complejidad de la funcionalidad Undo/Redo implica un considerable 
incremento en la cantidad de líneas de código de la aplicación en cuestión, con la 
consecuente propensión a agregar errores en el mismo. Esta alternativa es viable en 
los casos en que la funcionalidad de Undo/Redo sea un elemento central de la 
aplicación. 
Software as a Service (SaaS): La aplicación anfitriona incluye invoca determinada 
funcionalidad a través de un servicio externo, en este caso el Undo, toda la 
complejidad del mismo se encuentra encapsulada dentro de este y en la aplicación. 
Esta solución tiene la ventaja de reducir la cantidad de código necesario dentro de la 
aplicación anfitriona, además permite mantener la complejidad requerida para cada 
aplicación, pues el servicio tiene el conjunto máximo de características de la 
funcionalidad de Undo/Redo. La desventaja de esta solución en forma aislada que el 
método de inclusión desde la aplicación anfitriona queda de lado del programador de 
la aplicación anfitriona y a su experiencia con la funcionalidad Undo/Redo. 
Framework: Como definición de Framework se dará la utilización de un conjunto de 
rutinas encapsuladas dentro de una API (Application  Program Interface), la cual tiene 
un cierto orden de invocación. En este caso pueden ser combinados dentro de esta 
estrategia la utilización de patrones y SaaS.  
Metodología: Esta estrategia abarca además de la utilización de un microframework, 
que se ha detallado anteriormente, la utilización de un conjunto de pasos para detectar 
las características de Undo necesarias para la aplicación anfitriona y un conjunto de 
tareas post implementación para el mejoramiento perfectivo de la misma. Esta última 
alternativa es donde se enrolaría la solución propuesta en este trabajo. Se ha 
seleccionado un conjunto de características deseables para una implementación de 
una solución en un sistema y se las ha comparado (Tabla 1). 
Tabla 1. Comparación. (Escala= NC no cumple la condición, CP cumple parcialmente, CT 
cumple totalmente la condición) 
Alternativa Repetible Escalable Auditable Perfectible Transferible Integrable 
 Ad Hoc NC NC CP CP NC NC 
Patrones CT CP CT CT CT CP 
SaaS CT CT NC NC CT CP 
Framework CT CT CP CP CT CT 
Metodología CT CT CT CT CT CT 
Como se puede observar la implementación de una metodología es la alternativa mas 
sólida para el Undo. La construcción de la funcionalidad de Undo/Redo bajo la 
modalidad de servicio genera que toda la complejidad de la funcionalidad Undo/Redo 
se ocultada por el servicio, las ventajas de esta aproximación son permite construir 
sobre un servicio la complejidad que se desee para trabajar con la funcionalidad en 
cuestión, pues la misma puede ser reutilizada a través de distintas aplicaciones, con lo 
cual el esfuerzo de su construcción queda justificado. 
El servicio cuenta con un conjunto de pantallas para su configuración y 
administración, donde se volcaran datos como aplicación a ser soportada de ser 
necesario usuarios autorizados para su administración y/o uso, carga de los requisitos 
de usabilidad para la aplicación y análisis histórico de uso. El servicio como tal 
provee una interfaz para solicitar el almacenamiento temporal de datos o consulta de 
los mismos. 
Las fases del proceso propuesto con descripción de tareas, entradas y salidas se 
presentan en la Tabla 2, el flujo del mismo en la Figura 1 y en la Tabla 3 de presentan 
los detalles de cada fase potenciales problemas y soluciones. 
El poseer un método para la definición de los datos a ser incluidos en una posible 
invocación del servicio de Undo/Redo es  importante para poder concretar en forma 
satisfactoria la inclusión del servicio en la aplicación anfitriona.  
Como introducción a los conceptos detallados debajo se define el concepto de Unidad 
Lógica de Cambio (ULC), este  hace referencia a un conjunto de datos que deben ser 
tratados como una unidad indivisible a efectos de la coherencia de la información de 
sistema. 
5. Conclusiones 
En este trabajo se ha propuesto el diseño de una Framework para la funcionalidad de 
Undo/Redo para ser agregado en una aplicación de software, la cual se alinea con las 
características de funcionalidad necesaria, pero no para aplicación que sea central la 
funcionalidad de Undo/Redo, como ser un procesadores de texto. La característica 
más sobresaliente de este Framework es el tipo de información que almacena para 
poder deshacer o rehacer las operaciones de los usuarios, datos de entrada en lugar de 
estados de objeto en la memoria o los comandos ejecutados por el sistema. 
Un servicio de Undo/Redo tiene algunas ventajas significativas con respecto a otros 
modelos presentados, en primer lugar, la sencillez de su inclusión en un software ya 
existente, el esfuerzo en comparación con los otros modelos es significativamente 
menor (ver Tabla 1). En segundo lugar, la independencia que provee el servicio en 
relación a la aplicación anfitriona permite crear modelos mas sofisticados de Undo 
para cada dominio pues toda esa complejidad se encapsula en el servicio mismo.  
Las futuras líneas de investigación que se están contemplando son: (a) la creación de 
un pre-compilador, (b) la detección automática de los campos susceptibles a un 
proceso de Undo, (c) ampliar el marco a otras plataformas. 
Tabla 2. Fases del proceso propuesto. 
 
PASOS ENTRADA TAREA SALIDA 
 DENOMINACION REPRESENTACION  DENOMINACION REPRESENTACION 
Requerimientos de 
Sistema  
(E1-AU-RS) 
Documento 
Requisitos de 
Usabilidad  
(E1-AU-RU) 
Documento 1. Análisis de 
Usabilidad  
(E1-AU) A partir de los casos de uso del sistema se intenta 
detectar los requisitos 
Detección de 
Requerimientos 
de Usabilidad  
(E1-AU-AU) Se obtienen los requisitos de usabilidad definidos 
para el sistema 
Requisitos de Usabilidad  
(E1-AU-RU) Documento 
Definición de ULC  
(E2-ULC-DI) Documento 
2. Detección de 
Unidades 
Lógicas de 
Cambio  
(E2-ULC) 
Estos requisitos son la base para detectar las ULC 
Detección de 
ULC  
(E2-ULC-DE) Conjunto de información que se tratara como una 
unidad 
Diseño de ULC + RS  
(E2-ULC-DI)   
(E1-AU-RU)   
Documento Definición de PNR  (E3-PNR-DF) Documento 
3. Detección de 
Puntos de No 
Retorno  
(PNR) (E3-PNR) El conjunto de los Requisitos y las ULC permiten 
detectar los PNR 
Detección de 
PNR  
(E3-PNR-DE) Hitos en la utilización del sistema que no permiten 
volver a tras al mismo 
Sistema Anfitrión Software Reporte de Usabilidad  (E4-PUO-AU) Documento 
4. Prueba de 
Usabilidad 
Original (E4PUO) 
Se le aplica al sistema original una prueba para 
validar su estado 
Prueba de 
usabilidad de 
sistemas  
(E4-PUO-U) 
Se obtiene un reporte con el análisis de 
usabilidad del mismo 
Sistema Anfitrión Software 
Reporte de Prueba de 
Stress  (E5-PS-APS) Documento 5. Prueba de Stress 
(E5-PS) Se le aplica al sistema original una prueba para 
validar su estado 
Ejecución de la 
Prueba de Stress 
(E5-PS-EPS) Se obtiene un reporte con el análisis de stress del 
mismo 
Diseño de ULC + 
Definición de PNR + 
Permisos de Acceso (E2ULC-DI)   
(E3-PNR-DF) 
Software + 
Documento 
Servicio Configurado 
(E6-CS-SC)   Software 6. Configuración de Servicio  
(E6-CS) 
Ser recolecta la información necesaria para la 
configuración del sistema 
Configuración de 
Servicio  
(E6-CS-CS) 
Se obtiene el servicio configurado para el sistema 
anfitrión 
Definición de ULC  
(E1-AU-RU)   Documento 
Método de Inclusión 
(E7-MIS-MI)   Documento 
7. Método de 
Inclusión del 
Servicio  
(E7-MIS) A partir de las ULC detectadas se analiza el mejor 
método para incluir el servicio en el sistema anfitrión 
Evaluación de 
Métodos de 
Inclusión 
(E7-MIS-EMI) 
Definición del mejor método para inyectar el 
servicio en le sistema 
Sistema Anfitrión + Método 
de Inclusión (E7-MIS-MI) 
Software + 
Documento 
Sistema Anfitrión + 
Invocación a Servicio  
(E8-IS-IS) 
Software 8. Inclusión del 
Servicio 
(E8-IS) Se procede a incluir en el sistema las invocaciones al 
servicio. 
Programación o 
rotulado de 
archivos fuentes 
(E8-IS-PRF) Invocaciones al servicio desde el sistema 
anfitrión. 
Sistema Anfitrión + 
Invocación al Servicio  
(E4-PUO) 
Software 
Aceptación de 
Usabilidad  
(E9-PU-AU) 
Documento 9. Prueba de 
Usabilidad  
(E9-PU) 
Se lleva a cabo una nueva prueba de usabilidad 
Prueba de 
usabilidad de 
sistemas  
(E9-PU-U) El resultado de esta no debería variar del anterior 
sumado el servicio 
Sistema Anfitrión + 
Invocación a Servicio (E5PS-APS) (E8-IS) 
Software 
Aceptación de Prueba 
de Stress  (E10-PSAPS) 
Documento 10. Prueba de 
Stress 
(E10-PS) 
Se lleva a cabo una nueva prueba de stress 
Ejecución de la 
Prueba de Stress 
(E10-PS-EPS) El resultado de esta no debería variar del anterior 
sumado el servicio 
Reporte de Usabilidad  
+ Reporte de Prueba de 
Stress + Aceptación de 
Usabilidad + Aceptación de 
Prueba de Stress  
(E5-PS-APS) (E4-PUOAU) 
(E9-PU-AU) (E10-PS-APS) 
Documento + 
Documento + 
Documento + 
Documento  
Aceptación Inclusión de 
Servicio  
(E11-EV-AIS) 
Documento 
11. Evaluación 
(E11-EV) 
Evaluación final de los documentos generados en las 
pruebas, los valores obtenidos antes y después de la 
inclusión deberían ser similares. 
Evaluación de 
Resultados 
(E11-EV-R) 
Aceptación final del proceso 
  
Fig. 1. Flujo de proceso propuesto. 
 
Tabla 3. Detalles de cada fase, potenciales problemas y soluciones propuestas. 
 
6. Financiamiento  
Las investigaciones que se reportan en este artículo han sido financiadas parcialmente 
por el Proyecto de Investigación 33B066 del Departamento de Desarrollo Productivo 
y Tecnológico de la Universidad Nacional de Lanús. 
7.
