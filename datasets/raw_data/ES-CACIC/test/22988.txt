agcc un generador de procesadores de lenguajes basado en gramáticas de atributos
﻿
Este trabajo des
ribe una herramienta de genera
ión pro
esadores de lenguajes
basados en gramáti
as de atributos para la familia de bien denidas (well dened
atribute gramars) las 
uales imposibilitan la deriva
ión de árboles sintá
ti
os 
on
dependen
ias 
ir
ulares entre las instan
ias de sus atributos.
La herramienta desarrollada, denominada ag

, genera todos los 
omponentes
ne
esarios de un pro
esador de lenguajes análisis léxi
o, sintá
ti
o y evalua
ión
de atributos a partir de una espe
i
a
ión de una gramáti
a de atributos.
El diseño modular de ag

 permite su extensión o adapta
ión para generar

ódigo en diferentes lenguajes de programa
ión y para diferentes herramientas e
in
luir otros me
anismos o estrategias de evalua
ión de atributos.
agg
 
ontiene dos algoritmos de evalua
ión de atributos, uno bajo demanda y
otro basado en se
uen
ias de visita, ambos desarrollados por los autores de este
trabajo.
Hasta el momento no se 
ono
en otras herramientas 
on los objetivos y 
on el
soporte de la familia men
ionada que tiene ag

.
Palabras 
lave: Gramáti
as de Atributos, Compiladores-Compiladores, Lenguajes, Parsing, Evalua
ión de atributos.
1. Introdu

ión
Desde que D. Knuth en 1968 [13℄ introdujo la idea de las Gramáti
as de Atributos
(GA), estas han sido de gran interés en las 
ien
ias de la 
omputa
ión y en ingeniería
de software ya que permiten des
ribir 
omputa
iones en lenguajes libres de 
ontexto y se han utilizado ampliamente para el desarrollo de herramientas de genera
ión
de pro
esadores de lenguajes basados en espe
i
a
iones, 
ono
idos generalmente 
omo 
ompiladoresompiladores o sistemas de genera
ión de 
ompiladores o tradu
tores.
También se utilizan 
omo un formalismo para la deni
ión de la semánti
a de lenguajes
de programa
ión.
Una gramáti
a de atributos es una extensión de las gramáti
as libres de 
ontexto, a
las 
uales se les in
luyen valores aso
iados a los símbolos de la gramáti
a (denominados
atributos) y e
ua
iones para la deni
ión de valores de las instan
ias de los atributos
en un árbol sintá
ti
o derivado a partir de la gramáti
a libre de 
ontexto subya
ente.
de
l : type lid

ompute lid.t=type.t
de
l.m=lid.m
de
l.t=type.t
type : int

ompute type.t=INT
| 
har

ompute type.t=CHAR
lid : id

ompute id.t=lid.t
lid.m=size(lid.t)
| lid , id

ompute id.t=lid[0℄.t
lid[1℄.t=lid[0℄.t
lid[0℄.m=lid[1℄.m+size(lid[0℄.t)
Figura 1: Ejemplo de una gramáti
a de atributos
En la gura 1 se muestra un ejemplo de una espe
i
a
ión de una GA que 
al
ula
el tipo y 
antidad de memoria requerida en una de
lara
ión al estilo del lenguaje C.
En el atributo m del símbolo de
l se 
al
ula la 
antidad de memoria requerida por
la de
lara
ión. El tipo de 
ada identi
ador se 
omputa en el atributo id.t.
La fun
ión size(type) retorna el tamaño de la representa
ión de una variable de tipo
type.
Si bien un atributo puede apare
er aso
iado a mas de un símbolo de la gramáti
a,
se 
onsideran atributos diferentes. No hay 
oni
tos de nombres ya que se referen
ian
prejados 
on el símbolo 
orrespondiente. Cuando en una regla de la gramáti
a un
símbolo o
urre mas de una vez, se utiliza la nota
ión de indexa
ión (entre 
or
hetes),

omo en la regla de la última produ

ión.
Las e
ua
iones
1
indu
en dependen
ias entre las instan
ias de los atributos del árbol
sintá
ti
o.
La gura 2 muestra el árbol sintá
ti
o atribuido para una 
adena de entrada de la
gramáti
a de la gura 1 y las dependen
ias entre las instan
ias de los atributos (ar
os
nos).
El orden de evalua
ión debe ser 
onsistente 
on las dependen
ias, es de
ir que una
instan
ia de un atributo debe ser evaluado luego que hayan sido evaluadas las instan
ias
de los atributos de los que depende en la e
ua
ión 
orrespondiente. Una dependen
ia

ir
ular en el árbol sintá
ti
o hará generalmente imposible la evalua
ión, lo que sugiere
la siguiente pregunta: dada una GA, ¾existe algún árbol sintá
ti
o atribuido, derivado
a partir de la GA, que 
ontenga dependen
ias 
ir
ulares? Esta pregunta se 
ono
e 
omo
el problema de 
ir
ularidad, el 
ual se ha probado que es un problema 
omplejo que
toma tiempo exponen
ial en base al tamaño de la gramáti
a [10℄.
Una Gramáti
a de Atributos Bien Denida (GSBD) tiene 
omo 
ara
terísti
a que
no es posible que se generen árboles sintá
ti
os 
on dependen
ias 
ir
ulares y es la fa1
También llamadas reglas de 
omputa
ión.
decl t
type
int lid
id
t m
t m
t
t
id t
lid
m
Figura 2: Árbol sintá
ti
o atribuido para la 
adena int a , b
milia mas amplia en la 
lasi
a
ión tradi
ional de GA. Las herramientas más 
omunes
que se utilizan se basan en sub
lases de GABD 
omo las ANCAG (absolutamente no

ir
ulares) o en subfamilias 
omo las OAG (ordenadas) [11℄ y mas re
ientemente las
EOAG (ordenadas extendidas) [23℄.
Para estas familias de GA, es posible generar un úni
o plan (orden) de evalua
ión
de los atributos de 
ada produ

ión, mientras que para las GABD
2
se puede tener mas
de un plan aso
iado por produ

ión y el evaluador deberá realizar la sele

ión de 
ada
plan dinámi
amente (lookahead behavior). Cada plan es apli
able según el 
ontexto de
apli
a
ión de la produ

ión por lo que se denominan multiplan.
Se han desarrollado mu
has herramientas basadas en GA para la genera
ión de
pro
esadores de lenguajes. Estas herramientas se han basado en estrategias de evalua
ión dinámi
a [1℄ [9℄ o evalua
ión estáti
a para familias restringidas (
omo ELI
3
,
basada en las OAG), las 
uales permiten generar 
ódigo para su evalua
ión en tiempo
de 
ompila
iónompila
ión.
Otras herramientas se basan en extensiones tal 
omo son los esquemas de tradu

ión, los 
uales introdu
en se
uen
ialidad en la eje
u
ión de las opera
iones. Una de las
herramientas mas 
ono
idas y utilizadas basado en este formalismo es ya

[15℄, la 
ual
soporta gramáti
as l-atribuidas.
Si bien a
tualmente existen mu
has herramientas, todas tienen restri

iones en

uanto a la familia de gramáti
as soportadas y también 
on respe
to al 
ódigo generado. La mayoría generan 
ódigo para uno o dos lenguajes determinados. Si se quiere
soportar otro lenguaje generalmente hay que re
urrir a programar el binding 
orrespondiente. En la prá
ti
a existe una versión del popular ya

 para 
ada lenguaje de
programa
ión que podamos men
ionar.
Uno de los prin
ipales objetivos en el desarrollo de ag

 fue su modularidad para
soportar plug-ins para la genera
ión de 
ódigo para diferentes lenguajes y plataformas.
A 
ontinua
ión se dará una introdu

ión a las gramáti
as de atributos y sus métodos
2
WDAG (Well Dened Attribute Grammars), por sus siglas en inglés.
3
http://eli-proje
t.sour
eforge.net
de evalua
ión. Luego se analiza el diseño de ag

, se muestra un ejemplo de uso y
se des
riben algunos detalles internos. Finalmente se realizan algunas 
on
lusiones y
futuras extensiones.
2. Gramáti
as de Atributos
En esta se

ión se denen los prin
ipales 
on
eptos a ser utilizados en las se

iones
siguientes.
DEFINICIÓN 2.1 Una gramáti
a libre de 
ontexto [8℄ es una tupla G =< N,T, P, S >
donde N es un 
onjunto de símbolos no terminales, T es el 
onjunto de símbolos
terminales, V = N ⋃T , P es un 
onjunto de pares de la forma X → α denominadas
produ

iones, donde X ∈ V , α ∈ V ∗, S ∈ N es el símbolo de 
omienzo.
Una gramáti
a de atributos se di
e que está en forma normal si el símbolo de

omienzo apare
e en una úni
a produ

ión y sólo en su parte izquierda (lhs).
DEFINICIÓN 2.2 Sean α, β ∈ (N ∪T )∗ y sea q : X → ϕ una produ

ión de P, enton
es αXβ
G
q=⇒αϕβ.
La rela
ión
G
=⇒ se denomina rela
ión de deriva
ión y se di
e que la 
adena αXβ
deriva dire
tamente (por apli
a
ión de la produ

ión p) a αϕβ. Se denotará
G
*=⇒ a la

lausura reexo-transitiva de la rela
ión de deriva
ión.
DEFINICIÓN 2.3 El lenguaje generado por G, denotado 
omo
L(G) = {w|w ∈ V ∗T | S
G
*=⇒w}
DEFINICIÓN 2.4 Una gramáti
a de atributos es una tupla GA =< G,A,R >
donde G es una gramáti
a libre de 
ontexto (en forma normal), A es un 
onjunto nito
de atributos y R es un 
onjunto nito de reglas semánti
as.
En una GA se aso
ia un 
onjunto de atributos
A(X) = H(X)
⋃
S(X)
H(X)
⋂
S(X) = ∅

on 
ada símbolo X ∈ V .
El 
onjunto H(X) es el 
onjunto de atributos heredados de X y S(X) es el 
onjunto
de atributos sintetizados de X, H(S) = ∅ y S(X) = ∅, ∀X ∈ T .4
Una produ

ión p ∈ P , de la forma X0 → X1 . . . Xn, (n ≥ 0), tiene una o
urren
ia
Xi.a si a ∈ A(Xi), 0 ≤ i ≤ n.
El 
onjunto de reglas semánti
as Rp de la produ

ión p, donde 
ada regla tiene la
forma Xi.a := f(y1 . . . yk) 
on las siguientes restri

iones:
1. i = 0 si a ∈ S(Xi), o 1 ≤ i ≤ n si a ∈ H(Xi).
4
ag

 permite que los símbolos terminales tengan un úni
o atributo sintetizado denominado lexema,
el 
ual 
ontiene la 
adena aso
iada y es sintetizado por el analizador lexi
ográ
o.
2. 
ada yj, 1 ≤ i ≤ k, es un atributo que o
urre en p.
3. f es una fun
ión (denominada fun
ión semánti
a) que mapea valores de y1, . . . , yk
al valor de Xi.a.
En una regla de la forma Xi.a := f(y1 . . . yk), se di
e que la o
urren
ia Xi.a depende
de las o
urren
ias yi, 1 ≤ i ≤ k.
R es el 
onjunto de reglas semánti
as R = ⋃p∈P Rp.
DEFINICIÓN 2.5 Un árbol atribuido es una tupla T =< N,C >, donde
N =< lbl, a1, . . . , ak > es el 
onjunto de nodos los 
uales 
ontienen rótulo lbl = l(n),
l(n) : N → X es una fun
ión de rotulado de nodos y ai ∈ A(l(n)) (1 ≤ i ≤ k) son
instan
ias de atributos del símbolo X = l(n).
C : N → ℘(N), es la fun
ión que denota a los hijos de un nodo.
DEFINICIÓN 2.6 T =< N,C >, es un árbol atribuido 
orrespondiente a la gramáti
a
de atributos GA =< G,A,R > si 
umple 
on:
1. la raíz del árbol es el nodo n =< S,< A(S) >>
2. los hijos de n, C(n) =< n1, . . . , nk > si y solo si S
G
p=⇒l(n1) . . . l(nk)
3. los subárboles 
on raíz n1, . . . , nk son árboles atribuidos para las gramáti
as en
forma normal
GAi, (1 ≤ i ≤ k) tal que GAi =< Gi, Ai, Ri > donde
Gi =< N−{S}, T, P−{p}, l(ni) >, Ai = A−A(S), Ri = R−{rp}, (las gramáti
as
sin el símbolo de 
omienzo S y sin los atributos y reglas 
orrespondientes)
Los valores de las instan
ias de los atributos en 
ada nodo de un árbol sintá
ti
o
atribuido dependen de los valores de otras instan
ias dependiendo de la fun
ión semánti
a que los dena. Estas dependen
ias forman una rela
ión 
ono
ida 
omo grafo de
dependen
ias.
DEFINICIÓN 2.7 Una gramáti
a de atributos GA es bien denida (GABD) si ningún
árbol sintá
ti
o atribuido generado a partir de GA puede tener dependen
ias 
ir
ulares
entre las instan
ias de sus atributos.
La de
isión si una GA dada es bien denida o no, se 
ono
e 
omo el test de 
ir
ularidad, el 
ual se puede demostrar que tiene 
omplejidad exponen
ial [10℄.
Mu
has herramientas 
onstruyen el grafo de dependen
ias sobre el árbol sintá
ti
o
atribuido para 
ada 
adena de entrada y si se dete
tan 
i
los, la gramáti
a es 
ir
ular.
Este método es utilizado generalmente en las herramientas 
on evalua
ión dinámi
a de
atributos. El orden de eje
u
ión puede realizarse ha
iendo un orden topológi
o del grafo
de dependen
ias. La prin
ipal desventaja es que en 
ada 
orrida se debe 
onstruir el
grafo de dependen
ias y luego pro
eder 
on la evalua
ión, lo que requiere mu
ho tiempo
y espa
io.
REGULAR EXPRESSIONS: RULE r2: type -> integer
id : <[a-z℄[a-z0-9℄*> COMPUTE
integer: <"int"> type.t=INT

hara
ter:<"
har"> END
END
SEMANTIC DOMAINS: RULE r3: type -> 
hara
ter
add: (int,int) -> int; COMPUTE
size: {INT,CHAR} -> int; type.t=CHARACTER
END END
SYNTHETIZED ATTRIBUTES: RULE r4: lid -> id
m: int of id, lid, de
l COMPUTE
t: {INT,CHAR} of type, de
l id.t=lid.t
END lid.m=size(lid.t)
END
INHERIT ATTRIBUTES:
t: {INT,CHAR} of id, lid, de
l RULE r5: lid -> lid id
END COMPUTE
id.t=lid[0℄.t
BEGIN GRAMMAR: lid[1℄=lid[0℄.t
lid[0℄.m=add(lid[1℄.m,size(lid[0℄.t)
RULE r1: de
l -> type lid END
COMPUTE
de
l.t=type.t END GRAMMAR
de
l.m=lid.m
lid.t=type.t
END
Figura 3: Ejemplo de una espe
i
a
ión ag

Otras herramientas
5
trabajan 
on sub
lases de GA que permiten realizar el test
de 
ir
ularidad estáti
amente en tiempo polinomial, 
omo por ejemplo para las OAG
(Ordered Attribute Grammars). La desventaja de estos enfoques es la pérdida de expresividad.
3. La herramienta ag

A diferen
ia de las herramientas existentes, en ag

6
se puso la prin
ipal aten
ión
en su diseño modular de sus 
omponentes para permitir su extensibilidad tanto para
el 
ódigo generado 
omo para la inser
ión de nuevos me
anismos de evalua
ión de
atributos.
En la gura 3 se muestra el ejemplo de la gura 1 en una espe
i
a
ión ag

.
Como uno de los objetivos prin
ipales de ag

 es la independen
ia del lenguaje de
programa
ión del los pro
esadores generados, se tuvo que tener en 
uenta que en la
espe
i
a
ión no se in
luyeran 
onstru

iones dependientes de un lenguaje de programa
ión, 
omo podrían ser los tipos denidos y las fun
iones semánti
as.
Junto 
on la espe
i
a
ión, el usuario deber espe
i
ar el (o los) ar
hivo(s) que 
on5
Por ejemplo ELI.
6
ag

 está disponible en http://d
.exa.unr
.edu.ar/investiga
ion/lenguajes/Download.html
tienen la deni
ión de los tipos fun
iones utilizadas en la espe
i
a
ión, 
omo también
denir el ar
hivo de sinónimos de tipos y fun
iones que permiten que ag

 reali
e el
mapping al lenguaje de programa
ión destino.
Estos ar
hivos se deben men
ionar en el momento de la invo
a
ión de ag

 en la
línea de 
omandos.
El formato de un ar
hivo de mapping de tipos debe 
ontener líneas de la forma:
<tipo abstra
tto ag

> = <tipo 
on
reto lenguaje target>
4. Arquite
tura
La herramienta se 
ompone en varios módulos que llevan a 
abo las tareas de análisis
léxi
o, sintá
ti
o y semánti
o y la genera
ión del 
ódigo del evaluador nal. También
hay dos módulos adi
ionales entre los que se distribuyen las fun
iones de utilidad y la

oordina
ión de las a
tividades de los demás módulos. La estru
tura global se puede
apre
iar en la gura 4, donde se puede apre
iar que el módulo prin
ipal invo
a a 
ada
a
tividad y estas toman la informa
ión ne
esaria de la representa
ión interna de la GA
por medio del objeto Environment.
Este objeto tiene una úni
a instan
ia (se ha seguido el patrón singleton) y ha
e de

ontenedor prin
ipal de los diferentes elementos de la representa
ión interna de la GA.
La espe
i
a
ión es pro
esada 
omo en 
ualquier otro pro
esador de lenguajes, es
de
ir, se realiza por etapas: parsing, análisis semánti
o y genera
ión de 
ódigo.
Los diferentes módulos a

eden a diferentes estru
turas de datos que son la representa
ión interna de la espe
i
a
ión. Tanto los atributos 
omo símbolos y fun
iones
semánti
as se alma
enan en estas estru
turas, lo que fa
ilita su búsqueda durante el
pro
esamiento. El pro
eso de genera
ión de 
ódigo es llevada a 
abo por un módulo
general que agrupa varios generadores según el tipo de 
ódigo que generan. El módulo
usa los generadores sele

ionados por el usuario e invo
a a sus opera
iones. El 
ódigo
generado depende del 
onjunto de generadores utilizado. Según el 
onjunto es posible
tradu
ir la espe
i
a
ión a diversos lenguajes de programa
ión, y el usuario de ag

puede in
luir sus propios generadores simplemente extendiendo las 
lases generadoras.
El diseño ha
e amplio uso de las fa
ilidades de la heren
ia en la programa
ión orientada a objetos para aprove
har la reutiliza
ión de 
ódigo y la espe
ializa
ión de los
generadores.
El módulo que 
ontiene los analizadores léxi
o y sintá
ti
o lleva a 
abo la genera
ión del 
ódigo intermedio. Los objetos en este módulo pro
esan la espe
i
a
ión de
entrada y, si no hay errores sintá
ti
os en la misma, generan una estru
tura de objetos
de varias 
lases que 
onstituyen la representa
ión interna de esa espe
i
a
ión. Los
generadores de 
ódigo y los evaluadores de atributos toman esta representa
ión interna

omo entrada.
4.1. Componentes de la representa
ion intermedia
Cada 
omponente de una espe
i
a
ión tiene una 
lase que dene su representa
ión.
A medida que la espe
i
a
ión se interpreta los objetos son 
reados y rela
ionados. Cada
símbolos gramati
al (terminales y no terminales) queda representado por un objeto
CodeGenerator
Environment
AppOptions
MainApplication SemanticAnalyzer
LangMapping
Grammar
Parser
Figura 4: Diagrama de 
omponentes de ag


on un identi
ador úni
o y todas aquellas propiedades aso
iadas a símbolos, 
omo por
ejemplo su rótulo (label) y su 
onjunto de atributos.
Asimismo 
ada atributo estará des
ripto por una 
lase en la que se 
on
entra informa
ión a
er
a del tipo de atributo representado (sintetizado o heredado).
Lo mismo su
ede 
on las produ

iones y las reglas semánti
as.
4.2. Valida
ión y tradu

ión
La representa
ión intermedia es tomada 
omo entrada por las etapas de análisis
semánti
o y genera
ión de 
ódigo. El análisis semánti
o veri
a que la gramáti
a esté
denida 
orre
tamente y realiza el test de 
ir
ularidad (si fue requerido por el usuario).
Los 
hequeos que se realizan se enumeran a 
ontinua
ión:
1. la gramáti
a no debe 
ontener símbolos inútiles
2. la espe
i
a
ión no debe 
ontener referen
ias inválidas a símbolos o atributos
3. tampo
o debe haber in
onsisten
ias tales 
omo que un atributo heredado del
símbolo S del lado izquierdo de una produ

ión X → α sea evaluado por una
regla semánti
a aso
iada a esa produ

ión
4. no deben existir dependen
ias 
ir
ulares entre los atributos del grafo de dependen
ias. Esto se veri
a eje
utando el algoritmo de 
ir
ularidad de Knuth (al 
ual
se han in
orporado algunas mejoras para su a
elera
ión de eje
u
ión).
Tanto los analizadores semánti
os 
omo los generadores de 
ódigo fueron representados 
on 
lases de C++. Para el 
aso parti
ular de los generadores, existe una 
lase
abstra
ta CodeGenerator, que puede ser extendida para proveer nuevos tipos de generadores. Es este uno de los aspe
tos desta
ados de ag

: la posibilidad de agregar a
la apli
a
ión diversos tipos de generadores sin tener que modi
ar el resto del 
ódigo.
Cono
iendo 
omo está organizada la representa
ion intermedia, el diseñador del generador debe sólo 
on
entrarse en tradu
ir el 
ódigo. ag

 es 
ongurable para espe
i
ar
el generador de 
ódigo y el evaluador de atributos a utilizar.
CodeGenerationContainer
CodeGenerators CodeGen1 CodeGen2
CodeGenerator
...
generators
Figura 5: Componentes de genera
ión de 
ódigo
5. Código generado
ag

 provee una serie de generadores de 
ódigo estándar, más dos módulos de genera
ión de 
ódigo 
reados para generar un evaluador por demanda y otro basado en
se
uen
ias de visitas. Los generadores produ
en 
lases C++, más dos espe
i
a
iones
LEX y YACC. Entre las 
lases hay una 
lase abstra
ta CodeGenerator que tiene un
método GenerateCode que debe implementarse en las sub
lases, de manera tal que se
use la representa
ión intermedia para generar el 
ódigo nal. El 
ódigo generado puede
ser 
ualquiera: un desarrollador podría es
ribir un 
onjunto de sub
lases de CodeGenerator para generar 
ódigo Java, mientras que otro podría es
ribir generadores para
C++ o para 
ualquier otro lenguaje. En la gura 5 se apre
ia la estru
tura del módulo.
Las 
lases que están en la parte inferior son posibles extensiones de las 
lases abstra
tas.
Entre el 
ódigo generado se en
uentran 
lases que representan árboles sintá
ti
os
atribuidos. El parser generado tradu
e el texto de entrada en un árbol sintá
ti
o atribuido que sirve 
omo entrada del evaluador generado para que este lo de
ore, es de
ir,
para que reali
e la evalua
ión de atributos.
En la versión a
tual de ag

 se utilizó ex y bison para la genera
ión de los analizadores lexi
ográ
o y sintá
ti
o para el evaluador nal, es de
ir que el generador de
los analizadores lexi
ográ
os y sintá
ti
os a
tualmente generan espe
i
a
iones para
estas herramientas.
Estas espe
i
a
iones son generadas de tal forma que, al ser invo
ado el parser, éste
genera un árbol sintá
ti
o atribuido, el 
ual será usado por el evaluador de atributos.
Por último, dependiendo del tipo de evaluador que se desea generar, se generan las

lases ne
esarias para repesentar el me
anismo de evalua
ión que a
tuará sobre el árbol

onstruido durante el análisis léxi
o - sintá
ti
o. Cada evaluador tiene su estrategia de
re
orrido, que es implementada madiante algún algoritmo en una sub
lase de la 
lase
Evaluator existente 
omo parte del 
ódigo estándar. El usuario tiene la libertad de
agregar su propia estrategias de evalua
ión, introdu
iendo un nuevo generador que 
ree
el 
ódigo ne
esario para implementarla.
Hasta el momento existen dos sub
lases de Evaluator :
1. DemandEvaluator : es un evaluador bajo demanda que utiliza una pila 
omo ya
fue des
ripto anteriormente
2. VSEvaluator : es un evaluador basado en se
uen
ias de visita para GA multiplan.
Es independiente del método de genera
ión de planes. La genera
ión de los planes
está a 
argo de alguna instan
ia de VSPlanGenerator permitiendo así el soporte
de diferentes estrategias de genera
ión de planes de se
uen
ia de visita.
5.1. Compila
ión del 
ódigo generado
La versión a
tual de ag

 genera 
ódigo C++ y el pro
esador generado tiene la
misma arquite
tura 
omo la mostrada en la gura 4 salvo algunas pequeñas ex
ep
iones 
omo TypeMapping y otros detalles que ya no forman parte del pro
eador generado.
Además se genera un makele para fa
ilitar la 
ompila
ión, así que el usuario sólo debe
eje
utar el 
omando make.
El 
ódigo generado es totalmente legible, a diferen
ia de la mayoría de las herramientas de este tipo.
6. Evalua
ión de atributos
Informalmente la evalua
ión de los atributos es una fun
ión que asigna un valor a

ada instan
ia de atributo en el árbol atribuido. Cabe re
ordar que las instan
ias de
los atributos son valores fun
ionales, es de
ir no se reasignan.
Más formalmente el pro
eso de evalua
ión puede denirse 
omo una fun
ión eval :
AG×T → T ′ donde T es un árbol sintá
ti
o atribuido y T ′ es un árbol de
orado (árbol
en que todas las instan
ias de los atributos tienen un valor aso
iado).
ag

 in
luye dos algoritmos de evalua
ión los 
uales implementan la fun
ión eval:
1. dinámi
o bajo demanda: este método utiliza una pila para la evalua
ión. Es una
mejora del algoritmo presentado por Gros
h en [7℄. La diferen
ia radi
a en que
nuestro algoritmo utiliza una pila para retener los atributos demandados aún no
evaluados y utiliza informa
ión en tiempo de eje
u
ión sobre si un atributo es
sintetizado o heredado. La propuesta de Gros
h genera subrutinas re
ursivas, por
lo que la pila utilizada es la pila del sistema. Las ventajas de nuestro algoritmo
es que el 
ódigo generado es mu
ho menor y 
on la misma o mayor velo
idad de
eje
u
ión (ya que no de deben pasar tantos parámetros y no hay tanta invo
a
ión
a subrutinas).
2. estáti
o, basado en se
uen
ias de visita: en realidad es un intérprete de opera
iones 
orrespondientes a se
uen
ias de visita (ver [11℄). Los planes de evalua
ión
son generados estáti
amente. En tiempo de eje
u
ión el intérprete de opera
iones
soporta la sele

ión de planes según el 
ontexto, requerimiento indispensable para
las GA multiplan.
Como se pudo apre
iar en la se

ión 4, ag

 soporta la in
orpora
ión de múltiples
generadores de planes de evalua
ión y de otros algoritmos de evalua
ión de atributos.
7. Con
lusiones y trabajo futuro
En este trabajo se ha presentado una herramienta de genera
ión de pro
esadores
de lenguajes basada en gramáti
as de atributos.
ag

 soporta la familia más grande de GA para las 
uales se pueden generar evaluadores de atributos estáti
amente. Esto permite que in
luya un evaluador multiplan
basado en se
uen
ias de visita.
Además in
luye un evaluador dinámi
a bajo demanda que en la prá
ti
a resulta
muy e
iente en términos de velo
idad y 
onsumo de memoria. Es este último aspe
to
es una mejora del método propuesto en [7℄ y 
onstituye una generaliza
ión ya que
podría evaluar GA 
ir
ulares en aquellos 
asos que le entrada no genere 
ir
ularidades.
Entre las numerosas extensiones y mejoras previstas se pueden men
ionar: soportar
expresiones más 
omplejas en las reglas semánti
as, mejora de algunos aspe
tos de implementa
ión para fa
ilitar más aun la in
opora
ión de nuevas extensiones (generadores
para otros lenguajes, otros evaluadores de atributos, generadores de planes de evalua
ión, et
). Se planea mejorar la implementa
ión del algoritmo del test de 
ir
ularidad
ya que es posible 
onseguir un mejor desempeño en el 
aso promedio.
Además se prevee modi
ar el generador de análisis léxi
o y sintá
ti
o para que
genere un parser built-in y no se tenga que depender de otras herramientas.
Si bien no se han realizado estudios 
omparativos detallados 
on otras herramientas
similares, las primeras 
ompara
iones muestran una superioridad tanto en la 
alidad (y
longitud) del 
ódigo generado 
omo en la performan
e durante la genera
ión de 
ódigo
y de los produ
tos generados.
Finalmente podemos men
ionar que 
asi no existen herramientas diseñadas 
on
multitarget de lenguajes de programa
ión que soporten el formalismo GABD.
Referen
ias
[1℄ Aguirre, Arroyo, Grinspan. 1999. Un ambiente de eje
u
ión de pro
esadores de lenguajes
orientado a objetos basado en gramáti
as de atributos.
[2℄ Aho, Ullman. Compilers, Con
epts, Prin
iples and Tools.
[3℄ Arroyo M., Aguirre J., Florio N. 2003. Genera
ión de evaluadores estáti
os de gramáti
as
de atributos bien denidas. CACIC 2003.
[4℄ Arroyo M., Aguirre J. Florio N. 2002. Genera
ión estáti
a de evaluadores 
on
urrentes
para gramáti
as de atributos NC(1). CACIC 2002.
[5℄ Boyland J.T. 1996. Conditional Attribute Grammars. ACM Transa
tions on Programming
Languages and Systems 18. pag. 73-108.
[6℄ Engelfriet J., Filé. 1982. Simple multi-visit attribute grammars. J. Comput. Syst. S
i. 24,
3, 283-314.
[7℄ Gros
h J. 1992. E
ient Evaluation of Well Formed Attribute Grammars and Beyond.
GMD Fors
hungsstelle an der Università Karlsruhe. Germany.
[8℄ J. Hop
roft, R. Motwani, J. UllmanIntrodu
tion to Automata Theory, Languages and
Computation, 2nd edition. 2000. Addison-Wesley.
[9℄ J. Aguirre, V. Grinspan, M. Arroyo, J. Felippa, G. Gomez, Japlage un entorno de genera
ión de pro
esadores de lenguajes. Anales de CACIC 2001.
[10℄ Jazayeri, Ogden and Rounds. 1975. The intrinsi
ally exponential 
omplexity of the 
ir
ularity problem for attribute grammars. Comm. ACM 18. De
ember 2, Pag: 697-706.
[11℄ U. Kastens. 1980. Ordered Attribute Grammars. A
ta Informati
a. Vol. 13, pp. 229-256.
[12℄ E. Klein. 1992. Parallel Ordered Attribute Grammars. Pro
eedings of the 1992 International Conferen
e on Computer Languages. pp. 106-16.
[13℄ D. Knuth. 1968. Semanti
s of 
ontext free languages. Math Systems Theory 2. June 2.Pag:
127-145.
[14℄ M. F. Kuiper. Paralell Attribute Evaluation: Stru
ture of Evaluators and Dete
tion of
Parallelism. Attribute Grammars and their Appli
ations (WAGA). Paris. P. Deransart &
M. Jourdan, eds. Le
ture Notes in Comp. S
ien
e 461. Springer-Verlag. 1990. Pag: 61-75.
[15℄ Levine J. Lex & ya

. O'Reilly.
[16℄ Thomas Noll, Heiko Vogler. 1992. Top-Down Parsing with Simultaneous Evaluation of
Non
ir
ular Attribute Grammars. Aa
hener Informatik-Beri
hte Nr. 92-14.
[17℄ Riis Nielson. 1983. Computation sequen
es:a way of 
hara
terize 
lasses of attribute grammars. A
ta Informáti
a 19, pp. 225-268.
[18℄ Wuu Yang, W. C. Cheng. A Polynomial Time Extension to Ordered Attribute Grammars.
Department of Computer and Information S
ien
e. National Chiao-Tung University, HsinChu, Taiwan, R.O.C.
[19℄ Wuu Yang. 1998. Multi-Plan Attribute Grammars. Department of Computer and Information S
ien
e. National Chiao-Tung University, Hsin-Chu, Taiwan, R.O.C.
[20℄ Wuu Yang. 1998. Conditional Evaluation in Simple Multi-Visit Attribute Grammar Evaluators. Department of Computer and Information S
ien
e. National Chiao-Tung University, Hsin-Chu, Taiwan, R.O.C.
[21℄ Wuu Yang. 1999. A Classi
ation of Non Cir
ular Attribute Grammars based on Lookahead behavior. Department of Computer and Information S
ien
e. National Chiao-Tung
University, Hsin-Chu, Taiwan, R.O.C.
[22℄ Wuu Yang. 1999. A nest partitioning algorithm for attribute grammars. 1999. Se
ond
Workshop on Attribute Grammars and their Appli
ations - WAGA99. pp. 77-92.
[23℄ Wuu Yang. 2001. SSCC: A software Tool Based on Extended Ordered Attribute Grammars.
Te
hni
al report. Departament of Computer and Information S
ien
e. National ChiaoTung University. HsinChu, Taiwan, R.O.C.
