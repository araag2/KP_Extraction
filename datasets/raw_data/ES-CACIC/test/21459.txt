DiseÃ±o y generaciÃ³n automÃ¡tica de filtros digitales orientados a FPGAs
ï»¿
Los ltros digitales se han 
onvertido en una de las herramientas mÃ¡s utilizadas dentro del Pro
esamiento Digital de SeÃ±ales. En los Ãºltimos tiempos se han apoyado para su implementa
iÃ³n en dispositivos
lÃ³gi
os programables tales 
omo las FPGAs, debido a las ventajas que estos dispositivos ofre
en. En
el presente artÃ­
ulo, se propone un mÃ©todo de 
onstru

iÃ³n de ltros digitales orientados a estos dispositivos, 
on el objetivo de redu
ir la 
antidad de 
eldas lÃ³gi
as utilizadas en los mismos. AdemÃ¡s se
presenta una herramienta de software, la 
ual permite obtener espe
i
a
iones en VHDL automÃ¡ti
amente a partir de 
ara
terÃ­sti
as introdu
idas por el usuario, y que luego pueden ser sintetizadas de
manera dire
ta mediante las herramientas de sÃ­ntesis a
tuales.
Palabras 
laves: Filtros Digitales, Filtros FIR, Filtros IIR, FPGA, VHDL.
Abstra
t
Digitals lters have be
ame one of the most frequently used in the Digital Signal Pro
essing; in the last
years the programmable logi
 devi
es su
h as FPGAs have been used for their implementation, due to
the advantages this devi
es oers. In this arti
ule, we propose a 
onstru
tion method of digital lters
addressed to this devi
es, whi
h aim is to produ
e a high redu
tion in the logi
 
ells utilization. Besides,
we present a software tool, whi
h allow to obtain automati
 VHDL spe
i
ations from parti
ular

hara
terisit
s desired, and then 
an be sintetized in a straight way through the a
tuals sintesis tools.
Keywords: Digital Filters , FIR-Filters, IIR-Filters, FPGA, VHDL.
1. INTRODUCCIÃ“N
En los Ãºltimos tiempos los ltros digitales se han 
onvertido en una de las herramientas mÃ¡s utilizadas dentro del Pro
esamiento Digital de SeÃ±ales (DSP) para dar solu
iÃ³n a un por
entaje 
onsiderable
de problemas de ingenierÃ­a. Estos son muy Ãºtiles en 
asos 
omo la elimina
iÃ³n o redu

iÃ³n de ruido
e interferen
ias y la transforma
iÃ³n de la respuesta espe
tral de seÃ±ales, entre otros. Su utilidad reper
ute en apli
a
iones tales 
omo la 
ompresiÃ³n de informa
iÃ³n para la transmisiÃ³n de datos y el
pro
esamiento de audio y video.
El diseÃ±o de ltros se ha apoyado en los dispositivos lÃ³gi
os programables, los 
uales han jugado
un papel muy importante en el montaje de los mismos, puesto que gra
ias a ellos se ha logrado un
ade
uado fun
ionamiento en tiempo real. Las FPGAs (Field Programmable Gate Array) son unos de
estos dispositivos, los 
uales poseen la 
ualidad prin
ipal de ser reongurables, lo que permite realizar

ambios en la arquite
tura sin ne
esidad de produ
ir varia
iones en el montaje o en el software que se
estÃ¡ operando. TambiÃ©n es posible implementar ltros en otros dispositivos programables tales 
omo
los CPLDs (Complex Programmable Logi
 Devi
e). Gra
ias a la fa
ilidad que se presenta al montar
estos diseÃ±os en los sistemas modernos y al poder ser diseÃ±ados e implementados en 
ir
uitos lÃ³gi
os
programables 
omo FPGAs y CPLDs, los ltros digitales gozan hoy en dÃ­a de una gran popularidad y
un extendido uso.
Un ltro es por lo general implementado mediante el uso de 
ir
uitos multipli
adores, los 
uales
son 
ostosos en tÃ©rminos de espa
io en una FPGA. Por esto, varias tÃ©
ni
as son a
tualmente utilizadas
para redu
ir al mÃ­nimo el hardware ne
esario para la implementa
iÃ³n. Una tÃ©
ni
a que es ampliamente
utilizada es la sustitu
iÃ³n de las arquite
turas aritmÃ©ti
as paralelas por arquite
turas aritmÃ©ti
as series
a nivel de bits. Las arquite
turas serie pro
esan la entrada de a un Ãºni
o bit por vez. La ventaja es
que una Ãºni
a lÃ³gi
a es usada para 
omputar todos los bits de la entrada, pudiendo redu
ir de manera

onsiderable el hardware ne
esario. Por otro lado, esto produ
e un aumento en el tiempo de 
Ã¡l
ulo,
ya que se ne
esitan n 
i
los de reloj para pro
esar una entrada de n bits.
Una arquite
tura para implementar ltros digitales utilizando aritmÃ©ti
a serie se presentÃ³ en [1â„„.
En este artÃ­
ulo se presenta 
omo 
onstruir ltros digitales de orden superior orientados a FPGAs
mediante el uso de estas arquite
turas serie, lo 
ual logra redu
ir 
onsiderablemente la 
antidad de

eldas lÃ³gi
as utilizadas, permitiendo 
onstruir ltros de mÃ¡s alto orden o tener otras apli
a
iones

orriendo simultÃ¡neamente sobre la FPGA. Otras arquite
turas pueden verse en [2â„„,[3â„„,[4â„„,[5â„„ y [6â„„,
las 
uales poseen buen desempeÃ±o pero no redu
en signi
ativamente la 
antidad de 
eldas lÃ³gi
as
utilizadas al ser implementadas. AdemÃ¡s en este arti
ulo se muestra la 
onstru

iÃ³n de una herramienta
de software que permite la genera
iÃ³n automÃ¡ti
a de ltros en VHDL (VHSIC hardware des
ription
language), a partir de la introdu

iÃ³n de 
iertas 
ara
terÃ­sti
as, la 
ual puede ser sintetizada de manera
inmediata mediante el uso de herramientas de sÃ­ntesis.
2. ARQUITECTURA DE LOS FILTROS
De manera general, un ltro es 
ara
terizado por la siguiente e
ua
iÃ³n:
y[n] = a0x[n] + Â· Â· Â· + apx[n âˆ’ p] + b1y[n âˆ’ 1] + Â· Â· Â· + bpy[n âˆ’ p] (1)
donde p es el orden del ltro, los ap's y bp's los 
oe
ientes, x[n] la entrada del ltro en el tiempo n
e y[n] la salida del ltro en el tiempo n. En [7â„„ se muestra 
omo los operandos en 
omplemento a dos
(2'C) x = (x(0).x(âˆ’1) . . . x(âˆ’l))2 e y = (y(0).y(âˆ’1) . . . y(âˆ’l))2 de la e
ua
iÃ³n 1 pueden ser expandidos en
+2âˆ’1
serial
output
S
f
x(nâˆ’1)
x(n)
x(nâˆ’p)
y(nâˆ’1)
y(nâˆ’p)
(LUT)
ROMShift Reg
Shift Reg
Shift Reg
x(1)
x(p)
y(1)
Shift Reg
y(p)
serial input
Figura 1: Arquite
tura del ltro digital utilizando aritmÃ©ti
a serie.
tÃ©rminos de sus bits individuales, obteniendo:
y[n] = a0
(
âˆ’x[n](0) +
âˆ’1
âˆ‘
j=âˆ’l
2jx[n](j)
)
+ Â· Â· Â· + ap
(
âˆ’x[nâˆ’p](0) +
âˆ’1
âˆ‘
j=âˆ’l
2jx[nâˆ’p](j)
)
+
b1
(
âˆ’y[nâˆ’1](0) +
âˆ’1
âˆ‘
j=âˆ’l
2jy[nâˆ’1](j)
)
+ Â· Â· Â· + bp
(
âˆ’x[nâˆ’p](0) +
âˆ’1
âˆ‘
j=âˆ’l
2jy[nâˆ’p](j)
)
(2)
Ahora, denimos una fun
iÃ³n f de la siguiente forma:
f(s, . . . , u, v, . . . , w) = a0s + Â· Â· Â· + apu + b1v + Â· Â· Â· + bpw (3)
donde s, . . . , u, v, . . . , w son variables de un Ãºni
o bit y a0, . . . , ap, b1, . . . , bp 
oe
ientes 
onstantes.
Usando esta fun
iÃ³n, podemos re-es
ribir la expresiÃ³n para y[n] de la e
ua
iÃ³n 1 
omo:
y[n] =
ï£«
ï£­
âˆ’1
âˆ‘
j=âˆ’l
2jf(x[n](j), . . . , x
[nâˆ’p]
(j) , y
[nâˆ’1]
(j) , . . . , y
[nâˆ’p]
(j) )
ï£¶
ï£¸âˆ’ f(x[n](0), . . . , x
[nâˆ’p]
(0) , y
[nâˆ’1]
(0) , . . . , y
[nâˆ’p]
(0) ) (4)
Lo 
ual da origen a la arquite
tura mostrada en la gura 1, la 
ual se presento y analizo detalladamente en [1â„„. AquÃ­, la fun
iÃ³n f es representada 
omo una tabla preomputada (LUT) de
((2p + 1) Ã— (m + âŒˆlog2(2p + 1)âŒ‰)) bits, donde 
ada entrada 
orresponde a una 
ombina
iÃ³n lineal que
indi
a 
uales 
oe
ientes deben 
onsiderarse en 
ada momento del tiempo de a
uerdo a los bits de
dire

ionamiento, por lo tanto, en di
ha entrada se alma
ena la suma de los 
oe
ientes indi
ados.
Esta arquite
tura posee una entrada y una salida serial. La memoria ROM es dire

ionada por
medio del bit menos signi
ativo de los registros que 
ontienen los operandos x's e y's y su salida, junto 
on el 
ontenido del registro S, es pro
esada en la unidad aritmÃ©ti
a. Este resultado es a
umulado
nuevamente en el registro S. Luego de l 
i
los el valor que obtenemos es la salida del ltro, la 
ual es
alma
enada en el registro y(1) para 
Ã¡l
ulos futuros. Luego, el registro S es ini
ializado nuevamente
en 0 y un nuevo 
Ã¡l
ulo 
omienza.
Existen prin
ipalmente 2 tipos de ltros digitales: IIR y FIR. Los ltros IIR 
al
ulan la salida a
partir de un 
onjunto de muestras de entrada de una seÃ±al y un 
onjunto de salidas previas, por lo
que su arquite
tura es idÃ©nti
a a la mostrada en la gura 1. En un ltro tipo FIR la salida depende
solo de la entrada a
tual y de un 
onjunto de entradas previas, por lo que la arquite
tura es 
omo la
mostrada anteriormente pero 
on una pequeÃ±a diferen
ia, Ã©sta no posee retroalimenta
iÃ³n y sÃ³lo posee
un Ãºni
o registro de desplazamiento y, el 
ual 
ontendrÃ¡ el valor de salida del ltro.
Usando estas arquite
turas es posible 
onstruir ltros de 
ualquier orden, ya sea IIR o FIR, pero
el tamaÃ±o requerido para la LUT que 
ontiene los 
oe
ientes preomputados 
re
erÃ¡ exponen
ialmente dependiendo del nÃºmero de 
oe
ientes del ltro. Por esta rabÃ³n, A 
ontinua
iÃ³n veremos 
omo

onstruir ltros de orden superior a partir de un 
onjunto de ltros de bajo orden.
2.1. Filtros IIR
Para 
onstruir ltros IIR de orden superior se ha
e uso de las propiedades de 
onmutatividad y
aso
iatividad de los sistemas LTI (Linear Tine-Invariant). La propiedad de aso
iatividad estable
e que
podemos analizar un sistema LTI dividiÃ©ndolo en subsistemas mas simples mientras que la propiedad
de 
onmutatividad postula que si ubi
amos en serie o 
as
ada un grupo de subsistemas, Ã©stos pueden
ser 
olo
ados en 
ualquier orden sin afe
tar el desempeÃ±o nal. Luego, inter
one
tando subltros de
bajo orden ade
uadamente, podemos 
onstruir ltros de 
ualquier orden deseado. Esta tÃ©
ni
a permite
una redu

iÃ³n 
onsiderable en el espa
io usado de la FPGA, ya que reemplazamos una gran LUT por
un 
onjunto de pequeÃ±as LUTs. En la gura 2 se muestra el esquema de inter
onexiÃ³n empleado para
este tipo de ltros, donde la salida del subltro i se 
one
ta dire
tamente a la entrada del subltro
i + 1:
(1) (2) (kâˆ’1) (k)IIR IIR IIR IIRinput serialoutputserial
Figura 2: Esquema de inter
onexiÃ³n para la 
onstru

iÃ³n de ltros IIR de orden superior.
2.2. Filtros FIR
Debido a que 
omÃºnmente se requieren ltros FIR 
on una gran 
antidad de 
oe
ientes para
obtener buenos 
omportamientos, es ne
esario ha
er un anÃ¡lisis mÃ¡s detallado 
on el objetivo de
redu
ir la lÃ³gi
a ne
esaria para la 
onstru

iÃ³n de los mismos, permitiendo sintetizar ltros de mayor
orden en una FPGA.
Como los 
oe
ientes de un ltro FIR son simÃ©tri
os, podemos sa
ar ventaja de esta simetrÃ­a
agrupando los mismos de manera tal de generar una LUT de menor tamaÃ±o. Esto se debe a que en la
LUT se tendrÃ¡n entradas repetidas y las herramientas de sÃ­ntesis dete
tan esta situa
iÃ³n y realizan las
optimiza
iones 
orrespondientes.
Por lo tanto, dada la siguiente e
ua
iÃ³n general de un ltro FIR:
y[n] = a0x[n] + a1x[n âˆ’ 1] + Â· Â· Â· + apâˆ’1x[n âˆ’ (p âˆ’ 1)] + apx[n âˆ’ p] (5)
podemos reagrupar la e
ua
iÃ³n, por ejemplo de a 
uatro tÃ©rminos, de la siguiente forma:
y[n] =
(
a0x[n] + a1x[n âˆ’ 1] + apâˆ’1x[n âˆ’ (p âˆ’ 1)] + apx[n âˆ’ p]
)
+
(
a2x[n âˆ’ 2] + a3x[n âˆ’ 3] + apâˆ’3x[n âˆ’ (p âˆ’ 3)] + apâˆ’2x[n âˆ’ (p âˆ’ 2)]
)
+ Â· Â· Â· (6)
donde los tÃ©rminos entre parÃ©ntesis formarÃ¡n 
ada uno de los subltros. El primer subltro utilizarÃ¡
los 
oe
ientes a0, a1, apâˆ’1 y ap en su LUT, la 
ual serÃ¡ dire

ionada por los bits menos signi
ativos
de los registros x[n], x[nâˆ’1], x[nâˆ’ (pâˆ’1)] y x[nâˆ’p], El segundo subltro utilizarÃ¡ los 
oe
ientes a2,
a3, apâˆ’3 y apâˆ’2 en su LUT, la 
ual serÃ¡ dire

ionada por los bits menos signi
ativos de los registros
x[n âˆ’ 2], x[n âˆ’ 3], x[n âˆ’ (p âˆ’ 3)] y x[n âˆ’ (p âˆ’ 2)], y asÃ­ en adelante. El esquema de inter
onexiÃ³n es
mostrado en la gura 3.
FIR(1) FIR(2) FIR(kâˆ’1) FIR(k)
+ +
+
serial
input
serial
output
Log(k)
Figura 3: Esquema de inter
onexiÃ³n para la 
onstru

iÃ³n de ltros FIR de orden superior.
Como se observa en la gura, se deben inter
one
tar los subltros de manera tal que la entrada
pase a travÃ©s de ellos serialmente llegando hasta el subltro k y retornando ha
ia el subltro 1, a n
de que 
ada subltro dire

ione su LUT 
on las entradas 
orrespondiente de a
uerdo a los 
oe
ientes
que utili
e. Por Ãºltimo, las salidas produ
idas por los subltros son sumadas mediante sumadores serie
para produ
ir la salida del ltro de orden superior.
Un Filtro FIR que ha
e uso de k subltros, produ
irÃ¡ un resultado 
ada l + âŒˆlog2(k)âŒ‰ 
i
los, donde
l es la 
antidad de bits de la entrada y âŒˆlog2(k)âŒ‰ es la profundidad del Ã¡rbol de sumadores.
3. HERRAMIENTA DE SOFTWARE
La arquite
turas para implementar ltros digitales 
omo las que se mostraron en la se

iÃ³n anterior
son muy simples de espe
i
ar en lenguajes de des
rip
iÃ³n de hardware tales 
omo VHDL. AdemÃ¡s,
tambiÃ©n es muy simple realizar espe
i
a
iones que utili
en un 
onjunto de estos ltros para 
onstruir
ltros de orden superior. Por otro lado ya son 
ono
idos los algoritmos que permiten en
ontrar los

oe
ientes de un ltro, ya sea para tipo IIR o FIR. Por estos motivos, se 
onstruyo una herramienta
de software la 
ual se en
arga de 
onstruir una espe
i
a
iÃ³n en VHDL para un ltro a partir de las

ara
terÃ­sti
as introdu
idas. En la gura 4 (a) se puede apre
iar la interfaz grÃ¡
a de di
ho sistema.
Para el 
aso de ltros digitales tipo IIR es posible sele

ionar entre los mÃ©todos de aproxima
iÃ³n,
Chebyshev y Butterworth, ya sea para ltros pasa-bajo, pasa-alto y pasa-banda. Los algoritmos para
en
ontrar los polos y 
eros 
orrespondientes al sistema pueden verse en [8â„„. Una vez en
ontrados los
polos y los 
eros pueden 
al
ularse los 
oe
ientes del sistema, que luego nos permiten 
onstruir la
LUT. La herramienta ademÃ¡s nos permite sele

ionar la 
antidad de bits tanto para las seÃ±ales de
entradas y salidas 
omo para la LUT. El orden del ltro tambiÃ©n puede ser sele

ionado, 
omo asÃ­
tambiÃ©n la fre
uen
ia de 
orte, fre
uen
ia de muestreo 
on la que trabajara el ltro y la fre
uen
ia de
la FPGA. En base a estos dos Ãºltimos valores y a la 
antidad de bits de la seÃ±al de entrada se 
onstruye
un divisor de fre
uen
ia, 
on lo 
ual el ltro diseÃ±ado trabajara a la misma velo
idad que el 
onversor
analÃ³gi
o-digital.
(a) DiseÃ±o. (b) Simula
iÃ³n.
Figura 4: Interfaz grÃ¡
a.
Para el 
aso del FIR se introdu
en los mismos parÃ¡metros, 
on la diferen
ia que la familia a sele

ionar puede ser Hamming, Von Hann y Re
tangular. Los algoritmos para 
al
ular los 
oe
ientes
tambiÃ©n pueden verse en [8â„„.
Cuando se intenta 
onstruir ltros de orden superior la herramienta ha
e uso de los esquemas propuestos para ambos 
asos.
AdemÃ¡s, esta herramienta nos provee la posibilidad de realizar una simula
iÃ³n del ltro diseÃ±ado

on el n de veri
ar que el 
omportamiento sea el deseado antes de realizar la sÃ­ntesis del mismo.
Para esto se pueden ingresar dos seÃ±ales de entrada, indi
ando su fre
uen
ia respe
tivas, y se obtiene
de manera gra
a los resultados de la simula
iÃ³n. La simula
iÃ³n es realizada por medio del simulador
GHDL
1
, el 
ual es invo
ado por la herramienta. En la gura 4 (b) puede verse la la interfaz gra
a del
sistema para la simula
iÃ³n.
Una vez que se en
ontrÃ³ el ltro deseado y se obtuvo su espe
i
a
iÃ³n en VHDL, la misma puede
ser sintetizada dire
tamente sobre una FPGA mediante las herramientas de sÃ­ntesis existentes en la
a
tualidad.
4. RESULTADOS EXPERIMENTALES
Diversos ltros digitales 
on distintas 
ara
terÃ­sti
as fueron diseÃ±ados a n de analizar su 
omportamiento, desempeÃ±o y utiliza
iÃ³n de 
eldas lÃ³gi
as en una FPGA. La FPGA sele

ionada para
trabajar fue una A
tel ProAsi
250, la herramienta usada para realizar la sÃ­ntesis fue ACTEL LIBERO
IDE v7.3.
En el 
uadro 1 se muestran los resultados obtenidos al realizar la sÃ­ntesis de ltros FIR de distintos
ordenes, 
on 10 bits tanto para la LUT 
omo para las seÃ±ales de entrada y salida, los 
uales fueron
obtenidos 
on la herramienta. AdemÃ¡s se muestran los resultados obtenidos al implementar ltros sin
la mejora propuesta en este artÃ­
ulo, tal 
omo se plantea en [1â„„, a n de observar la mejora obtenida.
Los resultados muestran 
laramente que si la simetrÃ­a de los 
oe
ientes es aprove
hada, obtenemos
una mayor ganan
ia en 
uanto a espa
io utilizado en la FPGA, a la vez que aumentamos la fre
uen
ia
de reloj obtenida, 
on lo 
ual es posible sintetizar una mayor 
antidad de 
oe
ientes en una Ãºni
a
FPGA, 
omo men
ionamos previamente, 
on la ventaja adi
ional de realizar una menor degrada
iÃ³n
del desempeÃ±o.
1
http://ghdl.free.fr/
Cuadro 1: Resultados de sÃ­ntesis de ltros FIR.
Orden del Filtro Usando SimetrÃ­a Celdas LÃ³gi
as Usadas Fre
uen
ia de Reloj (MHz)
14 Si 6.18% 101.153
14 No 6.22% 87.658
30 Si 12.16% 87.897
30 No 13.49% 85.092
70 Si 28.40% 90.465
70 No 31.14% 78.425
Cuadro 2: Resultados de sÃ­ntesis de ltros IIR.
Orden del Filtro Celdas LÃ³gi
as Usadas Fre
uen
ia de Reloj (MHz)
2 3.06% 112.02
4 6.28% 102.28
5 7.64% 101.54
En el 
uadro 2, se muestran los resultados que se obtuvieron al realizar la sÃ­ntesis de ltros IIR,
donde se puede observar que un ltro de orden 5, el 
ual se 
onsidera 
omo un ltro 
on un muy buen
desempeÃ±o, o
upa un 7.64% de la FPGA, 
on lo 
ual es posible tener otro sistema en eje
u
ion sobre
Ã©sta.
Durante los experimentos realizados, se pudo observar que los ltros 
on 10 bits de pre
isiÃ³n para
la LUT ofre
en un desempeÃ±o ade
uado. Para mostrar esto se presentan los resultados obtenidos en
la simula
iÃ³n para un ltro FIR pasa-bajo de orden 70, usando el tipo de ventana Hamming, 10 bits
para la tabla LUT asÃ­ 
omo para las seÃ±ales de entrada y salida, una fre
uen
ia de 
orte de 60 Hz y
fre
uen
ia de muestreo de 1200 Hz. El mismo fue usado para ltrar una seÃ±al de entrada 
ompuesta
por una seÃ±al de 10 Hz 
ontaminada por una seÃ±al de 200 Hz. La gura 5 muestra el efe
to del ltro
sobre la seÃ±al re
iÃ©n men
ionada. Se puede observar que la seÃ±al de 200 Hz ha sido ltrada dejando
pasar la seÃ±al de 10 Hz, 
omo se esperaba.
A modo de ejemplo, se muestra en el anexo 1 un 
Ã³digo VHDL 
orrespondiente a un ltro IIR
de orden 2, pasa-bajo, 
on fre
uen
ia de 
orte a 60 Hz y que trabaja a una fre
uen
ia de muestreo
de 1200 Hz. La LUT y las seÃ±ales de entrada y salida son de 10 bits. Los 
oe
ientes del mismo y el
valor de ganan
ia fueron obtenidos 
on la herramienta. La e
ua
iÃ³n 
ara
terÃ­sti
a para di
ho ltro es
la siguiente:
y[n] = 0,020083 Â· (x[n] + 2 Â· x[n âˆ’ 1] + x[n âˆ’ 2]) + 1,561018 Â· y[n âˆ’ 1] âˆ’ 0,641352 Â· y[n âˆ’ 1] (7)
5. CONCLUSIONES
Como se pudo apre
iar a lo largo del artÃ­
ulo, las tÃ©
ni
as propuestas para la implementa
iÃ³n de
ltros digitales de orden superior permiten una importante redu

iÃ³n en la utiliza
iÃ³n de 
eldas lÃ³gi
as
de una FPGA, produ
iendo ltros 
uyos tamaÃ±os 
re
en de forma lineal 
on la 
antidad de 
oe
ientes
y no de forma exponen
ial, ya que se utilizan un 
onjunto de pequeÃ±as LUTs en lugar de una Ãºni
a
âˆ’2
âˆ’1.5
âˆ’1
âˆ’0.5
 0
 0.5
 1
 1.5
 2
Figura 5: Resultados de simula
iÃ³n.
LUT de gran tamaÃ±o. AdemÃ¡s para el 
aso de ltros FIR se pudo observar que es posible redu
ir aÃºn
mÃ¡s la 
antidad de 
eldas lÃ³gi
as utilizadas, debido a que la simetrÃ­a de los 
oe
ientes nos permiten
agruparlos de manera tal que varias entradas de una LUT sean iguales, permitiendo a las herramientas
de sÃ­ntesis realizar optimiza
iones sobre la espe
i
a
iÃ³n.
Por otro lado, la herramienta 
onstruida permite que usuarios, tanto experimentados 
omo no
experimentados, puedan obtener espe
i
a
iones en VHDL rÃ¡pidamente, 
on sÃ³lo introdu
ir algunas

ara
terÃ­sti
as del ltro deseado, pudiendo sintetizarlas dire
tamente sin ne
esidad de 
ono
er 
omo es
implementado internamente el ltro, ni 
omo se obtienen los 
oe
ientes del mismo.
