Alternativa para especificación sintáctica gramática de sistemas de íconos generalizados Gsig
﻿
This paper presents a new mechanism of grammar specification for Visual Programming Languages named
Generalized Icon System Grammar.
Keywords: Visual Programming Languages, Extended Positional Grammar, Textual specification.
Resumen
Este artículo presenta un nuevo mecanismo de especificación gramatical para Lenguajes de Programación Visual denominado Gramática de Sistemas de Íconos Generalizados.
Palabras claves: Lenguajes de Programación Visual, Gramática Posicional Extendida, Especificación textual.
*Docteur en Informatique, Universite de Paris XI; Director del grupo de investigación AVISPA, capítulo Univalle.
**Candidato al título de Doctor en Ingeniería, Universidad del Valle; Investigador del grupo AVISPA, capítulo Univalle.
1554
1. INTRODUCCIÓN
La programación visual evoluciona al surgir la pregunta: porqué la insistencia de comunicarse
con las computadoras usando lenguajes textuales cuando se podría tener mayor productividad y hacer
más accesible este campo si se dibujaran las imagenes que llegan a la mente al considerar soluciones
a algún problema? Las personas construyen imágenes mentales, además, se ha demostrado que los
Lenguajes de Programación Textuales son difíciles de aprender para muchas personas (como en el
estudio presentado en [8]). Estas ideas motivaron el estudio de Lenguajes de Programación Visual
(VPL por su sigla en inglés). La investigación sobre la formalización de VPL se ha concentrado
principalmente en dos líneas de investigación:
Gramáticas para VPL, uno de sus grandes aportadores es el profesor Costagliola1 cuyos trabajos
más recientes se encaminan a la creación de Parsers para VPL [3] cuando estos utilizan un
tipo de especificación gramátical denominada Gramáticas Posicionales Extendidas [2] (desde
ahora GPE). La principal dificultad de esta propuesta radica en que los lenguajes diseñados
siguiendo estas gramáticas deben ser simples, debido a que el análisis sintáctico propuesto
requiere grandes cálculos y, como no está enfocado al almacenamiento, tampoco es fácil extraer
un programa visual desde su representación textual; de igual manera, las demostraciones sobre
propiedades formales del lenguaje exigen convertir el código en otro tratable matemáticamente.
Semántica de VPL, un grupo de investigación sobresaliente en esta área es el del profesor
Erwig2 donde su desarrollo más novedoso acerca de los VPL es un estudio sobre la Inferencia
Visual de Tipos [7], empleando un trabajo anterior sobre la Especificación Semántica de VPL
[6] en el cual presenta la importancia de una especificación textual de características como la
semántica, para poder efectuar demostraciones en algún momento.
Desde lo aplicativo, recientes investigaciones se han interesado en el paradigma de programación
Spreadsheet (estilo hoja de cálculo) como el presentado en [9], donde la especificación gramatical se
facilita por la manera en la que se presenta la información y porque está orientado a la programación
funcional donde la sintáxis no es muy extensa. Al ver el panorama, no hay grandes cambios en las
formas de especificación gramatical desde las GPE y la utilización de otra implica la creación de nuevas maneras de Parsing o la disminución de la expresividad del lenguaje; igualmente, los Programas
Visuales por ser dibujos requieren una representación textual no sólo para su almacenamiento y posterior extracción, si no al realizar los procesos de los cuales sólo se conocen métodos textuales, esta
necesidad no está claramente contemplada por las especificaciones gramaticales existentes.
Inicialmente, el grupo AVISPA3 (capítulos Universidad del Valle y Universidad Javeriana de
Cali-Colombia) empleó las GPE para la implementación de GraPiCO4; pero en el desarrollo se encontró que estos mecanismos no se ajustaban a los requerimientos, dado que representaban un análisis
sintáctico complicado y el código de almacenamiento era de difícil tratamiento. Por todas las razones
expuestas, se diseñoó una forma de especificación para VPL denominada Gsig, que permitió: el empleo de dibujos, la utilización de mecanismos de Parsing conocidos y probados como el Descendente
Predictivo para gramáticas LL(1) y la obtención de un código textual para almacenar los programas.
De esta manera, los aportes que se presentarán de las Gsig son: un mecanismo de especificación gramatical que utiliza métodos de análisis sintáctico conocidos, flexibilidad en los íconos empleados y la
1http://www.dmi.unisa.it/people/costagliola/www/www/home/indice.htm
2http://web.engr.oregonstate.edu/∼erwig/
3Grupo de investigación en Ambientes VISuales de Programación Aplicativa.
4Lenguaje visual con base en el cálculo PiCO (pi Calculus and Concurrent Objects, desarrollado por el grupo AVISPA).
1555
obtención de un código textual para la representación de los Programas Visuales permitiendo desde
su dibujo el almacenamiento y viceversa, y su tratamiento formal como por ejemplo, comprobación
de la semántica y diseño de reglas de traducción.
Este artículo tratará el siguiente orden de ideas: 1) Introducción general, 2) Repaso de las Gramáticas Posicionales Extendidas, 3) Propuesta de las Gsig, 4) Referencia al Cálculo PiCO, base del Lenguaje GraPiCO y 5) Ejemplo de la utilización de las Gsig en el nuevo Lenguaje Visual GraPiCO.
2. ESPECIFICACIÓN SINTÁCTICA DE LENGUAJES VISUALES
En esta sección, se recuerda la definición de GPE, una especificación sintáctica para VPLs.
2.1. Gramáticas Posicionales Extendidas
Las GPE presentadas en [2] extienden las gramáticas libres de contexto para los lenguajes textuales hacia gramáticas para lenguajes visuales, mediante nuevas relaciones adicionales a la concatenación. Para establecer estas relaciones se requiere un conjunto de identificadores de relación y un
evaluador pictórico para verificar su comportamiento.
Las GPE están compuestas por producciones de la forma:
A →
Lista de símbolos relacionados︷ ︸︸ ︷
X1 R1 X2 R2 · · ·Xm−1 Rm−1 Xm ∆, Γ (1)
Donde:
A: es un símbolo no terminal.
Lista de símbolos relacionados: es una sucesión de símbolos del alfabeto y de relaciones que
un par de símbolos consecutivos cumplen, por ejemplo, X1 R1X2 representa que X1 está relacionado con X2 mediante la relación R1.
∆: es un conjunto de reglas para sintetizar los valores de los atributos sintácticos de A a partir
de los atributos de X1, X2, · · · , Xm.
Finalmente, Γ: es un conjunto de triplas de inserci ·on de la forma (N,Cond, ∆). Estas últimas,
se emplean para insertar dinámicamente nuevos símbolos terminales en la frase de entrada
durante la etapa de análisis sintáctico.
Donde:
• N : es el símbolo terminal a ser insertado.
• Cond: es una precondición que se debe cumplir para insertar N .
• Y, ∆: es la regla usada para calcular los atributos de N a partir de los atributos de
X1, X2, · · · , Xm.
Por ejemplo, en la figura 1 se presenta un objeto visual compuesto por un conjunto de íconos con
etiquetas Ic1, Ic2, ... , Icn dentro del ícono Ic′. Se desea definir una gramática que lo describa, además
de un mecanismo para almacenar los atributos de los íconos. Una GPE que represente el conjunto de
íconos presentados en la figura 1 se muestra en la figura 2.
1556
12
n
Ic’
...Ic
Ic
Ic
Fig. 1: Conjunto de íconos con etiquetas Ic1, Ic2, ... , Icn dentro del ícono Ic′.
1. Ic′ → GrupoIc′
2. Ic → Ic1 ∆(Ic = Ic1)a
3. Ic → ...
4. Ic → Icn ∆(Ic = Icn)
5. GrupoIc′ → GrupoIc 〈Juntob〉 Ic
∆(GrupoIc′ = f(GrupoIc, Ic))c
Γ : {(CONTEXTOd, |GrupoIc| > 0e,
CONTEXTO = g(GrupoIc, Ic)f)}
6. GrupoIc′ → GrupoIc 〈Rg〉 CONTEXTO
∆(GrupoIc′ = CONTEXTO)
7. GrupoIc′ → Ic
∆(GrupoIc′ = Ic)
1. Un grupo de íconos es un
conjunto de íconos Ic′.
2.- 4. Todo ícono Ici (del tipo i)
es un ícono genérico Ic.
5. Un grupo de íconos al lado
de un ícono es un grupo de
íconos.
6. Un grupo de íconos y un
CONTEXTO es un grupo
de íconos.
7. Un ícono genérico es un
grupo de íconos.
aLos atributos de Ic1 son tomados por Ic.
bJunto en una relación cumplida por cualquier par de íconos que comparten la misma ventana.
cLos atributos de GrupoIc′ son calculados mediante la función f .
dCONTEXTO es un terminal abstracto insertado dinámicamente en la frase de entrada durante el análisis sintáctico.
eCondición que asegura que un grupo de íconos está compuesto por, al menos, un ícono.
fLos atributos de CONTEXTO son calculados mediante la función g.
gR es una relación que siempre es satisfecha por cualquier par de símbolos.
Fig. 2: Gramática Posicional Extendida de un grupo íconos: Ic1, Ic2, ... , Icn dentro del ícono Ic′.
1557
...
2
n
1
Ic
Ic’
Ic
Ic
Ic
Fig. 3: Ícono Ico (representa la figura en su totalidad): expansión del ícono etiquetado con Ic en los
íconos con etiquetas Ic1, Ic2, ... , Icn dentro del ícono Ic′.
Ico → Ic 〈expansión〉 Ic′
Fig. 4: Gramática Posicional Extendida del ícono Ico, compuesto de Ic y su expansión Ic′
Definición 1 Se llamar·a Expansión a la acci·on resultante de activar un ·cono para visualizar su
contenido. En la mayor·a de entornos gr·acos una expansi·on se logra presionando una cantidad
determinada de veces un bot·on del rat·on. En adelante, se representar·a visualmente una expansi·on
mediante el dibujo de la proyecci·on del ·cono expandido hacia el conjunto de ·conos producto de la
expansi·on, como se presenta en la gura 3.
Si se quiere modelar el caso de la figura 3 en GPE, la creación de una nueva relación Expansi·on
es requerida. Una gramática posicional para este caso es presentada en la figura 4.
En seguida, se presentará la nueva propuesta por la cual pueden modelarse los lenguajes visuales.
3. GRAMÁTICAS DE SISTEMAS DE ICÓNICOS GENERALIZADOS - GSIG
En esta parte se hará una introducción a la teoría de la composición de los Sistemas Icónicos y su
mecanismo de especificación. Luego, se presentarán formalmente las Gsig y ejemplos de su uso.
3.1. Composición de los Sistemas Icónicos
Empleando la teoría presentada en [4], donde se introduce el término Sistema Icónico5.
Todo Ícono Generalizado está compuesto de dos partes:
1. Parte Física: La información de la imagen como tal. Ejemplos de este tipo de datos son: la
localización del archivo almacenando la gráfica y la localización en el espacio de trabajo.
2. Parte Lógica: El significado de la imagen. Aquí está comprendida información como: a qué clase de sintagma6 corresponde el ícono y por cuáles íconos está compuesta la imagen.
Esta caracterización de la composición de los componentes visuales será utilizada en la definición
formal de las Gsig presentada a continuación en la sección 3.2.
5Conjunto estructurado de Íconos Generalizados relacionados.
6Combinación ordenada de significantes que interactúan formando un todo con sentido, dentro de un conjunto de
reglas y convenciones sintácticas.
1558
3.2. Casos de especificación de constructores visuales
Existen dos clases de especificación de los constructores visuales:
1. Especificación de Constructor Visual Simple: Es la especificación que se efectúa a un ícono en
particular sin tomar su entorno.
2. Especificación de Constructor Visual Compuesto: Es la especificación realizada al conjunto de
Constructores Visuales Simples que lo conforman.
A continuación se presentan las Gsig mediante los mecanismos para lograr los dos tipos de especificaciones de constructores visuales.
3.2.1. Especicaci·on de un Constructor Visual Simple.
La especificación de un Constructor Visual Simple X en términos de Gsig se logrará efectuando
los siguientes pasos:
1. Abstrayendo su información Física como:
Una coordenada de referencia del ícono del constructor, expresado en términos de una
pareja ordenada (x − y).
El camino de la gráfica del ícono del constructor en el medio de almacenamiento. A este
camino se seguirá denominando Path(X).
La etiqueta dada por el usuario al ícono en el programa. A esta etiqueta se llamará Name(X).
2. Abstrayendo su información Lógica o, lo que es lo mismo, la especificación de la expansión del
constructor que se está especificando. En adelante, para referirnos a la expansión del ícono de un
constructor GraPiCO etiquetado con X , emplearemos la notación Ex(X). De igual forma, se
utilizará E [[X]] como la función semántica que entrega la especificación textual del constructor
con etiqueta X ó la especificación del constructor mismo.
3. Y organizando la información obtenida en 1. y 2. entre un par de símbolos de delimitación
(Sd1Sd2)7 como se muestra en la ecuación 2:
E [[X]] = S8 Sd1
Parte F ísica︷ ︸︸ ︷
(x − y) Path(X) ∼
Etiqueta︷ ︸︸ ︷
Name(X) :
Parte Lógica︷ ︸︸ ︷
E [[Ex(X)]] Sd2 (2)
3.2.2. Especicaci·on de un Constructor Visual Compuesto.
La especificación de un Constructor Visual Compuesto X1, · · · , Xn dentro de un sintagma, se
efectúa al listar las diferentes especificaciones de cada constructor, separados por un símbolo de sincronización Ŝci identificando la relación i entre un par de constructores; lo anterior, encerrado entre
un par de símbolos de delimitación Sd1 y Sd2, como se presenta en la ecuación 3:
E [[X1, · · · , Xn]] = Sd1 E [[X1]] Ŝc1 · · · Ŝcn−1 E [[Xn]] Sd2 (3)
7Ejemplos de Sd1 y Sd2 son { }, ( ), [ ], 〈 〉.
8En ocasiones se requiere el empleo de un símbolo de sincronización S ó símbolos de delimitación para establecer
condiciones en los constructores e identificarlos de manera única.
1559
3.3. Definición del proceso de construcción de las Gsig a partir de la especificación de los
constructores visuales
Luego de la definición del proceso de especificación de los constructores visuales, se muestra la
caracterización de las Gsig mediante la definición 2.
Definición 2 Una Gsig es una gram·atica independiente de contexto, donde las producciones pueden
ser de tres formas:
1. X → E [[Y ]]
2. X → E [[Ex(Y )]]
3. X → ( Coordenadas ) Imagen
1. Generaci·on de una especicaci·on.
2. Generaci·on de una Parte L·ogica.
3. Generaci·on de una Parte F·sica.
Al emplear la denifinición 2 se construye la producción más general para un constructor visual,
presentada en la ecuación 4.
X → Y ∼ Etiqueta : Z (4)
De la ecuación 4, se observa que, en efecto, el símbolo →, contiene dos connotaciones en su
función semántica:
1. El constructor visual X se compone de: Y , no terminal representado la Parte Física, el símbolo de sincronización ’∼’, un símbolo de identificación denominado Etiqueta, el símbolo de
sincronización ’:’ y finalmente, por Z, no terminal que corresonde a su Parte Lógica.
2. La Expansión del ícono representado por X tiene como resultado lo que produce Z.
De otro lado, gracias a la estructura de la producción mostrada en la ecuación 4 se modelan
diversos casos de constructores visuales en donde alguno de sus elementos es nulo, estos casos se
presentan en la tabla 1.
3.4. Ejemplo de utilización de las Gsig
En esta sección, se mostrará un ejemplo de especificación con las Gsig, retomando los ejemplos
de los constructores visuales de la figuras 1 y 3.
3.4.1. Gram·atica de un Constructor Visual Compuesto.
Al considerar el caracter ’,’ como el símbolo de sincronización separador de los íconos que
comparten una ventana.
Empleando la ecuación 3, la definición 2 y la ecuación 4.
Se obtiene la gramática para el Constructor Visual Compuesto expuesta en la figura 1, presentada en la ecuación 5.
Ic′ →∼ Etiqueta De Ic′ : E [[Ic1]] , · · · , E [[Icn]] (5)
1560
1. Constructor sin Parte Física, Y → ².
X →∼ Etiqueta : Z
2. Constructor sin etiqueta.
X → Y ∼ : Z
3. Constructor sin Parte Lógica, Z → ².
X → Y ∼ Etiqueta :
1. Elemento gráfico del que se conoce su ubicación por referencia a otro elemento o porque
siempre está en el mismo lugar.
2. Objeto visual que no tiene asociada una etiqueta, ya sea porque el lenguaje le asigna una
o porque no la requiere.
3. Ícono que internamente no está compuesto de
otros elementos visuales; en otras palabras, la
función Expansi·on no retorna elemento alguno. Este caso se emplea para modelar los literales visuales.
Tabla 1: Casos de constructores visuales modelados por las Gsig.
Finalmente, al resolver las especificaciones de los íconos en la ecuación 5 y empleando los
símbolos de delimitación ’(’ y ’)’ se tendría la gramática de la ecuación 6.
Ic′ → ∼ Etiqueta De Ic′ :
( ParteF ísica De Ic1 ∼ Etiqueta De Ic1 : ParteLógica De Ic1 , · · · )
(6)
3.4.2. Gram·atica de un Constructor Visual Simple.
A través de la ecuación 2, la definición 2 y la ecuación 4,
Se consigue la gramática para el constructor visual mostrado en la figura 3, presentada en la
ecuación 7.
Ic → ParteF ísica De Ic ∼ Etiqueta De Ic : E [[ Ex(Ic) ]] (7)
Y al emplear la producción que se indica en la ecuación 5,
Se llegaría a la gramática de la ecuación 8.
Ic → ParteF ísica De Ic ∼ Etiqueta De Ic : Ic′ (8)
3.4.3. Gram·atica de la composici·on de un Constructor Visual Simple y un Constructor Visual Compuesto.
Luego de la construcción de la gramática en la sección 3.4.1 del Constructor Visual Compuesto
presentado en la figura 1; y la gramática en la sección 3.4.2, del Constructor Visual Simple que se
1561
Programa Principal: P → Q Programa P compuesto por el Proceso Q.
Proceso: Q → Q | Q Proceso Q compuesto por procesos concurrentes.
Q → clone Q Proceso con condición de replicación.
Q → Q Proceso Q.
Fig. 5: Segmento de gramática del cálculo PiCO presentada en [1].
enmarca en la figura 3, se muestra en la ecuación 9 la gramática del par de constructores visuales, a
partir de las gramáticas planteadas en las ecuaciones 6 y 8.
Ic → ParteF ísica De Ic ∼ Etiqueta De Ic : Ic′
Ic′ → ∼ Etiqueta De Ic′ :
( ParteF ísica De Ic1 ∼ Etiqueta De Ic1 : ParteLógica De Ic1 , · · · )
(9)
Posteriormente, una transformación que favorece la comprensión de la gramática presentada en la
ecuación 9, es la de la inclusión de un no terminal por cada ícono del Constructor Visual Compuesto
{Ic1, · · · , Icn}, además de la adición de un identificador (que correspondería al símbolo de sincronización S mencionado en la ecuación 2) para cada categoría de íconos, así: 1 para Ic1, 2 para Ic2, ... y
n para Icn.
La gramática final es expuesta en la ecuación 10.
Ic → ParteF ísica De Ic ∼ Etiqueta De Ic : Ic′
Ic′ → ∼ Etiqueta De Ic′ : (Ic1 , · · · , Icn )
Ic1 → 1 ParteF ísica De Ic1 ∼ Etiqueta De Ic1 : ParteLógica De Ic1
...
Icn → n ParteF ísica De Icn ∼ Etiqueta De Icn : ParteLógica De Icn
(10)
4. EJEMPLO: EL LENGUAJE GRAPICO
En el grupo de investigación AVISPA, capítulo Universidad del Valle, actualmente se implementa
un nuevo cálculo computacional visual llamado GraPiCO, cálculo computacional de objetos concurrentes con restricciones basado en el cálculo PiCO, propuesto por el grupo AVISPA en [1]. En este
desarrollo se utilizan las gramáticas Gsig para especificar un programa visual GraPiCO y despues,
efectuar el proceso de compilación. Un segmento se presenta en la sección 4.1.
4.1. Programa Principal y procesos concurrentes en PiCO
En la figura 5 hay un fragmento de la gramática del cálculo PiCO introducido por el grupo AVISPA
en [1].
Dado que el segmento de gramática de la figura 5 es una representación para su divulgación, se
requiere el diseño de otra gramática en un formato que facilite emplear el cálculo PiCO como modelo
para la especificación textual de GraPiCO.
En la figura 6 se encuentra una gramática equivalente al segmento del cálculo PiCO presentado en la
figura 5 que cumple con las condiciones para LL(1), organizada de manera que cada una de las partes
1562
S → Lp .
Lp → ( C PRp | C P
Rp → | C PRp | )
C → clone | ²
Un programa en PiCO es una Lista de Procesos.
Una Lista de Procesos (Lp) puede ser: una serie
de Procesos o un único Proceso. Cada Proceso
está acompañado de una Condición de Replicación
(C).
Los Procesos (P ) son separados por el símbolo pipe (|), con este último se representa la concurrencia
entre Procesos.
La condición de replicación clone puede estar presente o no, dependiendo si queremos de la persistencia del Proceso.
Fig. 6: Gramática LL(1) del cálculo PiCO.
izquierdas de las producciones configure una etiqueta de un sintagma del lenguaje; la organización
también se efectuó con el fin de que cada una de las etiquetas que sean empleadas como parte izquierda
de varias producciones conformen un paradigma9 del lenguaje siguiendo la definición de los dos ejes
de Saussure expuestos en [5].
4.2. Gramática Gsig de un segmento de GraPiCO
Finalmente, se encontrará la gramática Gsig en forma LL(1) del segmento de gramática del cálculo PiCO de la figura 6. Como se aprecia visualmente en la figura 7 y formalmente en las producciones
de la figura 8 un programa está compuesto de una Parte Física, una imagen (referenciando el programa) con su respectiva localización, una etiqueta (identificación que el usuario le impone al ícono del
programa) y una Parte Lógica, conformada por el cuerpo del programa que es, a su vez, un conjunto de procesos concurrentes. De esta forma, para representar gramaticalmente lo anterior, dado que
la expansión del no terminal Programa debería mostrar su Parte Lógica, el símbolo → tiene dos
significados: el usual en gramáticas BNF y el de la Expansión. De manera similar, para modelar la
concurrencia (visualmente, procesos en una misma ventana) se emplea el operador |. La utilización
del operador | como símbolo de sincronización obedece al uso que se hace de este caracter en la
gramática original de PiCO y el deseo de continuar con la notación. No existe ambigüedad alguna entre este símbolo ni el usual en las gramáticas BNFE (para agrupación de varias partes derechas en una
parte izquierda), porque al ser la gramática de GraPiCO LL(1) cuando se emplea | como símbolo de
sincronización de especificaciones, siempre aparecerá como parte de PRIMERO10 de una producción;
mientras que, cuando | se emplea como separador de lados derechos, nunca se encontrará al inicio de
una parde derecha de alguna producción. Y así, se ha obtenido una Gsig (presentada en la figura 8)
para el segmento de Cálculo PiCO.
9Conjunto virtual de elementos de una misma clase gramatical que pueden aparecer en un mismo contexto.
10Conjunto de componentes léxicos que operan como los primeros símbolos de una o más cadenas generadas a partir
de la producción.
1563
a)
...
P3
P1
P2
P
b)
A D N
c)
...
P2
P3
P1
P2
A D N
A D N
Fig. 7: Programa principal y Replicación de procesos: a)Programa GRAPICO, compuesto por los
procesos concurrentes: P1, P2, P3, ... b) Operador icónico para la Replicación, b) Proceso P2 con
replicación.
Programa → { ParteF ísica ∼ Etiqueta : ParteLógicaPrograma }
ParteF ísica → ( Coordenadas) Imagen
ParteLógicaPrograma → ( Clonación Proceso ListaProcesos | Clonación Proceso
• ListaProcesos → | Clonación Proceso ListaProcesos | )
• Proceso → ParteF ísica ∼ Etiqueta : ParteLógicaProceso
• Clonación → ∗a | ²
aSímbolo de sincronización y literal para identificar la clonación de procesos (equivalente a clone en PiCO).
Fig. 8: Sección de gramática para Programa.
5. CONCLUSIONES
La forma de representación de las GPE requiere la inclusión de una gran cantidad de información operativa como la contenida en ∆ y Γ, incluso en los programas más simples. Por esto, si
se desea efectuar demostraciones matemáticas de propiedades linguiísticas, se requiere la modificación del código de almacenamiento a otro adecuado para el tratamiento formal. Todas
Gsig tienen forma LL(1), por lo tanto, la especificación de un constructor visual posibilita una
forma de análisis de lenguajes mediante conocidas técnicas para códigos textuales. De igual
manera, su estructura permite efectuar una traducción dirigida por la sintaxis y los tratamientos
matemáticos requeridos para demostrar características formales del lenguaje.
El almacenamiento de código en las GPE, es un tema que no se tiene en la cuenta. Todavía no
existe una relación simétrica de traducción entre el Programa Visual y su representación gramatical; pues se presenta una forma de plasmar el primero en el segundo, pero no es directa
la operación inversa. Para las Gsig el código generado es una representación textual apta pa1564
ra el almacenamiento, porque su estructura ayuda en la recuperación de los dibujos desde su
especificación.
En las GPE la etapa de Parsing requiere la implementación de un programa nada sencillo y las
etapas posteriores, como el análisis semántico y la traducción de código, requieren soluciones
que aún no se han descubierto. La creación de la especificación gramatical con Gsig puede
ser vista como un procedimiento bastante mecánico si se cuenta con la gramática del cálculo
computacional del Lenguaje de Programación Visual en diseño.
Como las GPE emplean una notación LR(k) mientras que las Gsig una LL(1), las GPE especifican un superconjunto de los lenguajes de las Gsig, pero debido al nivel de generalidad de las
GPE, en ocasiones, como el caso de GraPiCO; el esfuerzo que acarrea el empleo de una GPE,
no es acorde a su utilidad.
