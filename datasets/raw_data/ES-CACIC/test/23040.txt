Segmentación de imágenes SAR usando filtros Stack y curvas B spline
﻿Las imágenes generadas con sistemas de iluminación coherente, como las de
Radar de Apertura Sintética (SAR) son muy difíciles de segmentar porque poseen ruido speckle. El ruido speckle es especialmente complejo de remover, debido a su naturaleza no aditiva.
Estas imágenes pueden tener zonas homogéneas, heterogéneas o muy heterogéneas, correspondientes a zonas de pastura, bosque o urbanas, respectivamente. La extracción de los bordes
entre las diferentes regiones es un tema importante en análisis de imágenes y se utiliza en diversas aplicaciones. En este trabajo se presenta la aplicación de un filtro adaptativo no lineal,
denominado stack filter, que tiene el objetivo de remover el ruido speckle y mejorar la imagen
para facilitar la búsqueda de características. Está basado en el entrenamiento con dos imágenes,
una que se supone ideal (sin ruido) y otra imagen con un ruido speckle. Con el fin de hallar
bordes de diferentes regiones en la imagen, se aplica un algoritmo de extracción de contornos
basado en curvas B-spline y una distribución estadística adecuada. El algoritmo propuesto se
aplica a imágenes SAR reales y se obtienen muy buenos resultados.
1. Introducción
Los filtros stack son un caso especial de filtros no lineales. Tienen buena performance para
filtrado de imágenes con distintos tipos de ruido preservando bordes y detalles. Estos filtros
consisten en una descomposición por umbrales de la señal de entrada, obteniéndose una señal
binaria para cada uno de ellos, y en una aplicación de un filtro a cada una de esas señales por
medio de una ventana deslizante.
Este filtro se genera por medio de un algoritmo adaptativo, de manera que cumpla con la
propiedad de stacking. El método propuesto en este trabajo está basado en el algoritmo de Yoo
et al. [9], adaptado a imágenes SAR.
Por otro lado las imágenes SAR poseen ruido speckle lo cual hace que sean muy difíciles de
interpretar por su naturaleza multiplicativa. El ruido speckle es no-aditivo, no gaussiano y es
lo que le da a la imagen esa apariencia granulada. Los métodos clásicos de procesamiento de
imágenes no pueden aplicarse en imágenes SAR porque utilizan la información local presente en
un pixel. El ruido speckle es la razón por la cual debe utilizarse la información sobre regiones.
El análisis de este tipo de imágenes ha sido tratado en la literatura con diversos métodos
estadísticos (ver por ejemplo, [5], [7], [4], [3]). En este trabajo se aplica el filtro para segmentar
imágenes con ruido speckle. Se remueve el ruido para luego encontrar contornos de regiones
utilizando un algoritmo de curvas B-spline deformables basado en regiones, combinado con un
modelo estadístico.
Este artículo está organizado de la siguiente manera: En la sección 2 se explican los principios de
los filtros stack. En la sección 3 se presenta el algoritmo desarrollado para encontrar fronteras de
regiones. En la sección 4 se introduce la justificación de las distribuciones estadísticas utilizadas
en la segmentación. En la sección 5 se muestran los resultados obtenidos, y finalmente, en la
sección 6 se presentan las conclusiones.
2. Los Filtros Stack: Definiciones y Diseño
En esta sección se presenta una breve síntesis de filtros stack. Para obtener una información más detallada sobre este tema, consultar [1]. En primer lugar se exponen las definiciones
necesarias para explicar este tipo de filtros. Luego se introduce una síntesis de algoritmos adaptativos.
Definición 1
El operador de umbral Tm : {0, 1, . . . ,M} → {0, 1} está dado por
Tm(x) =
{
1 si x ≥ m
0 si x < m , (1)
con M,m ∈ Z y donde m es el valor del umbral. Denotaremos
Xm = Tm(x). (2)
De acuerdo a esta definición, el valor de un entero x ∈ {0, 1, . . . ,M} puede ser reconstruido
realizando la sumatoria de sus valores umbralados entre 0 y M . La fórmula correspondiente a
esta operación es
x =
M∑
m=1
Xm. (3)
La Figura 1 muestra un diagrama de descomposición de umbrales para una señal unidimensional.
El operador de umbral puede extenderse a señales bi-dimensionales.
Definición 2
Sean X= (x0, . . . , xn−1) e Y= (y0, . . . , yn−1) vectores binarios de longitud n. Se define una
relación ≤ dada por
X ≤ Y si y sólo si ∀i, xi ≤ yi. (4)
Esta relación es reflexiva, antisimétrica y transitiva, constituyendo así un ordenamiento parcial
sobre el conjunto de vectores binarios de longitud fija.
Figura 1: Ejemplo de descomposición por umbrales
Definición 3
Una función booleana f : {0, 1}n → {0, 1}, donde n es la longitud de los vectores de entrada,
posee la propiedad de stacking sii se cumple que
∀X,Y ∈ {0, 1}n , X ≤ Y ⇒ f (X) ≤ f (Y ) . (5)
Definición 4
Diremos que f es una función booleana positiva si y sólo si puede ser escrita mediante una
expresión que contenga solamente variables de entrada no complementadas. O sea,
f (x1, x2, . . . , xn) =
K∨
i=1
∧
j∈Pi
xj, (6)
donde N es el número de argumentos de la función, K es la cantidad de términos de la
expresión y los Pi son subconjuntos del intervalo {1, . . . , N}.
∨
y
∧
son los operadores booleanos
AND y OR. Se puede probar que este tipo de funciones posee la propiedad de stacking.
Si la función f utilizada para realizar el filtrado de una imagen X cumple con la propiedad
de stacking, entonces de (4) y (5) se deduce que, para dos imágenes binarias X i y Xj, obtenidas
de X como resultado de la aplicación de los umbrales T i y T j respectivamente, resulta
i ≥ j ⇒ X i ≤ Xj ⇒ f
(
X i
)
≤ f
(
Xj
)
. (7)
Un filtro stack está definido por la función Sf : {0, . . . ,M}n → {0, . . . ,M}, correspondiente
a la función Booleana positiva f (x1, x2, . . . , xn) expresada en la forma dada por (6). La función
Sf puede ser expresada mediante
Sf (X) =
M∑
m=1
f (Tm (X)) (8)
En el diseño de los filtros stack, la generación de la función booleana correspondiente tiene
especial importancia. Varios autores han propuesto diversos métodos para esta tarea. Se destacan los algoritmos adaptativos (basados en entrenamiento) pero anteriormente a estos se habían
desarrollado algoritmos para el diseño de stack filters que requerían conocimiento estadístico
detallado (estadísticas de cruce de nivel). En todos los casos el objetivo es conseguir una función
booleana positiva que cumpla la propiedad de stacking.
La función booleana positiva se obtiene por medio de un algoritmo que realiza cambios de estado hasta alcanzar su estado final que cumpla con las propiedades mencionadas anteriormente.
Resulta, entonces, un algoritmo iterativo que genera una función booleana positiva óptima para
el filtrado de un tipo de imágenes dado. La actualización, en cada paso se hace en el sentido de
la minimización del error entre la imagen filtrada y la imagen deseada (imagen ideal).
Un algoritmo adaptativo de referencia puede verse en [9].
3. Detección de Bordes
En esta sección se describe un algoritmo desarrollado para detección de bordes, usando
contornos B-spline deformables y una distribución estadística que describa los datos. En la
sección 3.1 se presenta un breve resumen de curvas B-spline, en la sección 3.2 se muestra el
algoritmo de detección de bordes.
3.1. Representación B-spline para curvas
La representación B-spline para curvas es muy utilizada en procesamiento de imágenes,
computación gráfica y visión, porque provee una herramienta muy eficaz en la descripción de
curvas. En este trabajo se utiliza la representación B-spline para curvas con el propósito de
describir el contorno de los objetos. Esta formulación tiene varias ventajas:
1. La curva queda representada por sus puntos de control, lo cual reduce la cantidad de
parámetros y por lo tanto el costo computacional. Esto implica, por ejemplo, que si se
quiere aplicar una transformación afín (rotación, traslación, escalamiento) a la curva, es
suficiente aplicarla a sus puntos de control.
2. Puede elegirse el orden de la curva de acuerdo a la suavidad necesaria para el contorno
del objeto de interés.
3. Dada su característica de control local, permite modificar la curva localmente por medio
de sus puntos de control.
4. Tiene la propiedad de la cápsula convexa, esto impide divergencias en la curva y gráficos
fuera del viewport.
En esta sección se presenta un breve resumen de la representación B-spline de contornos y de la
interpolación de puntos por medio de B-spline utilizado para el ajuste; para más detalles sobre
este tema consultar [2, 8].
Sea {Q0, ..., QNB−1} un conjunto de puntos de control, donde Qn = (xn, yn)t ∈ R2, 0 ≤ n ≤
NB − 1, y sea {s0 < s1 < s2 < . . . < sL−1} ⊂ R un conjunto de L nodos. Una curva B-spline
de orden d se define como una suma ponderada de NB funciones polinomiales Bn,d(s) de grado
d − 1, dentro del intervalo [si, si+1] con 0 ≤ i ≤ L − 1. La curva B-spline se contruye como
r(s) = (x(s), y(s))t, 0 ≤ s ≤ L− 1, siendo
r(s) =
NB−1∑
n=0
Bn,d(s)Qn, (9)
yx(s) = Bt(s).Qx (10)
y(s) = Bt(s).Qy (11)
donde el vector de funciones base B(s) de NB componentes está dado por B(s) =
(B0,d(s), . . . ,BNB−1,d(s))t. Los vectores de pesos Qx y Qy son las primeras y segundas componentes de Qn, respectivamente.
Las curvas usadas en este trabajo para extracción de contornos son cerradas, de orden d = 3
ó d = 4, especificadas por funciones B-spline periódicas.
Para resolver el problema de encontrar los NB puntos de control de una curva B-spline que
ajuste un contorno, utilizamos el siguiente esquema desarrollado en [8].
Dado un conjunto de k puntos en el plano de la imagen {D0, D1, . . . , Dk−1}, donde Di =
(xi, yi)t, i = 0, . . . , k − 1, buscamos la curva B-spline de NB puntos de control que mejor los
ajusta. Entonces, por las ecuaciones 10 y 11, las componentes Di deben satisfacer
xi = Bt(ti)Qx, (12)
yi = Bt(ti)Qy, (13)
para ciertos valores de ti, donde i = 0, . . . , k − 1 y NB ≤ k.
Este sistema lineal puede ser escrito en forma matricial como D = K(Qx Qy), donde
los k × NB elementos de la matriz K están dados por Kij = Bj,d(ti), con i = 0, . . . , k − 1,
j = 0, . . . , NB − 1, y D = (D0, D1, . . . , Dk)t.
En el caso más general es NB < k y por lo tanto K no es una matriz cuadrada. En este
caso se utiliza la matriz pseudo-inversa para encontrar una solución aproximada del sistema,
de donde resulta
(Qx Qy) = K+D
El conjunto de valores de los parámetros {t0, . . . , tk−1} está dado por
t0 = 0, ; t =
∑
i=1 ‖Di −Di−1‖∑k−1
i=1 ‖Di −Di−1‖
,  ≥ 1.
3.2. Algoritmo de Rectas Radiales para Detección de Puntos de
Borde
Sea E : R2 → R una escena compuesta por el fondo B y un conjunto de regiones
{R1, R2, . . . , Rk} con sus respectivas fronteras {∂R1, ..., ∂Rk}. Deseamos encontrar curvas Cj
que ajusten al borde cada región ∂Rj, j = 1, ..., k, en la imagen. Cada una de estas regiones y
el fondo son consideradas como campos aleatorios de variables aleatorias independientes e identicamente distribuidas con distribución D y caracterizadas por los valores de sus parámetros
estadísticos λ1, . . . , λD.
En el primer paso se encuentra una aproximación de estas regiones, las cuales son consideradas de interés y usadas para inicializar métodos de aplicación posterior. Definimos un área
inicial de búsqueda por medio de polígonos cuyos vértices son puntos de control que generan
una curva B-spline. Una vez que las zonas de búsqueda inicial son determinadas se calcula su
centroide.
Si un punto pertenece al borde del objeto entonces en un entorno de ese punto existe un
cambio en los parámetros estadísticos de la muestra y por lo tanto es un punto de transición. Se
consideran N segmentos sobre la imagen, s(i), i ∈ {1, ..., N}, de la forma s(i) = CPi donde C es el
centroide de la región inicial, el extremo Pi es un punto fuera de la región y θ = ang
(
s(i), s(i+1)
)
∀i es el ángulo entre dos segmentos sucesivos.
El segmento s(i) es un arreglo cuyos elementos provienen de la discretización de la línea
sobre la imagen.
s(i) =
(
z(i)1 , . . . , z(i)m
)
, (14)
Dado un segmento s(i) consideramos la siguiente partición
Z(i)k ∼ D (λ1r, . . . , λNr) , k = 1, . . . , j
Z(i)k ∼ D (λ1b, . . . , λNb) , k = j + 1, . . . ,m
donde para cada k, z(i)k es la realización de la variable aleatoria Z
(i)
k . Los parámetros
(λ1r, . . . , λNr) and (λ1b, . . . , λNb) caracterizan a la región y al fondo, respectivamente. Para
encontrar los puntos de transición sobre cada segmento, consideramos una función  para cada
segmento s(i), donde  es una función de verosimilitud de la muestra, dada por:
(z, λ1r, . . . , λNr, λ1b, . . . , λNb) =
j∏
i=0
Pr(zi;λ1r, . . . , λNr)
m∏
i=j+1
Pr(zi;λ1b, . . . , λNb)
Para encontrar el punto de transición, maximizamos L = ln :
L =
j∑
i=0
ln(fD (zi;λ1r, . . . , λNr)) +
m∑
i=j+1
ln(fD (zi;λ1b, . . . , λNb))
donde fD es la función de densidad de la distribución D. Luego, la estimación del índice ̂ que
corresponde al punto de borde bi, sobre el segmento s(i) está dado por:
̂ = argmáx
j
L (15)
Estimamos los parámetros estadísticos procesando los pixels dentro de una ventana
rectangular. La dirección del eje mayor de la ventana coincide con el segmento procesado. La
ventana incluye una muestra de la región y otra del fondo. Estas muestras son utilizadas para
estimar los parámetros (λ1r, . . . , λNr) y (λ1b, . . . , λNb) respectivamente.
En el caso de que la ventana rectangular esté totalmente incluida dentro de la región o
totalmente incluida en el fondo, los parámetros que se estimen no corresponderán a diferentes
regiones y el proceso de encontrar los puntos de borde {b1...bN} debe ser reconsiderado
buscando otra posición para el centro de la ventana.
El Algoritmo 1 muestra el resumen del proceso de detección de bordes.
Algorithm 1 Algoritmo de Detección de Bordes
1: Determinar la región de interés por medio de
una curva b-spline.
2: Determinar una serie de segmentos radiales sobre la imagen.
3: for cada segmento do
4: Estimar los parámetros estadísticos de la distribución.
5: Encontrar los puntos de borde bi resolviendo la Ec. 15.
6: end for
7: Construir la curva b-spline interpolante para el conjunto de puntos {b1, . . . , bN}.
4. Detección de Bordes en Imágenes Filtradas
El algoritmo de detección de bordes descripto en la sección 3 utiliza un modelo estadístico
para caracterizar las distintas regiones de la imagen basados en el grado de homogeneidad de
sus datos. Por ejemplo, en el caso de las imágenes SAR monopolarizadas sin filtrar, se puede
trabajar con la distribución G, como se describe en los artículos [3] y [4]. En el trabajo de
Germain et al. [5] el autor utiliza la distribución Γ para ajustar estos datos. En el trabajo
recientemente presentado, [6] se prueba que para imágenes SAR polarimétricas la distribución
G polarimétrica tiene un muy buen comportamiento.
Para poder aplicar el algoritmo descripto en la sección 3 es necesario elegir una distribución
adecuada para los datos con los que se está trabajando, que corresponden a datos SAR filtrados
con el filtro stack. Para elegir la distribución, realizamos el siguiente experimento.
Se toman 100 imágenes sintéticas de 128× 64 cada una generada con la distribución G0A con
parámetros α1 = −1,5, γ1 = 1. Se procesa cada una de las imágenes con sus respectivos filtros
obtenidos en la fase de entrenamiento, como se explica en la sección 2, utilizando la media de los
datos como imagen a obtener (imagen ideal). Observamos que después de filtrar las imágenes,
el skewness de los datos se reduce, acercándose a cero, lo que indica que la distribución de
los niveles de gris de la imagen, después de ser filtrada se acerca a un modelo gaussiano (ver
apéndice A). Por esa razón, se utiliza en este trabajo, la distribución normal para modelar los
datos de la imagen filtrada.
La Figura 2 muestra el tipo de imágenes que se utilizaron para evaluar los datos y elegir
la distribución. La Figura 2(a) muestra una imagen sintética original generada con el modelo
estadístico G0A. La Figura 2(b) muestra el nivel de gris correspondiente a la media de los datos.
La Figura 2(c) muestra la imagen filtrada.
El Cuadro 1 muestra los valores del skewness para 10 de las imágenes utilizadas. La primer
fila corresponde al skewness de la imagen sin filtrar y la segunda al de la imagen filtrada. Se
observa que se reduce el valor en la segunda fila, acercándose a cero.
Skewness Original 0.84 0.83 0.81 0.86 0.85 0.88 0.85 0.90 0.86 0.93
Skewness Filtrada 0.16 0.20 0.18 0.13 0.23 0.13 0.13 0.17 0.15 0.16
Cuadro 1: Skewness calculado para 10 de las imágenes filtradas.
Los resultados de aplicar el algoritmo completo a imágenes SAR reales se muestran en la
sección 5.
(a) Imagen sintética
original .
(b) Imagen de la media
de los datos de la imagen 2(a).
(c) Imagen filtrada con
el filtro stack obtenido,
entrenado con 2(a)
y 2(b).
Figura 2: Ejemplo de las imágenes sintéticas generadas para entrenar el filtro.
5. Resultados
En esta sección se presentan los resultados obtenidos al aplicar el algoritmo a una imagen
SAR real. La Figura 3(a) corresponde a la imagen SAR original. La Figura 3(b) corresponde
a la imagen filtrada usando la media de los datos de entrada para cada región. La Figura 3(c)
es el resultado de aplicar el algoritmo de detección de contornos descripto en la sección 3.
6. Conclusiones y Trabajo Futuro
En este trabajo se presenta un método para detectar el contorno de regiones en imágenes
con ruido speckle. En primer lugar se aplica a la imagen un filtro stack que suaviza el ruido
speckle. Este filtro se entrena usando la media de las diferentes regiones. Para encontrar el
contorno se aplica un algoritmo de detección de borde, basado en curvas b-spline deformables.
Este proceso es eficiente en la extracción de contornos de regiones. En este momento estamos
trabajando en la utilización de otras medidas estadísticas, como la kurtosis, para demostrar que
la distribución normal ajusta a los datos filtrados. El siguiente paso es poder aplicar el filtro
dentro de una región de interés, de forma tal que el algoritmo de filtrado no tenga que analizar
toda la imagen, sino aquellas áreas donde se encuentran los bordes.
A. Apéndice: Medida de Skewness
Una tarea importante en muchos análisis estadísticos es caracterizar la ubicación y variabilidad de un conjunto de datos. Un estudio en este sentido, incluye el cálculo y análisis de
skewness.
(a) Imagen SAR real. (b) Imagen filtrada entrenando con la
media de los datos de entrada.
(c) Detección del borde entre las diferentes regiones
Figura 3: Resultado de aplicar el algoritmo para detección de bordes entre diferentes regiones.
Skewness es una medida de simetría del conjunto.
Para datos univariados Y1, Y2, . . . , YN , la fórmula de skewness es:
SK =
