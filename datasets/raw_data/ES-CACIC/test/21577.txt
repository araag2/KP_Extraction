Descripción VHDL de un microcontrolador
﻿
 
En este trabajo se presenta una descripción utilizando el lenguaje de descripción de hardware 
VHDL (Very High Speed Integrated Circuit Hardware Description Language - VHSIC HDL) de un 
microcontrolador. Se define una estructura interconectada de componentes para describir la mayor 
parte los integrantes de una familia de microcontroladores comerciales. Cada componente y la 
estructura propuesta fueron simulados y sus resultados fueron los esperados. Dado que los 
elementos que constituyen el microcontrolador tienen las características de un sistema complejo 
(CPU, Memoria y puertos de E/S), la implementación física de un modelo completo nos llevaría a  
obtener un sistema en chip (System On a Chip - SOC). La descripción completa también permite 
definir un módulo IP utilizable en diseños con lógica programable. 
 
 
Palabras claves: VHDL, Microcontrolador, RISC, System On a chip (SOC), Lógica programable. 
 
 
 
Abstract 
 
In this paper a microcontroller description in Very High Speed Integrated Circuit Hardware 
Description Language (VHDL) is presented. An interconnected component-based structure is 
defined to include most members of a commercial microcontroller family. Every component and the 
proposed structure were simulated and its results were the awaited ones. Provided that the elements 
that constitute the microcontroller have the characteristics of a complex system (CPU, Memory and 
I/O's ports), the physical implementation of a complete model would lead us to obtain a system on a 
chip (SOC). The whole description also defines an IP module usable in programmable logic 
designs. 
 
 
Keywords: VHDL, Microcontroller, RISC, System On a chip (SOC), Programmable logic. 
1 INTRODUCCIÓN 
 
En la actualidad, cuando se desarrolla un dispositivo comercial se busca la mejora en la calidad de 
los diseños obtenidos y el incremento de la productividad. Asimismo, la necesidad de integrar 
sistemas cada vez más complejos en dimensiones más reducidas y con menores tiempos de 
desarrollo ha llevado a tener que desarrollar técnicas y metodologías de trabajo que permitan 
obtener una mayor productividad. Este objetivo ha dado lugar a un desarrollo cada vez más 
orientado al diseño de módulos que puedan ser reutilizados, con el fin de alcanzar nuevos modos, 
no para diseñar más rápido sino para diseñar menos.  
 
El constante avance tecnológico y las características del desarrollo motivaron la aparición en el 
mercado de sistemas en un chip (System On a Chip - SOC), que como su nombre indica son 
soluciones que integren en un único chip todo un sistema. Las nuevas metodologías de diseño 
basadas en SOC se fundamentan en la existencia de librerías con bloques pre-diseñados y preverificados que poseen propiedad intelectual y se denominan bloques de “Intellectual Property” 
(IP). La reusabilidad de los bloques IP es uno de los tópicos que facilita la creación de un nuevo 
SOC [1][2][3][4]. 
 
Los dispositivos de Lógica Programable, que en la actualidad superan el millón de compuertas, son 
una excelente opción para la implementación de soluciones integradas System on Programmable 
Chip (SOPC) debido a la flexibilidad de la personalización de los mismos luego de la fabricación. 
Es importante entender que cualquier diseño SOPC involucra un conjunto complejo de decisiones 
de diseño hardware-software, teniendo en cuenta el costo del producto, la flexibilidad del mismo y 
las restricciones que puedan existir dependiendo del escenario donde se desarrollare el proyecto [5].  
 
Una de las decisiones es la selección del procesador del sistema. Algunas compañías ofrecen los 
mismos como soluciones ‘soft-core’ con descripciones de procesadores propietarios (NIOS [6]) o 
estándar (8051 y otros [7]). También ofrecen soluciones ‘hard-core’ para el caso de aplicaciones 
intensivas, con procesadores de alta prestación pregrabados (como MIPS32_4Kc o ARM922 [8]). 
 
Otra decisión posible es la utilización de módulos IP de biblioteca que cumplan y provean 
determinadas funcionalidades útiles para el proyecto en diseño. En este artículo se realiza una 
descripción en VHDL de un procesador con arquitectura RISC para ser implantado en un 
dispositivo de lógica programable y que pueda ser utilizado como elemento de biblioteca IP. 
 
2  DISEÑO DE UN BLOQUE IP 
 
Como se mencionó en la sección anterior la existencia de bibliotecas con módulos IP son el 
mecanismo por el cual las soluciones SOC/SOPC evolucionan constantemente y la información y 
acceso a las distintas soluciones IP de mercado puede obtenerse en forma rápida [9]. También se 
pueden mencionar diseños y propuestas realizadas de módulos IP con objetivos académicos [10] 
[11] a los cuales nos propusimos complementar mediante el diseño de un elemento procesador con 
características de arquitectura y programación diferentes a los mas difundidos. Nuestro propósito 
fué describir un sistema con arquitectura Harvard con un procesador de conjunto de instrucciones 
reducido (RISC) [15]. 
 
2.1  Características Harvard y RISC 
 
Una arquitectura tipo Harvard, posee la memoria de programa separada de la memoria de datos, es 
decir, el procesador (CPU) ejecuta las instrucciones que se encuentran en su memoria de programa, 
y por otra vía separada accede a los datos necesarios para su ejecución (Figura 1). Un procesador 
RISC posee un conjunto de instrucciones acotado (reducido), con acciones muy específicas y la 
unidad de control podría ser más sencilla, y ocuparía mucho menos espacio físico (superficie del 
circuito integrado) que un procesador de conjunto complejo de instrucciones (CISC).  
 
MEMORIA DE 
DATOS 
RAM 
 
B
U
S
 D
E 
D
IR
EC
C
IO
N
ES
 P
A
R
A
 D
A
TO
S
Por lo tanto, implementar un sistema de este tipo e integrarlo como un bloque IP dentro de un 
dispositivo de lógica programable ampliaría la oferta de soluciones obtenibles en SOC.  
 
2.2  Microcontrolador 
 
Un microcontrolador, como su nombre indica, está destinado a controlar un sistema determinado, o 
una parte del mismo. Tiene un único objetivo, ejecutar el programa en su memoria y controlar así el 
sistema donde esté incluido. Dadas estas características, su capacidad de procesamiento es limitada 
(poca variedad en el conjunto de instrucciones), necesita memoria de programa (ROM), elementos 
de almacenamiento temporal (registros y/o RAM) y requiere variada interconexión con el medio 
que lo rodea (distintos puertos de entrada/salida) e inclusive poseen temporizadores y conversores 
A/D o D/A todos en un mismo chip. En versiones complejas un microcontrolador puede ser visto 
como un sistema en si mismo. En nuestra búsqueda de un elemento tipo nos centramos en los 
difundidos microcontroladores de la empresa Microchip [16]. 
 
2.3 Descripción del Bloque IP  
 
El uso de un lenguaje para la descripción de hardware como el VHDL [12][13] nos permite diseñar, 
modelar, y comprobar sistemas de variado objetivo como [14], [11] o [10] desde un alto nivel de 
abstracción bajando hasta el nivel de definición estructural de puertas utilizando metodología TopDown. Es decir, describir (por modelado) el comportamiento de bloques de alto nivel, analizarlos 
(por simulación), y refinar la funcionalidad de alto nivel requerida antes de llegar a niveles más 
bajos de abstracción de la implementación del diseño y su síntesis en lógica programable.  
Figura 1: Arquitectura simplificada de un procesador de tipo Harvard. 
MEMORIA DE 
PROGRAMA 
ROM 
CPU 
UNIDAD 
E/S 
B
U
S
 D
E 
D
IR
EC
C
IO
N
ES
 
PA
R
A
 I
N
S
TR
U
C
C
IO
N
ES
 
B
U
S
 I
N
S
TR
U
C
C
IO
N
ES
 
B
U
S
 D
E 
D
A
TO
S
 
 
3 ARQUITECTURA DE LA FAMILIA PIC17C4X 
 
Los microcontroladores de la familia PIC17X son de alta gama con palabras de 8 bits e 
strucciones de 16 bits, arquitectura RISC (58 instrucciones simples) y modelo Harvard. Utilizan 
gura 2. En ella se observa la memoria de datos 
ATA RAM) que engloba los registros especiales (SFR) y los de propósito general (GPR) y la 
4 DESCRIPCIÓN EN
e la hoja de datos del microcontrolador 
rovista por el fabricante y con ella desarrollamos la arquitectura de componentes a utilizar para 
in
segmentación (“pipeline”) en la ejecución de las instrucciones (que son ortogonales), poseen una 
pila con profundidad de 16 niveles, direccionamiento directo, indirecto e inmediato para datos e 
instrucciones. Pueden tener hasta 454 registros de propósito general (memoria de datos RAM) y 
direccionan hasta 8Kx16 de memoria de programa (EPROM/ROM). También, poseen multiplicador 
8x8 en hardware y controlador de interrupciones. 
 
La arquitectura de los PIC17X se muestra la Fi
(D
memoria de programa (PROGRAM MEMORY). La ALU de 8 bits permite realizar operaciones 
aritméticas y lógicas entre el Registro de Trabajo (WREG) y otro registro. También, se observan los 
numerosos periféricos que posee esta familia como los Timer y la puerta serie.  
Figura 2: Arquitectura de un microcontrolador PIC17C4X 
 
 VHDL DEL PIC17C4X 
 
Como vemos en la sección anterior, tomamos como bas
p
describir en VHDL el microcontrolador. 
 
Algunos componentes, no han sido descriptos como el multiplicador por hardware, el Perro 
uardián (Watch Dog), los Timers adicionales que poseen este tipo de microcontroladores y la pila. 
 
Figura 3: Arquitectura del microcontrolador descripto en VHDL 
 
A continuación describ
 e independiente del reloj. La Figura 4 muestra un esquema 
e las señales que ingresan y egresan del mismo. 
La unidad implem gicas tales como 
a y SWAP, operaciones 
Figura 4: Unidad Aritmético Lógica (ALU) 
G
El esqueleto del diseño se basa en lo que denominamos BUS A, BUS B y BUS C. Todas las 
instrucciones se ejecutan en un ciclo de CLK, excepto las de salto, que duran dos. La Figura 3  
presenta un esquema de los componentes de la implementación en VHDL del microcontrolador 
PIC17C42. 
 
Registro 
Acumulador 
PC
Mem Datos
Mem Programa Reg de 
Instrucción 
Registro de 
Indirección 
Bus A 
Bus B
Bus C
ALU 
Unidad de 
Control 
Reg de  
estado 
imos brevemente algunos de los bloques. 
 
4.1 Unidad aritmética lógica (ALU) 
 
La ALU, es un sistema combinacional
d
BUS C 
Cod_Op 
Reset  
c, dc, ov, z, c_old_en, 
c_rn, ov_en, z_en   
Skip, c_out, dc_out, 
ov_out, z_out 
ALU 
BUS A BUS B 
entada puede realizar operaciones aritméticas de suma y resta, ló
not, and, or y xor, de desplazamiento como rotación a izquierda, a derech
orientadas a bit.y de transferencia. La ALU descripta tiene asociada un registro de estado que 
guarda la configuración de la ALU. Es mismo es un registro de 8 bits en los que los cuatro bits más 
significativos están dedicados a definir el modo de direccionamiento indirecto y en los restantes 4 
se encuentran las tradicionales banderas: C (Carry), Z (Zero), DC (Digit Carry) y OV (Overflow). 
 
4.2 Unidad de Control (UC) 
 
Es el bloque encargado de decodificar las instrucciones y generar una secuencia de ordenes 
ctivación de señales) para ejecutarlas. En la Figura 5 se puede observar que recibe una señal 
paralelo. La prim  en la 
UB)  
 
.3 Co or de programa (RegPC) 
e la unidad descripta cuya función es sumar ‘1’ al contenido 
el registro cada vez que se ejecuta una instrucción. La salida es tomada por el bloque de la 
 
 ToSignal, PdSignal, Glintd 
(a
CodOP[15:0] proveniente del registro de instrucción, en función de esta señal de entrada, generará 
las micro-instrucciones necesarias para que se complete la instrucción. Es un bloque combinatorio.  
Clock, skip 
La estructura de este bloque en VHDL la dividimos en dos partes bien diferenciadas, que actúan en 
era parte determina cual es el registro involucrado en la instrucción, tanto
entrada como en la salida y genera las señales que corresponda en cada caso. La segunda parte del 
bloque describe el decodificador de instrucciones y su código VHDL tiene una estructura de tipo 
IF-THEN-ELSIF para verificar que instrucción debe decodificarse: 
SI (Instrucción = ADD)  
ENTONCES Activación de las señales que ejecuten ADD 
SINO-SI (Instrucción = S
ENTONCES Activación de las señales que ejecuten SUB 
 …. 
4 ntad
 
En la Figura 6 se observan las señales d
d
memoria de programa (ROM) para ubicar la instrucción que debe enviarse a la unidad de control. 
 O_wreg_a, o_wreg_b 
Figura 5: Unidad de Control
 c, dc, ov, z, c_old  
UC CodOP 
 O_imm_en, imm_select 
 I_wreg_SALIDA 
 Pc_o, pclath_o 
 Cpusta_o, memdato_o 
 Pc_w, pclath_w 
 Cpusta_w, memdato_w 
 GC_en0, GC_en1, GC_enF 
 GC_select 
 CodALU 
Clock, reset 
RegPC pch_out_en, pcl_out_en 
data_out 
pch_write_en, pcl_write_en 
addr_in 
load, skip addr_out 
Fi
data_in 
gura 6: Registro PC
4.4 Registro de trabajo (RegAcum) 
a Figura 7 muestra que a este registro de 8 bits ingresarán sólo 3 señales de control. Dos para 
El cuerpo principal de la descripción ía ser: 
en 
='1' and t='0' then 
 when selectA='1' or selectB='1'; 
 
.6 Memoria de datos (RAM) 
ste bloque consiste de registros de propósito general que definen la memoria de datos. Recibe 
 
.7 Memori
ste bloque es una memoria ROM convencional, donde debe residir el programa a ejecutar. Recibe 
os contenidos de las celdas de ROM son los valores binarios obtenidos por herramientas de 
Figura 7: Registro Acumulador 
 
L
habilitar las salidas a BUS A y BUS B. La tercer señal habilita la escritura del registro desde BUS C 
clock 
 en VHDL del registro podr
Process (clock, read_en, busC_in) 
  begin 
ock'event and clock='1' th  if cl
    t <='0'; 
  end if; 
en if  read_
    W_Reg <= busC_in; 
    t <= '1'; 
 end if; 
  end process; 
 Bus_out <= W_Reg
4
 
E
señales de control que le indican cuando realizar una acción de escritura o de lectura y posee los 
canales de comunicación que permiten seleccionar el registro dentro del bloque con el cual se debe 
operar. La Figura 8 muestra las señales que ingresan y egresan del bloque que denominamos RAM.  
4 a de programa (ROM) 
 
E
la dirección de la celda buscada (generada por el registro PC con pc_in[15:0]) y devuelve el binario 
almacenado en esa celda (código de máquina de una instrucción en inst_out[15:0]) que se 
transferirá al registro de instrucción. 
 
L
RegAcum selectA, selectB 
read_en 
bus_out 
Figura 8: Memoria de datos RAM 
busC_in 
clock, reset 
RAM 
data_out Out_en, Write_en 
read_en 
data_In 
FSN_In 
ensamblado ó compilación que realizan traducción a código de instrucciones de máquina del 
microcontrolador de instrucciones en lenguaje assembly ó sentencias de un lenguaje de alto nivel. 
Para realizar esta tarea de una forma amigable al programador se desarrolló una herramienta que 
permite generar la descripción del bloque en VHDL del componente de memoria de programa del 
microcontrolador de una forma rápida y sencilla; garantizando que la traducción de las 
instrucciones escritas en assembly del microcontrolador a su respectivo código de máquina se 
realiza en forma correcta. De este modo el programador debe centrarse únicamente en la lógica del 
algoritmo que se cargará en la ROM y desentenderse del problema de la traducción de cada una de 
las instrucciones. 
 
Un ejemplo de la descripción de este módulo puede ser como la siguiente: 
in);  
when int = 0 else  
 
 PRUEBAS REALIZADAS 
e diseñaron diferentes tipos de pruebas que permitieron verificar el funcionamiento de cada uno de 
n cada una de las pruebas, se utilizaron diferentes secuencias de instrucciones a ejecutar y verificar 
 continuación se muestran dos de los resultados obtenidos luego de las simulaciones efectuadas 
.1 Ejemplo de prueba 1: operación suma sobre registro de trabajo 
n este caso, se prueba el funcionamiento de la Unidad Aritmético Lógica, registro de estado de la 
Alu, registro de trabajo y generador de constantes. La Figura 9 muestra los resultados obtenidos en 
ARCHITECTURE Rtl OF Rom IS  
 SIGNAL int: integer;  
BEGIN  
 conv_integer(pc_ int <=
 inst_out <=  
000000000000000"             "0
            "1011000001100000" when int = 1 else  
            "0000000100010010" when int = 2 else  
            "0000011100010010" when int = 3 else  
            "0000011100001010" when int = 4 else  
            "0000000000000000" when int = 5 else  
            "0000000000000000" when int = 6 else  
            "0001010100010010" when int = 7 else  
            "0001010100001010" when int = 8 else  
            "0000011100010010" when int = 9 else  
            "0000011100001010" when int = 10 else  
            "0001010100010010" when int = 11 else  
            "0001010100001010" when int = 12 else  
            "0000000000000000" when int = 13; 
end Rtl; 
5
 
S
los componentes desarrollados (pruebas de unidad) como así también la sincronización y 
comunicación que debe existir entre todos los componentes de la arquitectura del microcontrolador 
(pruebas de integración). 
 
E
del microcontrolador, las mismas se cargaron en el componente ‘memoria de programa (ROM)’, 
luego de actualizado el modelo VHDL se realizaron las correspondientes ejecuciones en el 
simulador. Para el desarrollo y simulación del modelo VHDL se utilizó el software Max +Plus II de 
ALTERA.  
 
A
con las diferentes configuraciones del microcontrolador. En cada caso se efectuó un análisis en base 
al resultado obtenido y el resultado esperado, como así también de los errores detectados. 
 
5
 
E
una simulación. Las instrucciones que se ejecutan, realizan sucesivas sumas sobre el registro de 
trabajo (WREG), obteniendo el dato desde el propio registro y reutilizando el valor obtenido en la 
siguiente operación. El lenguaje de ensamblado correspondiente fue el siguiente: 
nop 
movlw  50 
addwf  wreg, 0 
, 0 
 
La sucesión de valores de salida registrados son correctos, observando que se generan las 
dica s de acarreo correspondientes. 
ncionamiento de la memoria de datos y el registro 
e acumulador trabajando conjuntamente con operaciones lógicas. Para ello se ejecutarán 
w 98 
 18 
 
 
 
addwfc wreg
addwfc wreg, 0 
addwfc wreg, 0 
clrf   wreg, 0 
nop 
in cione
Señal de Clock 
Figura 9. Resultado de caso de prueba 1 
 
5.2 Ejemplo de prueba 2: operaciones lógicas 
 
En este caso de prueba se intentó demostrar el fu
d
instrucciones que permitirán cargar los registros con diferentes valores y luego realizar operaciones 
lógicas que requieran de ambos registros. El lenguaje de ensamblado correspondiente fue el 
siguiente: 
nop 
movl
movwf
movlw 97 
andwf 18,0
andwf 18,1
iorwf 18,0 
iorwf 18,1 
xorwf 18,0 
xorwf 18,1 
nop 
Entrada ALU A 
Entrada ALU B 
Salida ALU 
Contador de Programa
Codigo de Operacion
Activacion Entrada RAM 
Activacion Salida RAM
Activacion En REGtrada W  
Activacion Salida WREG 
Salida Generador Ctes
Si observamos la Figura 10, que muestra los resultados obtenidos durante la simulación del caso de 
rueb uede verificar que los valores obtenidos hacia el final de la ejecución no son correctos 
Figura 10. Resultado de caso de prueba 2 
 
 CONCLUSIONES 
e una descripción en lenguaje VHDL de un microcontrolador que pueda 
er utilizado como bloque IP de una biblioteca. Se tomo como base un dispositivo comercial que 
mulación, la carga de las instrucciones en la 
emoria de programa ROM era proclive a errores (y requerían un tiempo considerable) se 
sta en el 
niversity Program Design Laboratory Package de Altera, obteniéndose resultados dispares, tal 
nto 
 poder realizar una descripción en VHDL de un microcontrolador existente en el mercado. Sin 
p a, se p
(marcado con 1) debido a una de-sincronización de las señales de control de los diferentes 
componentes. La falta de sincronización se produce en el valor de entrada A de la ALU, por lo que 
se hicieron ajustes en el componente que define el valor de entrada a la misma para corregir el 
error.. 
 1
Señal de Clock 
 
6
 
El trabajo presentado resum
s
cumpliera características distintivas de otros elementos de biblioteca. Se propuso un conjunto de 
componentes para formar la estructura del microcontrolador, se describió y verificó el 
funcionamiento de cada uno de ellos por simulación.  
 
Asimismo, dado que al momento de ejecutar cada si
m
desarrolló una herramienta que permite, de una forma rápida, la generación automática del 
componente ROM a partir del código en lenguaje assembly de las instrucciones a ejecutar. 
 
También se realizó la síntesis del modelo VHDL mediante la herramienta Max Plus II provi
U
como se pudo comprobar en algunos casos de prueba. En estos casos, donde se encontraron 
diferencias se hicieron ajustes al modelo de componentes para llegar a los resultados esperados.  
 
Los resultados obtenidos fueron satisfactorios y concuerdan con los resultados esperados en cua
a
embargo, sería conveniente profundizar y desarrollar en trabajos futuros la descripción de un 
multiplicador por hardware, dado que algunos de los controladores pertenecientes a la familia lo 
poseen, y la descripción de los puertos de entrada/salida a periféricos permitiendo que el modelo 
pueda  interactuar con el mundo exterior o con otros dispositivos. 
 
 
Entrada ALU A 
Entrada ALU B 
Salida ALU 
Contador de Programa
Codigo de Operacion
Activacion Entrada RAM 
Activacion Salida RAM
Activacion Entrada WREG 
Activacion Salida WREG 
Salida Generador Ctes
