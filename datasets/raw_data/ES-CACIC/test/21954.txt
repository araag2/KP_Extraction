Refactorings en el Contexto de MDA
﻿de MDA 
 
Claudia Pereira 
Universidad Nacional del Centro de la Provincia de Buenos Aires, Tandil, Argentina 
cpereira@exa.unicen.edu.ar 
 
y 
 
Liliana Favre 1 
Universidad Nacional del Centro de la Provincia de Buenos Aires, Tandil, Argentina 
lfavre@arnet.com.ar 
 
 
Abstract 
 
The Model Driven Architecture (MDA) is an initiative proposed by the Object Management Group 
(OMG) to model centric software development. It is based on the concepts of models, metamodels 
and automatic transformation from abstract models to executable components or applications. The 
outstanding ideas behind MDA are the different kinds of models, the separation of the specification 
of the system functionality from its implementation on specific platforms and the control of the 
model evolution. Refactorings play a fundamental role in the perfective evolution of the models. In 
this paper, we propose refactoring specification based on metamodeling techniques. The refactoring 
rules are specified in the Object Constraint Language (OCL) as contracts between metamodels. We 
propose a uniform treatment of MDA-refactorings at different abstraction levels. We describe 
foundations for MDA-based refactoring that enable extending the functionality of the existing 
CASE tools in order to improve the MDA-based process quality. 
 
Keywords : refactoring, MDA, metamodeling, model transformation  
 
 
Resumen 
 
La arquitectura model-driven (MDA) es una iniciativa propuesta por el Object Management Group 
(OMG) para la especificación de sistemas basada en el uso de modelos. Los elementos básicos en 
esta arquitectura son los modelos, metamodelos y transformaciones automáticas desde modelos 
abstractos a componentes ejecutables o aplicaciones. Las ideas centrales son la clasificación de 
modelos en distintos niveles de abstracción, la independencia entre la especificación de la 
funcionalidad del sistema y su implementación sobre una plataforma en una tecnología específica y 
el control de la evolución de los modelos. Los refactorings tienen un rol fundamental en la 
evolución perfectiva de los modelos. En este artículo se propone una especificación de refactorings 
basados en MDA utilizando una técnica de metamodelado, especificándolos en el Object Constraint 
Language (OCL) como contratos entre metamodelos. Se presenta un tratamiento uniforme de los 
refactorings para los distintos modelos propuestos por la arquitectura MDA. La incorporación de 
esta propuesta a la funcionalidad de las herramientas CASE existentes permitiría mejorar la calidad 
de los procesos basados en MDA. 
 
Palabras claves: refactoring, MDA, metamodelado, transformaciones de modelos 
                                                 
1 Comisión de Investigaciones Científicas de la Provincia de Buenos Aires 
1 INTRODUCCIÓN 
 
Refactoring es una técnica sistemática para mejorar diseños de software orientado a objetos a partir 
de la aplicación de transformaciones que preservan el comportamiento. Actualmente, se lo 
considera una práctica relevante en los procesos de desarrollo basados en la arquitectura Model 
Driven (Model Driven Arquitecture - MDA). 
MDA es una iniciativa propuesta por Object Management Group (OMG) para mejorar los procesos 
de desarrollo de software centrados en modelos. Las ideas subyacentes a MDA son separar la 
funcionalidad del sistema de su implementación sobre plataformas específicas y administrar la 
evolución del software desde modelos abstractos a implementaciones con un alto grado de 
automatización y de interoperabilidad con múltiples plataformas y lenguajes de programación. Los 
conceptos de modelos, metamodelos y transformaciones son cruciales para plasmar estas ideas [10]. 
MDA distingue diferentes tipos de modelos según el grado de abstracción: modelos independientes 
de la computación (Computer Independent Model - CIM), modelos independientes de la plataforma 
(Platform Independent Model - PIM), modelos específicos a una plataforma (Platform Specific 
Model - PSM) y modelos específicos a la implementación (Implementation Specific Model - ISM). 
Los diferentes modelos de software pueden ser descriptos con el lenguaje estándar UML [20] 
enriquecidos con expresiones OCL [13]. 
Para lograr interoperabilidad, los desarrollos centrados en modelos (Model Driven Development - 
MDD) representan a todos los artefactos generados en un lenguaje de metamodelado común. En 
MDA, los metamodelos se describen usando Meta Object Facility (MOF) [12] que captura la 
diversidad de estándares de modelado para integrar diferentes tipos de modelos y metadatos e 
intercambiarlos entre diferentes herramientas. 
El desarrollo model-driven con MDA se lleva a cabo a través de una secuencia de transformaciones 
basadas en refinamientos y refactorings para soportar la evolución de los modelos. Un refinamiento 
es el proceso de construir una especificación más detallada a partir de otra más abstracta. Un 
refactoring es el proceso de transformar un modelo en otro en el mismo nivel de abstracción, sin 
cambiar su comportamiento observable con el fin de mejorar aspectos no funcionales del mismo 
tales como simplicidad, flexibilidad, adaptabilidad, facilidad en su uso, reusabilidad y portabilidad. 
La aplicación de refactorings es importante para mejorar la calidad de los procesos que requieren 
transformaciones de modelos que pueden ser usados tanto en procesos de ingeniería directa 
(forward engineering) como inversa (reverse engineering). 
En este trabajo se propone una técnica de metamodelado alineada con MDA para la definición de 
refactorings de modelos, expresados como contratos OCL entre metamodelos. En [4] se muestra la 
especificación de refactorings sobre modelos independientes a una plataforma de implementación; 
en este artículo se presenta una clasificación de refactorings en los distintos niveles de abstracción 
de MDA y se describen algunos de los resultados presentados en [15]. 
Este artículo está organizado de la siguiente manera. En la sección 2 se presenta el framework 
arquitectural para refactorings basados en MDA. En la sección 3 se describe la técnica de 
especificación de refactorings basada en metamodelos. La sección 4 muestra una clasificación de 
refactorings aplicables a los distintos modelos propuestos por MDA. La sección 5 detalla trabajos 
relacionados en el área y en la sección 6 se presentan las conclusiones y futuros trabajos. 
 
 
2 REFACTORING EN MDA 
 
Se propone para el refactoring de modelos un framework arquitectural basado en MDA que 
distingue tres niveles diferentes de abstracción vinculados a modelos, metamodelos y 
especificaciones formales.  
En el nivel de modelos, se presenta un conjunto de refactorings de diagramas de clases UML/OCL, 
para los modelos de software propuestos por MDA. Estos refactorings se basan en un conjunto de 
reglas que permiten transformar un modelo mejorando ciertos factores de calidad sin cambiar su 
comportamiento observable.  
En el nivel de metamodelos, los refactorings aplicables a nivel de modelos son descriptos utilizando 
metamodelos MOF. Para esto, se especifican metamodelos origen y destino para cada refactoring. 
El metamodelo origen define una familia de modelos a los cuales puede aplicarse el refactoring y el 
metamodelo destino caracteriza a los modelos generados. Del mismo modo, se especifica cada 
refactoring como contrato OCL estableciendo precondiciones y postcondiciones para la aplicación 
de la transformación.    
En el nivel de formalización, se describe una integración de técnicas formales con los metamodelos 
MOF del nivel anterior para asegurar la cons istencia y validez de los refactorings basados en MDA. 
Se propone formalizar los metamodelos y los refactorings usando el lenguaje de metamodelado 
algebraico NEREUS el cual permite la integración con otros lenguajes formales [2][3]. 
Los refactorings aplicados a los distintos modelos de MDA mejoran la calidad de los mismos e 
incrementan su portabilidad entre distintas plataformas. De aquí la importancia de reestructurar los 
modelos ya que son el punto de partida en la secuencia de transformaciones. Además, fomenta la 
productividad del diseñador al automatizar las transformaciones de modelos. La especificación de 
los refactorings de manera uniforme para los distintos niveles de abstracción propuestos por MDA 
favorece la interoperabilidad entre las distintas plataformas y la integración con especificaciones 
formales permiten definirlos de manera más precisa y consistente permitiendo razonar sobre los 
refactorings. 
La figura 1 muestra el framework arquitectural propuesto para refactorings basados en MDA. En 
este artículo se pone el énfasis en la técnica de especificación de refactorings basada en 
metamodelos. 
Figura 1: Refactorings basados en MDA 
 
 
Refactoring 
de Modelos 
 
 
   
 
  
 
   Modelos 
es formalizado por  
es una instancia de 
Metamodelos MOF   
Generalization 
(from Kernel) 
Association 
(from Kernel)
    C l a s s     
(from Kernel) 
(from Kernel) 
AssEndComposite
Composite
1
Composite -Component -Assoc 
1
+association
{redefines association}
{subsets 
Component- Composite-General izat ion 
1
1
+component     
Generalization
generalization}
+ch i ld
{redefines 
specif ic}
AssEndComponent
1 +associat ion
{redefines association} 
{subsets 
memberEnd}
LeafC o m p o n e n t
2 . . *
1 
+composite    
Specialization
+parent 
{redefines 
general}
2..*+associat ionEnd
Component -Leaf -Generalization
1
1
+component   
General izat ion
{subsets 
generalization}
+ch i ld
{redefines 
specific} 1 
1..*
+parent
{redefines 
general} 
+leaf           
Spec ia l iza t ion
 
Generalization 
(from Kernel)
Association 
(from Kernel)
    Class    
(from Kernel)
(from Kernel)
AssEndComposite
Composite
1
Composite-C o m p o n e n t-A s s o c
1
+association
{redefines association} 
{subsets 
C o m p o n e n t-Composite -Generalization
1 
1
+component     
General izat ion 
generalization}
+child
{redefines 
specific}
AssEndComponent 
1
+association
{redefines association}
{subsets 
memberEnd} 
L e a f Component
2..*
1
+composite 
Specialization
+ p a r e n t
{redefines 
general}
2..* +associationEnd
C o m p o n e n t-L e a f-General izat ion 
1 +component 
Generalization
{subsets 
generalization}
+child
{redefines 
s p e c i f i c }
1..* 
+ p a r e n t
{redefines 
general}
+leaf           
Specialization
  
  
  
  
  
  
  
  
  
Lenguajes 
Formales 
Larch    CASL . . .  
Nereus 
 
Refactoring 
basado  en 
Metamodelos 
3  ESPECIFICACIÓN DE REFACTORINGS COMO CONTRATOS OCL 
 
El refactoring de modelos transforma un modelo en otro funcionalmente equivalente al primero. 
Esta transformación se especifica utilizando la técnica de metamodelado. Un metamodelo, modelo 
que describe los modelos, consta de: metaclases, que describen los elementos que pueden existir en 
un modelo y relaciones entre metaclases que especifican las relaciones que pueden existir en un 
modelo.  
Los metamodelos en MDA se especifican con MOF que captura la diversidad de estándares de 
modelado para integrar diferentes tipos de modelos y metadatos e intercambiarlos entre diferentes 
herramientas. Los metamodelos MOF se expresan como una combinación de diagramas de clases 
UML y especificaciones OCL. Para cada refactoring particular se especifican metamodelos MOF 
origen y destino como especializaciones del metamodelo UML (versión 2.1.1). El metamodelo 
origen define una familia de modelos a los cuales puede aplicarse la regla de transformación y el 
metamodelo destino caracteriza a los modelos generados.  
El estándar propuesto por OMG para definir transformaciones es el Query, View, Transformation 
(QVT) [17] que permite realizar consultas sobre modelos, crear vistas sobre un modelo y escribir 
definiciones de transformaciones. En la presente propuesta, las reglas de transformación se expresan 
como contrato OCL con una notación sencilla. Las reglas establecen precondiciones y 
postcondiciones para la aplicación de la transformación, especificando la relación entre los 
elementos del metamodelo origen y los elementos del metamodelo destino. La notación propuesta 
utiliza el Essential OCL [13] que es un subconjunto mínimo de OCL y está alineada con el estándar 
QVT, en particular con  el package CORE  de QVT que depende de Essential MOF [12] y Essential 
OCL. 
 
4 CLASIFICACIÓN DE REFACTORINGS EN EL CONTEXTO MDA 
 
A continuación se presenta una clasificación de refactorings de diagramas estáticos UML para los 
distintos modelos de diseño propuestos por MDA. Se proponen refactorings aplicables a modelos 
independientes de una plataforma de implementación, a modelos dependientes de una plataforma y 
a modelos dependientes de la implementación.  
La clasificación de los refactorings en los distintos niveles se basa en el análisis de los elementos 
del modelo que involucra cada transformación. Un refactoring puede agregar, modificar o eliminar 
elementos en un modelo, si dichos elementos pueden estar presentes en un nivel de abstracción 
dado, el refactoring se clasificará en dicho nivel. 
Para la definición de reglas de transformación en los distintos niveles de MDA se especifican 
metamodelos correspondientes a cada nivel, ya que estas reglas imponen relaciones entre un 
metamodelo origen y un metamodelo destino. Los metamodelos son modelos que especifican la 
estructura, semántica y restricciones de una familia de modelos. Los metamodelos a nivel PIM 
describen una familia de modelos independientes de la plataforma. Los metamodelos a nivel PSM 
definen una familia de modelos dependientes de una plataforma particular. Los metamodelos a nivel 
ISM definen una familia de modelos dependientes de una plataforma y lenguajes de programación 
orientados a objetos particulares. En particular, la propuesta se ejemplificará sobre modelos 
específicos a la plataforma Java. 
 
 
4.1 Refactorings a Nivel PIM 
 
A continuación se presenta el refactoring Extract Composite tomado de [9], que se aplica cuando en 
una jerarquía de herencia existen subclases que almacenan colecciones de hijos los cuales son clases 
en la misma jerarquía y además poseen métodos para el tratamiento de dicha colección (figura 2).  
La aplicación de esta regla permite crear una superclase Composite y mover campos y métodos 
duplicados desde las subclases a la superclase, eliminando la duplicación de métodos al factorizar 
en una superclase el comportamiento común. 
Figura 2: Refactoring Extract Composite 
Para especificar este refactoring a nivel PIM se describen los metamodelos origen y destino como 
especializaciones del metamodelo UML complementados con restricciones OCL. El metamodelo 
UML de Diagramas de Clases (figura 3.1) describe los conceptos de modelado básicos de los 
diagramas de clases UML y gira alrededor de la metaclase Class que describe las características que 
debe poseer una clase en este diagrama. En particular se centra en sus propiedades y operaciones, 
como así también en las diferentes relaciones que se pueden establecer entre las clases: 
generalizaciones y asociaciones. 
El metamodelo origen (figura 3.2) sugiere que una instancia de Component tiene dos o más 
instancias de ComponentCompositeGeneralization (compositeSpecialization), es decir, dos o más 
relaciones de generalización donde cada relación de generalización tendrá como clase hija una 
instancia de Composite. Por otro lado, una instancia de Component tendrá dos o más extremos de 
asociación (associationEnd) donde cada uno está vinculado a una asociación del tipo 
CompositeComponentAssoc donde el otro extremo de asociación tiene como clase participante a 
una instancia de Composite. Una instancia de Component posee una o más instancias de 
ComponentLeafGeneralization, es decir, una o más relaciones de generalización donde cada 
relación tendrá como clase hija una instancia de Leaf. Las metaclases sombreadas en gris 
corresponden al metamodelo UML.  
El metamodelo destino (figura 3.3) sugiere que en un modelo resultante de aplicar este refactoring, 
una instancia de Component tiene exactamente una instancia de 
ComponentCompositeGeneralization y un único extremo de asociación de tipo AssEndComponent. 
La definición de la regla de refactoring se expresa como una transformación basada en los 
metamodelos origen y destino, la cual describe un mecanismo para convertir los elementos de un 
modelo origen, instancia del metamodelo origen, en elementos de otro modelo, instancia del 
metamodelo destino correspondiente. La aplicación de la regla Extract Composite crea en el modelo 
destino una superclase (Composite), detecta operaciones y atributos equivalentes y los mueve de las 
subclases a la superclase. La figura 4 muestra la especificación de la regla de transformación como 
contrato OCL. 
 
. . .  A   
método   
P   
método   *  
B   
método   
*  
. . .  
A   B   
P   
método   
C   
método   
*  
Composite 
                  Leaf                   Composite   
Compo nent 
  
 
Figura 3: Metamodelos MOF para el refactoring Extract Composite 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Generalization 
(from Kernel)
Association 
(from Kernel)
Property 
(from Kernel)
    Class    
(from Kernel)
    Class    
(from Kernel)
AssEndComposite
Composite
1
1
+associationEnd
+participant
Composite-Component-Assoc
1
1
+association
{redefines association}
Leaf
Component-Composite-Generalization
1
1
+component     
Generalization
{subsets 
generalization}
+child
{redefines 
specific}
AssEndComponent
1
1
+association
{redefines association}
Component
2..*
1
+composite    
Specialization
+parent
{redefines 
general}
2..*
1
+associationEnd
+participant
Component-Leaf-Generalization
1
1
+component   
Generalization
{subsets 
generalization}
+child
{redefines 
specific}1
1. . *
+parent
{redefines 
general}
+leaf           
Specialization
Generalization 
(from Kernel)
Association 
(from Kernel)
Property 
(from Kernel)
    Class    
(from Kernel)
    Class    
(from Kernel)
AssEndComposite
Composite
1
1
+associationEnd
+participant
Composite-Component-Assoc
1
1
+association
{redefines association}
Leaf
Component-Composite-Generalization
1
1
+component     
Generalization
{subsets 
generalization}
+child
{redefines 
specific}
AssEndComponent
1
1
+association
{redefines association}
Component
1
1
+composite    
Specialization
+parent
{redefines 
general}
1
1
+associationEnd
+participant
Component-Leaf-Generalization
1
1
+component   
Generalization
{subsets 
generalization}
+child
{redefines 
specific}1
1. . *
+parent
{redefines 
general}
+leaf           
Specialization
context AssEndComposite inv: 
   self.aggregation = #shared  or  
   self.aggregation = #composite 
context Component inv: 
-- Los extremos de asociación de tipo AssEndComponent 
-- son equivalentes. 
   self.associationEnd  ® 
      forAll ( a1, a2 | a1 = a2  or   a1.isEquivalentTo(a2) )  
context AssEndComposite inv: 
self.aggregation = #shared  or  self.aggregation = #composite  
... 
3 – Metamodelo destino del refactoring Extract Composite 
context  Component inv: 
-- Para cada clase de tipo Composite existe una operación que 
   self.compositeSpecialization.child  ®  forAll ( class |  
      class.ownedOperation ® exists ( op |  
        -- es equivalente a operaciones de las otras clases Composite  
            self.compositeSpecialization.child ® excluding (class) ®  
               forAll ( c |  c.ownedOperation ® exists ( o |     
                  op.isEquivalentTo(o)  ))))    ... 
   
2 – Metamodelo origen del refactoring Extract Composite  
StructuralFeature
ClassifierRelationship
TypeOperation
Association
1..* +/endType
Class
*
+/super
Class 0..1
*
+class
+ownedOperation
Property
0..1
+/opposite 0..1*
+owningAssociation+ownedEnd
0..12..*
+association+memberEnd
0..1 *
+ownedAttribute
GeneralizationClassifier 1
+general
*1
+generalization+specific
1 – Metamodelo UML simplificado 
Operation::isEquivalentTo (op:Operation): Boolean 
isEquivalentTo (op)= 
-- chequeo de las signaturas y de la especificación del comportamiento de las funciones 
...  
Property::isEquivalentTo (p:Property):Boolean 
isEquivalentTo(p) = ... 
  
 
 
 
Figura 4: Refactoring Extract Composite en OCL 
 
4.2 Refactorings a Nivel PSM  
 
El refactoring que se detalla a continuación sobre modelos específicos a la plataforma Java está 
basado en el refactoring propuesto en [7]. Cuando en dos clases de un modelo existen operaciones 
comunes pueden realizarse dos tipos de refactorings: extraer el comportamiento común a una 
superclase o a una interfaz. En los lenguajes orientados a objetos que soportan herencia múltiple, se 
podría pensar en extraer una superclase con las interfaces y código comunes. Java tiene herencia 
simple, limitando a las clases a tener una única superclase,  sin embargo,  se puede implementar este 
refactoring usando interfaces, con la diferencia que sólo puede extraerse las operaciones comunes y 
no el código común. Este refactoring refleja una práctica ventajosa y fomentada en la comunidad de 
diseñadores bajo la plataforma Java. La figura 5 ejemplifica este refactoring. 
Transformation Extract Composite { 
parameters 
source: Metamodelo Origen Extraer Composite:: Package 
target:  Metamodelo Destino Extraer Composite:: Package 
 
postconditions 
post:  
-- Para toda clase sourceClass, instancia de Component, del paquete source, 
source.ownedMember à  select(oclIsTypeOf(Component)) à forAll ( sourceClass | 
    -- existe una clase targetClass, instancia de Component, del paquete target tal que, 
target.ownedMember à  select(oc lIsTypeOf(Component)) à exists ( targetClass | 
   
          -- targetClass tiene una sola relación del tipo Component-Composite-Generalization, 
targetClass.oclAsType(Component).compositeSpecialization à size() =1  and 
 
-- targetClass tiene un sólo extremo de asociación que la asociacia con una clase Composite, 
targetClass.oclAsType(Component).associationEnd à size() =1  and 
 
-- targetClass y sourceClass tienen las mismas clases Leaf, 
  targetClass.oclAsType(Component).leafSpecialization.child =  
sourceClass.oclAsType(Component).leafSpecialization.child and  .... 
 
post:  
-- Para toda clase sourceClass, instancia de Composite, del paquete source, 
source.ownedMember à  select(oclIsTypeOf(Composite)) à forAll ( sourceClass | 
    -- existe una clase targetClass, instancia de Class, del paquete target tal que, 
target.ownedMember à  select(oclIsTypeOf(Class)) à exists ( targetClass | 
 
-- una clase de tipo Composite es superclase de targetClass, 
targetClass.oclAsType(Class).superClass.oclIsTypeOf(Composite)  and 
     
                   -- targetClass y sourceClass tienen el mismo nombre, 
           targetClass.name = sourceClass.name  and 
      
                   -- Por cada operación equivalente de las clases  Composite del paquete source  
sourceClass.oclAsType(Composite).ownedOperation à forAll( op  |  
 (source.ownedMember à  select(oclIsTypeOf(Composite)) 
àexcluding(sourceClass)) à collect (oclAsType(Composite).ownedOperation)   
à forAll ( o | 
if o.isEquivlalentTo(op)  then 
-- en el paquete target habrá una operación equivalente en la  superclase de targetClass,  
      targetClass.oclAsType(Class).superClass.ownedOperation à exists  
(  targetOp | op.isEquivalentTo (targetOp)   )  and 
targetClass.oclAsType(Class).ownedOperation à excludes(op) 
else -- de otro modo, la operación será de targetClass. 
targetClass.oclAsType(Class).ownedOperation à includes(op)   
endif )) 
   ……………. 
post: 
-- Por cada clase cliente de la clase Composite en el paquete source, 
-- existe una clase cliente de la nueva clase Composite en el paquete target, 
 ........................... 
} 
Figura 5: Refactoring Extract Interface 
 
Los metamodelos origen y destino correspondientes a este refactoring se especifican como 
especializaciones del metamodelo JAVA. Este último, especificado como especialización del 
metamodelo UML, refleja la presencia de clases e interfaces Java en los modelos de esta plataforma 
(figura 6.1). Una clase contiene atributos, extremos de asociación y operaciones, puede heredar de 
una única clase base pero puede implementar varias interfaces. Una interfaz puede contener 
atributos estáticos y finales, métodos sin implementación y extremos de asociación y además puede 
heredar de varias interfaces. 
El metamodelo origen (figura 6.2) sugiere que las instancias de A y de B pueden tener operaciones, 
instancias de A_Operation y B_Operation respectivamente, entre las cuales existe una relación de 
equivalencia sintáctica (instancia de Operation_Relationship). Las instancias de A y B también 
pueden tener atributos equivalentes. Las metaclases sombreadas en gris claro corresponden al 
metamodelo PSM-Java, y en gris oscuro corresponden al metamodelo UML. El metamodelo destino 
(figura 6.3) muestra que las clases A y B implementan una interfaz (instancia de AnInterface) la cual 
tendrá las operaciones y atributos equivalentes.  
La regla de transformación se aplica sobre un modelo con dos clases que tienen un subconjunto de 
operaciones comunes a través de los siguientes pasos: crear una interfaz Java, declarar en la interfaz 
las operaciones comunes y los atributos equivalentes, declarar que las clases originales 
implementan dicha interfaz y adaptar las declaraciones de tipo de los clientes para usar la interfaz. 
 
4.3 Refactorings a Nivel ISM 
 
Para la aplicación de refactorings a nivel de modelos específicos a la implementación Java, se 
necesita identificar elementos que están presentes en el nivel de código. En el ejemplo que se 
detalla a continuación se necesita analizar si los métodos de una clase poseen código nulo, es decir, 
si la implementación del método carece de sentencias.  Por lo general, una clase concreta en la 
plataforma Java tiene métodos con código nulo cuando necesita satisfacer un contrato 
implementando una interfaz pero realmente sólo necesita código para alguno de los métodos de la 
interfaz. Por lo general, una clase concreta en la plataforma Java tiene métodos con código nulo 
cuando necesita satisfacer un contrato implementando una interfaz pero realmente sólo necesita 
código para alguno de los métodos de la interfaz. Los métodos con código nulo están en la clase 
para satisfacer una regla del compilador Java: las declaraciones de todos los métodos miembros de 
cada superinterfaz directa de una clase deben ser implementados (a menos que la clase sea 
declarada abstracta).  Los métodos con código nulo forman parte de la interfaz de la clase (sus 
métodos públicos) pero es una falsa descripción de su comportamiento. 
  
A 
nombreA1 : tipo1 = cte1 
nombreA2 : tipo2 
nombreOp1() : tipo1 
nombreOp2(tipo2) 
B 
nombreA1 : tipo1 = cte1 
nombreOp1() : tipo1 
nombreOp2(tipo2) 
nombreOp3() : tipo3 
A 
nombreA2 : tipo2 
nombreOp1(): tipo1 
nombreOp2(tipo2) 
B 
nombreOp1(): tipo1 
nombreOp2(ipo2) 
nombreOp3(): tipo3 
C 
nombreA1 : tipo1 = cte1 
nombreOp1() : tipo1 
nombreOp2(tipo2) 
<< Interfaz>> 
Figura 6: Metamodelos MOF para el refactoring Extract Interface 
Cuando en un modelo una clase implementa una interfaz pero sólo provee código para algunos de 
los métodos, la aplicación del refactoring Adapt Interface [9] permite reestructurar este tipo de 
código a través del patrón Adapter. Se dispone de una clase Adapter que implementa la interfaz y 
que posee métodos con código nulo para cada uno de los métodos definidos en la interfaz y una 
subclase del Adapter que provea el código necesario. Este refactoring puede ser usado para adaptar 
múltiples interfaces particionando métodos en cada uno de sus respectivos adapters (figura 7). En 
Java, no se necesita declarar formalmente una subclase de Adapter, basta con crear una clase 
anidada anónima Adapter y proveer una referencia a la misma a través de un método de creación.  
El metamodelo específico a la implementación en código Java, obtenido por especialización del 
metamodelo UML, refleja que un paquete Java contiene archivos, clases e interfaces. Una clase 
contiene atributos y métodos, puede heredar de una única clase base pero puede implementar varias 
interfaces.  Las operaciones de una clase pueden tener una implementación que consta de un bloque 
de una o varias sentencias. Una interfaz puede contener atributos estáticos y finales, métodos sin 
implementación y puede heredar de varias interfaces. La figura 8.1 muestra el diagrama de 
operaciones de este metamodelo. 
1 - Metamodelo simplificado específico a la plataforma Java 
 
2 – Metamodelo origen del refactoring Extract Interface 
3 – Metamodelo destino del refactoring Extract Interface 
 
Classifier
JavaOperation
Class
AssociationEnd
Method
Field
Classifier
Operation
0..1
+ownedOperation
Interface
0..1
 Property
0..1
+ownedAttribute
0..1
+ownedOperation
+ownedAttribute
JavaClass
isFinal
isStatic
/ isGeneric *
0..1 +class
{redefines class}
*0..1 +class
{redefines class}
*0..1 +class
{redefines class}
1
+/superClass
{redefines 
superClass}
JavaInterface
* 0..1+interface
{redefines interface}
* 0..1
{redefines 
ownedOperation}
*
0..1+interface
{redefines interface}
*
+/superInterface
{redefines 
general}
A
A_Operation
1..*
1
{subsets 
JavaOperation}
+class {redefines 
class}
B
Operation_Relationship
11
B_Operation
1..*
1
{subsets 
JavaOperation}
+class
{redefines 
class}
1
1
JavaClass
Relationship
JavaOperation
JavaInterface
InterfaceRealization
JavaClassA
A_AnInterface_Relation
1
1
{subsets 
interfaceRealization}
{redefines 
implementingClassifier}
AnInterface1
{redefines 
contract}
B_AnInterface_Relation
1
{redefines 
contract}
B
1
1
{subsets 
interfaceRealization}
{redefines 
implementingClassifier}
context A inv: 
-- La clase posee un subconjunto de operaciones, A_Operation, 
-- que son operaciones sintácticamente equivalentes a  
-- un subconjunto de operaciones de una clase B. 
self.a_Operation -> forAll (Aop |  
  self.package.ownedMember -> exists (m | m.oclIsTypeOf(B) and 
        m.oclAsType(B).b_Operation -> exists (Bop |  
Bop.ownedParameter = Aop.ownedParameter and 
Bop.name = Aop.name and Bop.type = Aop.type  ) ) ) 
 
Figura 7: Refactoring Adapt Interface 
Este metamodelo Java, a su vez, es especializado para obtener los metamodelos origen y destino. El 
metamodelo origen (figura 8.2) sugiere que una instancia de AClass tiene una o más instancias de 
Class-Interface-Relation donde cada una de éstas tiene asociada una única instanc ia de AnInterface, 
es decir, una instancia de AClass implementa por lo menos una interfaz. La interfaz implementada 
tiene por lo menos dos métodos. La instancia de AClass tiene dos o más operaciones Java, donde un 
subconjunto de ellas son operaciones implementadas con código y otro subconjunto de operaciones 
implementadas con código nulo. El metamodelo destino expresa que existirá una clase de tipo 
superAdapter (una clase que implementa una interfaz) que tendrá las operaciones con código nulo y 
AClass tendrá una clase anidada anónima AnAdapter (que extiende superAdapter) con las 
operaciones con código (figura 8.3). En ambos metamodelos las metaclases sombreadas en gris 
claro corresponden al metamodelo ISM-Java y en gris oscuro corresponde al metamodelo UML. 
La regla de transformación se aplica sobre un modelo que contiene una clase que implementa una 
interfaz pero sólo provee código para algunos de los métodos de la interfaz. La transformación 
consistirá de los siguientes pasos: usar un Adapter que implemente la interfaz y provea el 
comportamiento nulo, crear en la clase un método de creación que retorne una referencia a una 
instancia que extiende al Adapter, borrar de la clase los métodos con comportamiento nulo, mover 
los métodos implementados a la nueva ins tancia del Adapter, eliminar la relación de 
implementación de interfaz de la clase, proveer la instancia del Adapter a los clientes que lo 
necesiten. Estos cambios serán especificados como contrato OCL. 
 
5 TRABAJOS RELACIONADOS 
 
La primera publicación relevante sobre refactoring fue realizada por Opdyke, mostrando cómo las 
funciones y atributos pueden migrar entre clases, estableciendo las precondiciones que deben ser 
mantenidas para asegurar que la transformación preserva el comportamiento del programa [14]. 
Roberts completó este trabajo describiendo técnicas basadas en contratos de refactorings [18]. 
Fowler describió principios y prácticas sobre refactorings aplicables sobre código fuente Java [7].  
Una amplia descripción de las investigaciones existentes en el área de refactoring se describe en 
[11]. Existen trabajos sobre refactorings de modelos UML [19] [21]. Algunos autores definen e 
implementan refactorings de modelos en base a transformaciones basadas en reglas [16]; otros 
autores presentan una técnica para describir transformaciones a nivel de metamodelo basada en 
patrones de transformación [8]. Folli y Mens proponen utilizar transformaciones de grafos como 
base para la especificación de refactoring de modelos [6]. 
Las herramientas CASE basadas en MDA existentes proveen limitadas facilidades para el 
refactoring sobre código fuente a través de una selección explícita por parte del diseñador [1]. 
 
  
P 
método() 
I 
método1() 
método2() 
   <<interfaz>> 
{//código} {//código nulo} 
H 
método1() 
Adapter 
método2() 
P 
método() 
H 
método1() 
método2() 
I 
método1() 
método2() 
  <<interfaz>> 
{//código} 
{//código nulo} 
Figura 8: Metamodelos MOF para el refactoring Adapt Interface 
6 CONCLUSIONES Y FUTUROS TRABAJOS 
 
Nuestra principal contribución radica en la especificación de refactorings alineados con MDA 
aplicables a los distintos modelos propuestos por esta arquitectura. La descripción de los 
refactorings consiste, por un lado, en la especificación de los metamodelos origen y destino para 
cada refactoring en particular y por otro lado, en la especificación de la regla de transformación 
  
JavaInterfaceInterfaceRealizationJavaClass
Method
AMethod
AnInterface
2..*
1
{redefines 
method}
{redefines 
interface}
OperationWithoutCodeOperationWithCode
Class-InterfaceRelation
1
{redefines 
contract}
JavaOperation
AClass
1..*
1
{subsets 
javaOperation}
{redefines 
class}
1..*
1
{subsets 
javaOperation}
{redefines 
class}
1..*
1 {subsets 
interfaceRealization}
{redefines 
implementingClassifier}
2..*
{redefines 
javaOperation}
context AClass inv:  
-- Es una clase concreta.  
    not self.isAbstract 
 
context OperationWithCode inv : 
-- Posee un conjunto de sentencias. 
    self.body.block.blockStatement  -> notEmpty() 
 
context OperationWithoutCode inv : 
-- Tiene implementación, 
-- con un bloque de código sin sentencias. 
    self.body -> notEmpty() 
    self.body.block.blockStatement  -> isEmpty() 
... 
context AClass inv: 
--Es una clase concreta. 
   not self.isAbstract and 
 
-- Por cada clase anidada anónima Adapter que  
-- implementa una interfaz, tendrá un método de  
-- creación que provee una instancia de un Adapter. 
    self.anAdapter  -> forAll ( adap| 
       self.creationMethod -> exists ( met|  
          met.returnType = adap  ) ) 
 
context AnAdapter inv: 
-- Es una clase anidada anónima. 
   not self.isAbstract  and 
   not self.isStatic  and self.isFinal 
   
-- No tiene un constructor declarado 
-- explícitamente. 
   self.javaOperation -> select 
      (oclIsTypeOf(Constructor)) -> isEmpty() 
 
Constructor
StatementBlockStatement
JavaOperation
Method
Block Field
Implementation
LocalVariable 
DeclarationStatement
ClassOrInterface Declaration
0..1
+signature
1
+subBlock
*
1
+/referenced
Field*
+body
0..1
*
1
+invokedMethod
1 1
Operation
1 – Diagrama de operaciones del metamodelo ISM Java 
2 – Metamodelo origen del refactoring Adapt Interface 
3 – Metamodelo destino del refactoring Adapt Interface 
JavaInterface
InterfaceRealization
JavaClass
JavaOperation
JavaClass
AClass
CreationMethod
1..*
1
{subsets 
javaOperation}
{redefines 
class}
OperationWithCode
AnAdapter1..*
{subsets 
nestedClass}
1
+return
Type
{redefines 
returnType}
1..*
1
{redefines 
javaOperation}
{redefines 
class}
AnInterface
OperationWithoutCode
Adapter-Generalization
1
1 {redefines 
generalization}
{redefines 
specific}
Adapter-Interface-Relation
1
{redefines 
contract}
SuperAdapter
1..*
1
{redefines 
javaOperation}
{redefines 
class}
1
{redefines 
general}
1
1{redefines interface  
Realization}
{redefines 
implementing  
Classifier}
Generalization
JavaOperation
como contrato OCL entre metamodelos. El nivel de metamodelos es necesario para controlar la 
consistencia de los refactorings y establecer los elementos que deben estar presentes en los modelos 
fuente y destino y sus restricciones. La especificación de los refactorings utiliza estándares 
propuestos por OMG. Los metamodelos se describen utilizando diagramas de clases UML y 
restricciones OCL y las reglas de transformación utilizan un subconjunto mínimo de OCL. Esta 
especificación, alineada con MOF, facilita la interoperabilidad entre las distintas plataformas.  
En [5] se muestra la integración de la especificación de los refactorings con técnicas formales, 
traduciendo los metamodelos MOF y la regla de transformación al lenguaje NEREUS.  
Como futuras extensiones a este trabajo se propone analizar refactorings sobre otros tipos de 
modelos UML, como así también analizar el impacto que las transformaciones aplicadas sobre un 
tipo de modelo producen sobre otras vistas. Como limitación a esta propuesta cabe mencionar la 
ausencia de una herramienta que la soporte.  
 
