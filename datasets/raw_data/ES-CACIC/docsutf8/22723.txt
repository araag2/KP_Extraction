Hacia un diseño general de integración de condicionales para los contratos sensibles al contexto del DHD
﻿del DHD
Alejandro R. Sartorio 1,2
Guillermo L. Rodríguez 1
Marcelo A. Vaquero 2
1 Centro Internacional Franco Argentino de Ciencias de la Información y de Sistemas,
CIFASIS (CONICET-UNR-UPCAM), Bv. 27 de febrero 210 bis,
2000 Rosario, Argentina
2 Centro de Altos Estudios en Tecnología Informática, CAETI,
Universidad Abierta Interamericana, Sede Rosario, Ov. Lagos 944,
2000 Rosario, Argentina
sartorio@fceia.unr.edu.ar, guille@fceia.unr.edu.ar, marcelo.vaquero@hotmail.com
Resumen. En este trabajo se analizan las principales características de diseño 
sobre  los  avances  de  los  tres  tipos  de  condicionales  utilizados  en  la 
infraestructura  de  los  contratos  sensibles  al  contexto  para  el  Dispositivo 
Hipermedial Dinámico (DHD). Partiendo de la implementación tecnológica en 
el entorno colaborativo SAKAI, se busca la adaptación eficiente de los servicios 
a la información de contexto de los usuarios,  describiendo características de 
diseño, permitiendo construir un diseño general de integración que pueda ser 
utilizado  en  implementaciones  de  cualquier  tipo  de  condicionales  para  los 
DHD.
Palabras Clave: Coordinación de Contratos – Sistemas sensibles al contexto – 
Dispositivo Hipermedial Dinámico – TIC.
1   Introducción
El actual contexto físico-virtual que se construye a partir de la utilización de las 
Tecnologías de la Información y Comunicación (TIC) posibilita a los sujetos ser 
partícipes de redes sociotécnicas conformadas por una multiplicidad de componentes 
y relaciones, que se configuran y reconfiguran por las diversas interacciones en 
función de una gran diversidad de requerimientos. En este sentido, el Programa 
interdisciplinario de I+D “Dispositivos Hipermediales Dinámicos”  [1], radicado en 
CIFASIS (CONICET-UNR-UPCAM), estudia la complejidad evidente de las 
mencionadas redes, integrando aportes de diversas disciplinas como informática, 
educación, ingeniería y psicología, entre otras.
Se conceptualiza como Dispositivo Hipermedial Dinámico (DHD) [2] a la red 
heterogénea conformada por la conjunción de tecnologías y aspectos sociales que 
posibilitan a los sujetos realizar acciones en interacción responsable con el otro para 
investigar, aprender, dialogar, confrontar, componer, evaluar, bajo la modalidad de 
taller físico-virtual, utilizando la potencialidad comunicacional, transformadora y 
abierta de lo hipermedial, regulados según el caso, por una “coordinación de 
contratos” [3].
Funcionalmente, el DHD es conceptualizado como sistema complejo [4], en el 
cual los participantes realizan  acciones  de  participación  mediadas  por  diversas 
tecnologías.  Estas  interacciones  se  efectúan  por  medio  de  servicios  provistos  por 
herramientas específicas agrupadas según el espacio colaborativo utilizado. Además, 
se busca que los efectos de dichas acciones estén condicionados por la información de 
contexto de los participantes que la involucran.
Para esto, tecnológicamente el DHD está provisto por el agregado de una pieza 
de software diseñada para la inyección de propiedades de coordinación de contratos 
sensibles al contexto [5]. Esta propiedad se logra a través de la implementación de 
contratos [6] con mecanismos de coordinación y componentes de sistemas sensibles al 
contexto [7].
La utilización de reglas es parte esencial en la implementación de las acciones 
que contienen los contratos y las tareas de coordinación. A su vez, las estructuras de 
las reglas contienen condicionales donde se establece parte de la lógica de adaptación 
a los requerimientos funcionales del los  DHD. En este trabajo se retoman los tres 
tipos de condicionales lógicos diseñados con  el propósito de representar valores de 
verdad que dependan de la información de contexto de usuarios. De esta manera se 
pretende  diseñar  una  estructura  conceptual  que  permita  implementar  estos 
condicionales en el marco tecnológico del DHD.
Tras esta introducción, en la sección 2 se identifican los elementos tecnológicos 
del DHD teniendo en cuenta su relación con los condicionales. Luego, en la sección 
3, se presentan los tres tipos de condicionales con sus principales características y 
modelos de integración dentro del framework SAKAI (http://www.sakaiproject.org) 
(para la justificación de dicha elección ver [8]). En la sección 4 se describe un modelo 
conceptual genérico de condicionales junto a un ejemplo de integración. Por último, 
en la sección 5 se presentan las principales conclusiones generales.
2. El uso de contratos en el DHD
El uso de contratos en el  DHD  parte de la noción de Programación por Contrato 
(Programming by Contract) de Meyer [6] basada en la metáfora de que un elemento 
de un sistema de software colabora con otro, manteniendo obligaciones y beneficios 
mutuos. En nuestro dominio de aplicación consideraremos que un objeto cliente y un 
objeto servidor “acuerdan” a través de un contrato, representado con un nuevo objeto, 
que el objeto servidor satisfaga el pedido del cliente, y al mismo tiempo el cliente 
cumpla con las condiciones impuestas por el proveedor. De esta manera, las 
decisiones de comportamiento de los servicios se verán influenciadas por el valor de 
verdad de las instancias de los condicionales que integren al contrato.
Como ejemplo de la aplicación de la idea de Meyer [9] en nuestro dominio de 
tecnologías de la información y comunicación  planteamos el  escenario  en que: un 
usuario (cliente) utiliza un servicio de edición de mensajes (servidor) a través de un 
contrato que garantizará las siguientes condiciones: el usuario debe poder editar 
aquellos mensajes que tiene autorización según su perfil (obligación del proveedor y 
beneficio del cliente); el proveedor debe tener acceso a la información del perfil del 
usuario (obligación del cliente y beneficio del proveedor).
A partir de la conceptualización de contratos se propone una extensión por 
medio del agregado de nuevas componentes para instrumentar mecanismos que 
permitan ejecutar acciones dependiendo del contexto. En aplicaciones sensibles al 
contexto, el contexto (o información de contexto) es definido como la información 
que puede ser usada para caracterizar la situación de una entidad más allá de los 
atributos que la definen. En nuestro caso, una entidad es un usuario (participantes, 
coordinadores,  etc.), lugar (casa, universidad, parque, etc.), recurso (impresora, fax, 
etc.), u objeto (archivos de texto, fotos, videos digitales, etc.) que se comunica con 
otra entidad a través del contrato.
En [9] se propone una especificación del concepto de contexto partiendo de las 
consideraciones de Dourish [10] y adaptadas al dominio de  las  tecnologías  de  la 
información y comunicación, que será el punto de partida del actual trabajo. Contexto 
es todo tipo de información que pueda ser censada y procesada, a través de una 
aplicación, que caracteriza a un usuario o entorno, por ejemplo: intervenciones en 
foros, participaciones en wikis, habilidades, niveles de conocimientos, direcciones ip 
conectadas, cantidad de usuarios conectados, fechas y horarios, etc.
En términos generales, la coordinación de contratos es una conexión establecida 
entre un grupo de objetos influidas por condicionales que representan parte de la 
lógica de adaptación. Cuando un objeto cliente efectúa una llamada a un objeto 
servidor, el contrato “intercepta” la llamada y establece una nueva relación teniendo 
en cuenta el contexto del objeto cliente, el del objeto servidor, e información relevante 
adquirida y representada como contexto del entorno. Los condicionales de las reglas 
representarán diferente tipo de información de contexto con distinto grado de 
representación y abstracción, donde se requieren mecanismos de inferencias basados 
en la recolección, representación y simulación.
A través de un diagrama UML se definen las clases utilizadas en la 
implementación de los condicionales dentro de las reglas de los contratos. La Figura 1 
describe los elementos y relaciones relevantes en la creación de condicionales.
Fig.1. Elementos y relaciones relevantes en la creación de condicionales.
Dentro del mecanismo de configuración de condicionales, el contrato presenta en 
su interfaz métodos para la ordenación de acciones y reglas; además de las que cubren 
las propiedades inherentes a la definición original de contrato sobre la configuración 
de pre-condiciones,  post-condiciones e invariantes. De esta manera se representa a 
las reglas anteriormente mencionadas como una clase de agregación del contrato. De 
la misma manera, se determina una nueva clase para la representación de los 
condicionales. Las reglas contienen referencias a las acciones de los contratos  por 
medio de la interfaz acciones.
Se decide representar a los condicionales como objetos de primera clase con el 
propósito de establecer un nuevo grado de abstracción que permitirá conectar a los 
contratos a subsistemas externos que le proporcionen nuevos mecanismos de 
adaptabilidad, dinamismo e interpretación.
De esta manera, teniendo en cuenta las experiencias de diseño e implementación 
del uso de condicionales [11] [12] [13] se extienden al objeto condicional en tres tipos 
diferentes. Cada uno de ellos hereda la interfaz Condicional, encargada de establecer 
las presentaciones para el tipo de dato necesario en las reglas.
El primer paso, es lograr la construcción de las reglas del contrato y que los 
condicionales representen criterios de decisiones sobre aspectos relevantes de los 
procesos didácticos, investigativos, de producción y/o de gestión mediatizados por un 
DHD; por ejemplo: un participante puede adquirir un servicio determinado de una 
herramienta a partir de la evaluación de una condición representada como condicional 
de una regla.
En general, a estas reglas debemos diseñarlas con el cuidado de no incorporar 
redundancias, ambigüedades o incoherencias; tanto entre las propias reglas de un 
contrato como con otras reglas implícitas que se desprenden de los servicios. De esta 
manera, definimos a las Reglas del contrato como un conjunto de condiciones, 
acciones y prioridades. La condición es un expresión booleana sobre relaciones 
(mayor, menor, igual, distinto, etc.) entre parámetros y valores concretos. Las 
acciones conforman un conjunto de asignaciones de valor a otros parámetros también 
definidos por el tipo de regla. Algunos de los parámetros de las acciones deben ser 
“métodos de cálculo” que permiten cambios en el comportamiento de los servicios en 
los cuales estas reglas son aplicadas. La prioridad permite simplificar la cantidad de 
reglas que se deben escribir: en lugar de la escritura de una regla para cada 
combinación de posibilidades de los valores de los parámetros, se asegura que dos 
reglas no puedan ser ejecutadas simultáneamente. Por ejemplo: el usuario podría 
escribir una prioridad baja para todas las reglas y luego con prioridades altas ir 
identificando las excepciones para el caso configurado inicialmente. En síntesis, las 
reglas son ejecutadas mediante un orden de prioridades.
Entonces, las reglas forman parte de un mecanismo de agregación encargado de 
la composición de diferentes tipos de condicionales: Mcondicional, MDcondicional y 
DEVScondicional, que se comportan de manera similar teniendo en cuenta diversos 
modelos de integración que explicitaremos en las secciones siguientes.
A continuación,  se analizarán las estructuras de tres tipos de condicionales con 
el propósito de abstraer características  de su conformación. En particular se 
identificarán tipos de elementos, patrones, sub-estructuras y relaciones que sean 
necesarias para la composición con los contratos.
3. Los tipos de condicionales
Retomando la sección anterior y de manera general a través de los elementos 
utilizados en el diseño de la Figura 1 para la creación de condicionales, se identifica 
como la primer característica de diseño, a la estructura que define los diferentes tipos 
de condicionales para el DHD.
Luego, partiendo de las necesidades adaptativas de los contratos y ante 
determinados casos de uso, se diseñaron diferentes implementaciones de 
condicionales. Estas diferencias tienen que ver con cuestiones de diseño en los que 
algunos aspectos pueden ser generalizados, posibilitando una representación más 
genérica de los condicionales.
3.1 Mcondicional
La posibilidad de incorporar  métricas en el modelo original de contratos sensible al 
contexto, permite que el sistema sea más adaptable a los cambios del contexto de los 
usuarios. Para implementar la invocación de métricas mediante métodos correctos, 
propusimos  un modelo de integración sin cambios sustanciales en la arquitectura 
original y en el código de la implementación.
El modelo conceptual de métrica pertenece al Modelo INCAMI (Information 
Need, Concept model, Attribute, Metric and Indicator: Información relevante, Modelo 
Conceptual, Atributos, Métricas e Indicadores) [14]. INCAMI es un framework 
organizacional, orientado a la medición y evaluación que permite economizar 
consistentemente, no sólo metadata de métricas e indicadores, sino también valores 
mensurables en contextos físicos.
En [11] se propuso una  integración entre el modelo de coordinación de contrato 
y el modelo de métrica propuesto por Olsina [15]. A nivel de diseño, esta propuesta 
está representada en la Figura 2 por el paquete Métrica y la clase Método. Métrica 
implementa parte del modelo INCAMI que se relaciona con Métodos mediante una 
instancia de un tipo de métrica representada por la clase TipoMetrica.
En Métodos se establecen las propiedades que permiten ejecutar (representado 
con método getValorCondicional) la métrica correspondiente dependiendo de 
parámetros explícitos (representado con setParametros). De esta manera queda 
establecida una pequeña infraestructura para la conexión entre el contrato y la métrica 
determinando una segunda característica de diseño. 
3.2 MDcondicional
Ahora, analizaremos una nueva integración de un modelo externo, que permitirá 
aplicando técnicas de minería de datos enriquecer aún más la semántica de los 
contratos. Entre los diferentes métodos y técnicas existentes de minería de datos, nos 
hemos centrado principalmente en las técnicas orientadas al análisis de las 
interacciones hipermediales en espacios colaborativos web basados en métodos de 
clasificación y agrupamiento [12].
Fig. 2. Representación del los elementos de diseño de condicionales.
Las técnicas de clasificación y agrupamiento o clustering [16] consisten en  la 
habilidad intelectual para ordenar o dividir fenómenos complejos (descriptos por 
conjuntos de objetos con datos altamente dimensionales) en pequeñas y 
comprensibles unidades o clases que permiten un mejor control o comprensión de la 
información. Su aplicación a sistemas e-learning [17] [18] [19] [20] permite agrupar a 
los usuarios por su comportamiento de navegación, agrupar a las páginas por su 
contenido, tipo o acceso, y agrupar similares comportamientos.
Para lograr la incorporación de la componente que representan actividades de 
minería de datos, volvemos a proponer una integración de bajo costo a través de la 
adaptación de los módulos estándares de la aplicación.
El vínculo entre las reglas del contrato y la efectiva representación del mismo se 
concreta a través de una relación de agregación entre los parámetros del contrato 
(representado por la clase parámetros Parámetros_CA), que se encuentra dentro del 
sub-sistema que engloba al contexto (Sistema_CA), similar a la propuesta de Schmidt 
[21] y la clase Condicionales (representada como una generalización de sub-clases 
donde se distinguen las posibles técnicas de minería de datos). A esta nueva 
infraestructura de conexión la denominaremos como un tercer característica   de 
diseño.
Desde una perspectiva funcional esta cadena de eventos y relaciones entre 
componentes de diseño, permite que un servicio ordinario del framework SAKAI se 
pueda enriquecer con información de contexto recopilada con técnicas de minería de 
datos.
3.3 DEVScondicional
El desarrollo de este nuevo condicional interpreta  las interacciones del DHD como 
eventos asincrónicos en una base de tiempo continuo. Por esto, se ha modelado al 
DHD como sistema complejo con el formalismo DEVS (Discrete EVent System 
specification) [22], considerándose además la adaptación del mismo para modelizar 
sistemas dinámicos, y su simplicidad y eficiencia en la implementación de 
simulaciones.
A continuación se describen los aspectos de diseño   que se tuvieron en cuenta 
para la aplicación de un nuevo sistema de cálculo de niveles de interactividad 
mediante un modelo de simulación DEVS. Aquí también la integración se produce 
mediante la conexión de las reglas a través de sus condicionales. A su vez, la métrica 
para el cálculo de los niveles de interactividad de las participaciones de los usuarios 
es interpretada por un modelo DEVS diseñado para devolver valores de simulación 
[23].
La interpretación y resultados de interacciones resueltos en el Modelo DEVS 
(utilizamos para la simulación el software PowerDEVS [24]), es manipulado por una 
herramienta (representada con la clase Herramienta). A su vez, dicha herramienta es 
la encargada de brindar la información necesaria sobre los parámetros que necesita la 
clase Método que es utilizada como argumento de la función setParametro. El método 
getValorCondicion representa los valores de verdad del condicional que formará parte 
de la regla explícita representada por el método reglas de la clase Contrato. Esta 
nueva infraestructura representa la cuarta característica de diseño.
Técnicamente la herramienta [25]  es una aplicación que respeta la arquitectura 
del framework colaborativo SAKAI, utilizando los servicios base para el acceso a la 
base de datos. Por otro lado, permite la aplicación de una función transferencia que 
transforma dichos datos teniendo en cuenta un archivo de parametrización. Los demás 
componentes tecnológicos que complementan el desarrollo cumplen los estándares 
del framework, y permitan el registro de la aplicación como herramienta.
4.  Hacia un modelo conceptual 
En esta sección se presenta un diseño  conceptual e información necesaria para la 
creación de condicionales para el DHD. 
En este caso, se propone un diseño de integración para conectar un subsistema 
de configuración (Calculo) para la instanciación de los condicionales de las reglas de 
contratos. Las componentes y relaciones que se presentan respetan las características 
de diseño  anteriormente mencionadas. Por ejemplo, la componente Integrador y sus 
relaciones  se corresponde con la cuarta  característica de diseño mencionada en la 
sección 3.3.
La Figura 3  establece  el  diseño  propuesto  para la  implementación  de 
condicionales. Se define un módulo para efectuar los cálculos finales que determinan 
el valor de verdad del condicional (Calculo). Otro módulo es el encargado de la 
recolección y toma de datos (TomarDatos), extendiéndose para los casos particulares 
donde es necesario contar con estructuras de datos (Estructuras) conteniendo métodos 
que implementan cada una de ellas.
Fig. 3. Modelo de diseño conceptual de condicionales para contratos sensibles al contexto.
Además, un módulo aparte se configura para describir todas las restricciones que 
debe cumplir el condicional (Restricciones), teniendo en cuenta su utilización dentro 
de las reglas de los contratos, con el propósito de no incurrir en contradicciones o 
inconsistencias en relación a las precondiciones, poscondiciones e invariantes.
Las conexiones con otros subsistemas, por ejemplo, el subsistema sensible al 
contexto representado, se encuentran encapsuladas en otro módulo de conexión 
(Conexion). De esta manera, se implementa un “callback” del método perteneciente a 
la interfaz de un subsistema externo.
Fig. 4. Secuencia de invocación de los valores de verdad.
4.1 Ejemplo
En la Figura 4 se muestra un ejemplo reducido de laboratorio para sistemas web 
colaborativo sensibles al contexto. Para esto exponemos un diagrama de secuencia 
que interpreta la ejecución de una regla del contrato que utiliza uno de los tipos de 
condicionales respetando el diseño original a través del objeto Contrato, y el modelo 
conceptual de integración a través de los objetos Condicional, Metodo y TipoMetrica. 
De esta manera queda evidenciada la ventaja de contar con un modelo de diseño que 
facilite la manipulación de las reglas de los contratos sensibles al contexto.
Por último, usaremos como referencias un  fragmento de código descripto en el 
caso de estudio de la sección 5 de [5] para ejemplificar el impacto  de esta propuesta. 
En este caso, se muestra que  es necesario  influir solamente sobre los conectores de la 
infraestructura de coordinación propuesta. La forma correcta de hacerlo es 
caracterizar la siguiente porción de código como una interfaz de conexión:
public CrdPartnerRules messageEdit_rules(string texto,Student c) throws
DiscussionException, CrdExFailure {return new CrdPartnerRules (this);}
Entonces, se debe agregar a esta función las siguientes lineas de códigos que 
posibilitarán  cambiar  las  referencias  de  los  condicionales  de  las  reglas  de  los 
contratos:
Integrador unIntegrador = (Integrador) nuevoItegrador(); ...
unValorCondicional = unIntegrador.resultado(unDato, unCalculo);
Conexion unConexion=(Conexion) generarConexion (unValorCondicional);...
InterfazConexion unInterfazConexion = (InterfazConexion) nueva;...
unConexion.setConexion(unaInterfazConexion.metodoConexion());..
5. Conclusiones
A través de las características funcionales y de implementación de los contratos 
sensibles al contexto para el DHD se muestra un primer diseño en que los 
condicionales son representados por un objeto de primera clase que permita una 
utilización más dinámica. Luego, se construye un modelo descriptivo  de  soluciones 
originales que resuelven el cálculo de los valores de verdad de condicionales a través 
de métodos o sistemas  externos (en este caso: métricas, técnicas de minería de datos 
y simulación de eventos discretos). Del resultado analítico se identifican y definen 
características de diseño con el propósito de transformarlas en requerimientos básicos 
para la propuesta de un nuevo diseño genérico de condicionales.
Esto último, es el principal aporte de este trabajo, logrando mantener las 
propiedades originales de construir al condicional como objeto de primera clase, y 
permitiendo un estilo de adaptación con sistemas externos a un nivel de generalidad y 
abstracción considerable.
