Factorización de N recuperación de factores primos a partir de las claves pública y privada
﻿
 
Se puede factorizar N y hallar sus factores primos a partir del conocimiento de la clave pública e y 
la clave privada d en un criptosistema RSA. Se analiza y resuelve el problema en forma matemática 
y luego se muestra un algoritmo para su implementación computacional. La aritmética de punto flotante no aporta la exactitud necesaria para las actuales longitudes de las claves. Luego el algoritmo 
presentado prescinde de ella, utilizando el método de Newton-Raphson para hallar uno de los factores. Se podrá así analizar la solidez de su esquema RSA y cambiarlo en caso de considerarse que no 
es lo suficientemente seguro. 
 
KEYWORDS: RSA, clave pública, clave privada, primos fuertes. 
 
 
1. INTRODUCCIÓN. 
 
RSA1[01] [02] [03] es un procedimiento criptográfico para cifrar y descifrar mensajes. El mismo 
también se usa en las aplicaciones de firma digital. Fue patentado en 1983 con el número de patente 
4.405.8292, cuya fecha de expiración ha sido el 21 de Septiembre de 2000.  
 
Emplea una clave para cifrar y otra diferente para descifrar. Esto representó un avance en la criptografía, pues fue el primer de criptosistema de clave pública o asimétrico [05]. Actualmente es uno 
de los sistemas criptográficos más empleados por su demostrada robustez. [06]. 
 
Se puede usar además con otros sistemas criptográficos utilizando un servicio mixto, conocido por 
el nombre de envoltura digital RSA: enviar con RSA la clave simétrica de un esquema DES o triple 
DES al destinatario. Así la criptografía asimétrica brinda servicios a la criptografía simétrica al encargarse de la distribución de la clave [07]. 
 
Hasta ahora el esquema RSA ha resistido en forma eficaz los ataques a los que se ha enfrentado. Es 
también cierto, que la seguridad que ofrece es computacional, y por lo tanto, a medida que aumenta 
la potencia y velocidad de los ordenadores, también aumenta el tamaño de las claves que es necesario emplear. 
                                                          
1 El acrónimo RSA, corresponde a los apellidos de los científicos que lo crearon: Ron RIVEST, Adi SHAMIR y Len ADLEMAN [04]. 
2 El número 4.405.829 es un número primo. 
RSA - Laboratories ofrecía interesantes premios al que lograba factorizar los números propuestos. 
Así buscaban demostrar la robustez del sistema e incentivar la búsqueda de algoritmos de factorización. El desafío RSA o como se conoce en inglés The RSA Factoring Challenge ya ha sido quitado 
de la Web, y sólo se listan los números ya factorizados y los premios entregados. Ello es posible, a 
que durante 2007 ningún desafío ha sido resuelto [08]. 
 
RSA estaría a buen resguardo detrás de lo que se conoce como el problema de la factorización pues 
es extremadamente arduo factorizar números compuestos muy grandes. Sin embargo aún no se ha 
demostrado que romper RSA signifique factorizar N. 
 
 
2. BASES MATEMÁTICAS DE RSA. 
 
2.1. Teoremas de Euler y Fermat: pilares de RSA. 
 
RSA cifra y descifra mensajes que por medio de exponenciación modular. Se basa íntegramente en 
los teoremas de Euler y Fermat [11] [12]. 
 
Teorema de Euler 
n) (mod 1 a   1 n) ; (a mcd Si  (n) Φ ≡⇒=  
 
Teorema de Fermat 
n) (mod 1    a a    1 -  p  (p) primo, p Si 1-p (n) Φ ≡=⇒=Φ  
 
Corolario de Euler-Fermat: 
 
n) (mod          /  Z y    ; / primos  , Si 1) - (q 1)-(pk   1 (n) Φk mmmnmmk p qnqp ≡=⇒<∈= ++  
 
Expresión RSA  
n) (mod m     ))(  (mod 1  / Z Sean   d  e ≡⇒Φ≡∈ + mn e d e, d  
  
Llamamos al número e clave pública, y a d clave privada; entonces, para cifrar un emisor debe conocerse el par (N; e) y el receptor para descifrar el par (N; d) [09] [10]. 
 
Sin embargo, a fin de evitar que cada persona tenga una clave pública diferente y se convierta en un 
problema almacenar tantas claves para cifrar, se usan las mismas claves: el número 65537 (216 +1).  
 
2.3. Elección de los factores primos de N: primos fuertes 
 
Los factores primos de n, p y q deben ser primos fuertes [13] [14], cumpliendo las siguientes condiciones: 
 
1. p y q deben diferir en pocos dígitos, aunque no muy cercanos.  
 
Si ignoramos la primera condición entonces nuestro esquema en particular estaría debilitado 
porque sucumbiría al método de Fermat (método para factorizar un número compuesto partiendo de la raíz cuadrada del mismo y buscando hallar dos números cuadrados perfectos), 
probando con número mayores que la raíz cuadrada de N. 
2. (p-1) y (q-1) deben contener factores primos grandes. 
 
Caso contrario, tampoco Φ(N) los tendría, pudiéndose probar todas las potencias modulares 
del criptograma (v+1)/e variando v en busca que dicho cociente sea entero hasta obtener el 
texto en claro. 
 
3. mcd (p-1; q-1) debe ser pequeño, de ser posible 2.  
 
Si mcd (p-1; q-1) fuese grande, entonces, mcm (p-1; q-1) sería pequeño comparado con φ 
(N). Luego cualquier inverso de e módulo m podría descifrar el mensaje. 
 
En la práctica se elige primo grande, llamado r y con él hallamos a los otros, de manera que p y q 
sean también primos:  
 
 pqNpqrp =⇒+=∧+= 1212  (1) 
 
Seguidamente se evalúa la función de Euler 
 
 Φ(N) - 1 n   q  p 1)1)(q(pΦ(N) +=+⇒−−= . (2) 
 
 
3. FACTORIZACIÓN DE N. 
 
3.1 Polinomio-RSA. 
 
Definición: llamaremos Polinomio-RSA al polinomio entero y mónico de grado 2 que tiene a los 
primos p y q como sus raíces.  
 
NxqpxqxpxxP ++−=−−= )())(()( 2 . (3) 
 
2
4)()(
;
2 Nqpqp
qp
−+±+= . 
(4) 
 
Reemplazando en (2) 
[ ] [ ]
2
4)( 1   )(   1  
;
2 NNNNN
qp
−−+±−+= φφ . 
(5) 
 
Como p ≠ q entonces  
[ ] 04 )(1 2 >−−+=∆ NNN φ . (6) 
 
Despejando Φ(N): 
)(21 NNN φ>−+ . (7) 
 
Sea  
1)(/)(mod1 +=∈∃⇒≡ + kNedZkNed φφ . (8) 
  
(9) 
)(1 N
k
ed φ=−  
Por (7) (9) tenemos  
k
NN
ed <−+
−
21
1
. 
(10) 
 
 
El error que se introduce en el cálculo de k al usar esta aproximación es muy pequeño: sea la expresión (7) vemos que ambos miembros de la desigualdad tienen un orden de magnitud semejante. Sea 
m el orden de magnitud de N, entonces  
 
mNNN 2)(21 ≈>−+ φ . 
 
(11) 
Luego 
m
NNN
−≈<−+ 2)(
1
21
1
φ . 
 
(12) 
 
Tomando un entorno de centro en el k hallado podemos hallar el valor de Φ(N) y con él podemos 
usar la expresión (10) para hallar p y q.  
 
[ ] [ ]
);(
2
4)(1)(1 2
qp
NNNNN =−−+±−+ φφ . 
(5) 
 
De esta manera puede hallarse los factores primos p y q a partir del conocimiento del módulo, clave 
pública y privada en un esquema RSA.  
 
 
4. DIFICULTADES COMPUTACIONALES. 
 
4.1 Aritmética de punto flotante y Norma IEEE 754. 
 
Para realizar en forma efectiva todos los procedimientos y cálculos indicados, formalmente en los 
apartados anteriores debemos tener el auxilio de un ordenador.  
 
Dado que la seguridad proviene del tamaño de los números en cuestión, prontamente hallaremos dificultades importantes en la etapa de implementación por las limitaciones de la aritmética de punto 
flotante.  
 
Las expresiones (5) y (10) necesitan procesar operaciones de división y extracción de raíces. Estas 
operaciones devuelven números reales como resultado.  
 
La norma IEEE Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985) 
[15] o más conocida como IEEE 754 3es el estándar más ampliamente usado para las operaciones 
de punto flotante. 
                                                          
3 También conocida como IEC 60559:1989. Binary floating-point arithmetic for microprocessor systems (originalmente el número 
de referencia era IEC 559:1989). 
La representación de números reales es de la forma r = m be, donde m es la mantisa, b la base y e el 
exponente.  
 
La base se elige de acuerdo al sistema numérico de representación, es decir: octal, decimal, binaria, 
etc. La representación de doble precisión, por ejemplo, asigna 64 bits a cada número real. Un bit para el signo, los 11 siguientes para el exponente y los restantes para la mantisa.  
 
Con claves RSA del orden de 1024 bits e inclusive más, se está al límite de la precisión requerida 
para realizar cálculos. Para recuperar la precisión perdida, se emplearán herramientas de Cálculo 
Numérico como es el método de Newton-Raphson [16]. 
 
 
5. ALGORITMO PARA LA FACTORIZACIÓN DE N. 
 
5.1. Generalidades. 
 
Se presenta una solución algorítmica expresada en seudo-código que hace uso del método de Newton-Raphson con el cual se puede hallar una de las raíces del polinomio RSA.  
 
Al trabajar en aritmética entera, este método es muy veloz y confiable, dejando de lado las dificultades de precisión computacional.  
 
Una de las entradas del algoritmo es un valor inicial aproximado a la raíz buscada y cuanto más cercana sea a la raíz, mejor será el desempeño del método.  
 
Sin embargo, se opta asumir por defecto esta entrada eligiendo la semisuma de las raíces, es decir 
(N + 1 – φ (N)).  
 
En las pruebas realizadas, el rendimiento del algoritmo halló la raíz buscada en muy pocas iteraciones, dependiendo de la magnitud de N, obviamente. 
 
5.2 Observación para programadores de Python o VBScript. 
 
Estos lenguajes de programación no requieren declarar tipo de las variables porque lo asumen cuando se les asigna por primera vez el contenido.  
 
Para trabajar con Python4 en particular, al final de todas las entradas se agrega la letra L indicando 
que el contenido es un entero grande y no tiene limitación en su almacenamiento. 
 
5.3. Seudo-código del algoritmo. 
 
ENTRADA N: módulo RSA  
 e: clave pública 
 d: clave privada 
 m: máximo de iteraciones  
 
 
                                                          
4 Este lenguaje de programación permite, entre otras cosas, trabajar con numero esteros muy grandes (de 1.000 o más bits).  
SALIDA los factores primos p y q del número N 
Paso 1 inicializar N, f, k, a, p, s, i  
Paso 2 tome k = entero [(e * d – 1) / (N + 1 – 2 * N ^ 0.5)] 
Paso 3 tome f = entero [(e * d – 1) / k] 
Paso 4 tome s = N + 1 - f 
Paso 5 tome i = 1 
Paso 6 tome a = (N + 1 – f) / 2 
Paso 7 mientras i <= m haga pasos 8-11 
Paso 8 tome p = a – entero [(a ^ 2 – a * s + n) / (2 * a – s)] 
Paso 9 Si valor_absoluto (a – p) = 0 entonces  
 tome q = N / p 
SALIDA p; q 
PARE 
Paso 10 Tome i = i + 1 
Paso 11 Tome a = p 
PASO 12 SALIDA (“no se alcanza a factorizar N”) 
SALIDA (“aumente el máximo de iteraciones”) 
PARE 
 
 
6. CONCLUSIONES. 
 
El procedimiento matemático desarrollado permite recuperar p y q a partir de la información del 
trío (N, e, d). 
 
Futuros estudios podrían permitir estudiar las propiedades del polinomio-RSA.  
 
La aritmética de punto flotante que se norma a través de IEEE 754 tiene sus limitaciones para abordar con precisión la operatoria con números tan grandes. Cambios de paradigmas criptográficos llevan a concluir que las claves irán en aumento.  
 
Tal vez se desarrollarán lenguajes y normas con mayores niveles de precisión en sus representaciones para números reales. Este trabajo permite estimar que esto no sería necesario. Por el contrario, 
algoritmos como el presentado evitarían estas dificultades. 
 
La aplicación práctica desarrollada permite comprobar si implementaciones del esquema RSA tienen vulnerabilidades ocultas debajo del N elegido para recuperar la seguridad perdida. 
 
 
7.
