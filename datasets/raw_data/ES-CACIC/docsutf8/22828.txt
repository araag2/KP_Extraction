Un ambiente integrado de ejecución para determinar la satisfacibilidad de fórmulas en forma normal conjuntiva
﻿
The satisfiability problem (SAT) is a classical NP-complete problem of useful application in plenty of computer science areas, electric engineering, and mathematics. In this work we present an integration of all the
components of the DPLL system enhanced with Neural Networks (DPLL NN) in order to create a user friendly
execution environment. One of the main components of DPLL NN is an algorithm that is capable of solving
some instances of the 3SAT problem, a well-knownNP-complete problem derived from SAT. DPLL NN combines the Davis-Putnam rules with neural networks which are capable enough to learn complex problems. The
environment proposed allows the user determine the satisfiability of a particular formula either randomly or
manually generated. In addition, the environment provides a graphical tree representation of the corresponding
assignation values that satisfy that formula (if it can be satisfied).
Resumen
El problema de satisfacibilidad (SAT), el primero en demostrarse que es NP-completo, es fundamental en
muchos campos de las ciencias de la computación, la ingeniería eléctrica y matemática. En el presente trabajo
se integran todas las componentes del sistema DPLL con Redes Neuronales (DPLL RN), para crear un ambiente
de ejecución amigable al usuario. Una de las componentes fundamentales del sistema DPLL RN consta de un
algoritmo que permite resolver algunas instancias del problema 3SAT, un conocido problema NP-completo
derivado de SAT. El sistema DPLL RN combina las reglas de Davis-Putnam con redes neuronales (DPRN),
las cuales tienen una gran capacidad para aprender problemas complejos. El ambiente propuesto permite al
usuario determinar la satisfacibilidad o no de una fórmula en lógica proposicional, permitiéndole ingresar una
fórmula cualquiera o generar una aleatoriamente y luego se refleja en un árbol el camino seguido para obtener
las asignaciones que hacen verdadera a dicha fórmula si tales asignaciones existen.
1954
1. INTRODUCCIÓN
Los problemasNP-completos son problemas para los cuales no se conoce un algoritmo de tiempo
polinomial determin·stico que los pueda resolver. El ejemplo can·onico de un problemaNP-completo
es el problema de satisfacibilidad booleana (SAT) [4, 9, 2, 12].
SAT es un problema fundamental en l·ogica matem·atica, teor·a de computaci·on, inferencia, razonamiento automatizado, ingenier·a VLSI, entre otros. Dicho problema se reere a la tarea de encontrar asignaciones de verdad que hagan a una expresi·on booleana verdadera. Su importancia reside
b·asicamente en el hecho de que es el primer problema, y uno de los m·as simples, para el cual se
demostr·o que es NP-completo. Adem·as muchos problemas pr·acticos, tales como demostraci·on autom·atica de teoremas, vericaci·on y detecci·on de fallas de hardware, detecci·on de isomorsmo de
grafos, el problema del viajante de comercio, etc [1], son problemas NP-completos y se pueden
transformar de manera eciente a SAT. Por lo tanto, buenos algoritmos para SAT son indudablemente
de gran utilidad. Dado que es poco probable que se pueda encontrar un algoritmo de tiempo polinomial para resolver SAT, buenas soluciones parecen importantes.
Por lo expuesto anteriormente es que se desarroll·o el sistema DPLL RN [11] cuya nalidad fue
la de tratar de hallar un algoritmo que resuelva instancias del problema 3SAT, combinando uno de los
algorimos pr·acticos m·as utilizados en la actualidad, el algoritmo Davis-Putnam-Logemann-Loveland
(DPLL) [3, 13], cuya eciencia depende de la elecci·on de una regla de ramicaci·on basada en Redes
Neuronales (RN) las que permiten realizar en forma heur·stica la selecci·on de las variables y su
correspondiente asignaci·on de valores de verdad. Una de las principales caracter·sticas de las RN en
general est·a dada por su gran capacidad para aprender a resolver problemas complejos y por poseer la
habilidad de generalizaci·on, dos propiedades importantes a la hora de tratar de resolver instancias del
problema de satisfacibilidad. Por otro lado, cabe destacar que una de las principales motivaciones para
el desarrollo del sistema DPLL RN es que el mismo permite trabajar con distintos tipos de instancias
del problema de satisfacibilidad lo que puede ser de gran inter·es para entender la complejidad del
mismo. Sin embargo, el problema fundamental de DPLL RN es la falta de un ambiente amigable que
permitiera su utilizaci·on, sin necesidad de conocer las caracter·sticas propias de la implementaci·on
de este sistema, dado que el mismo requiere de una serie de pasos que pueden resultar tediosos
cuando se pretende utilizarlo solo para nes pr·acticos, i.e., obtener asignaciones de verdad para una
f·ormula. Es por ello que surge la necesidad de desarrollar un ambiente que facilite el uso del sistema
DPLL RN que oculte al usuario los detalles de implementaci·on del mismo y poder utilizarlo sin tener
conocimiento sobre redes neuronales y el algoritmo DPLL, permitiendo de esta manera su utilizaci·on
por parte de un amplio espectro de usuarios interesados en aprovechar los benecios de DPLL RN.
Este art·culo est·a organizado como sigue. La secci·on 2 describe brevemente el problema SAT. En
la secci·on 3 se muestra el algorimo DPLL. La secci·on 4 presenta las caracter·sticas m·as relevantes
del sistema DPLL RN. La secci·on 5 describe el ambiente integrado de ejecuci·on y por ·ultimo, en la
secci·on 6 se presentan las conclusiones.
2. EL PROBLEMA DE SATISFACIBILIDAD (SAT)
El problema SAT es fundamental en muchos campos de las ciencias de la computaci·on, la ingenier·a el·ectrica y matem·atica. Dicho problema fue el primero en demostrarse que es NP-completo.
El problema de satisfacibilidad consiste en la asignaci·on de valores de verdad a f·ormulas en l·ogica
proposicional. El objetivo del problema de satisfacibilidad es determinar si existe una asignaci·on de
valores de verdad para las variables booleanas que hagan verdadera a una f·ormula.
Una variable booleana es una variable que toma alguno de los valores 0 (falso) o 1 (verdadero).
1955
Las variables booleana se consideran proposiciones, que son los objetos elementales de la l·ogica
proposicional. El valor de la variable especica la verdad o falsedad de la proposici·on. La proposici·on
x es verdadera cuando a la variable booleana se le asigna el valor 1, cuando el valor asignado es 0
la proposici·on es falsa. Una asignación de verdad 1 es una funci·on que asigna 0 ·o 1 a toda variable
booleana.
Las conectivas l·ogicas ∧ (conjunci·on), ∨ (disyunci·on) y ¬ (negaci·on) se usan para construir proposiciones llamadas f·ormulas bien formadas a partir de un conjunto de variables booleana.
Definición 1 Sea V un conjunto de variables booleanas:
1. Si x ∈ V , entonces x es una fórmula bien formada.
2. Si x, y ∈ V , entonces (¬x), (x ∧ y) y (x ∨ y) son fórmulas bien formadas.
3. Una expresión es una fórmula bien formada sobre V solamente si puede ser obtenida a partir de las variables booleanas en el conjunto V por un número finito de aplicaciones de las
operaciones dadas en 2.
Se dice que una f·ormula u satisface una asignaci·on de verdad si los valores de las variables hacen
que u tenga el valor 1. Una claúsula es una f·ormula bien formada que consiste de una disyunci·on de
variables o la negaci·on de variables. Una variable no negada se llama literal positivo y una variable
negada literal negativo. Usando esta terminolog·a, una cl·ausula es una disyunci·on de literales, las
f·ormulas x∨¬y, ¬x∨z∨¬y y x∨z∨¬x son cl·ausulas sobre el conjunto de variables V = {x, y, z}.
Una f·ormula est·a en forma normal conjuntiva si tiene la forma:
u = u1 ∧ u2 ∧ ...... ∧ um
donde cada ui es una cl·ausula. Un teorema cl·asico de l·ogica proposicional asegura que toda f·ormula
bien formada se puede transformar en una f·ormula equivalente en forma normal conjuntiva. Entonces,
de manera rigurosa el problema de satisfacibilidad es el problema de decidir si una f·ormula en forma
normal conjuntiva se satisface por alguna asignaci·on de verdad.
Ejemplo: Sea V = {x, y, z} y las f·ormulas u, v y w:
u = (x ∨ y) ∧ (¬y ∨ ¬z)
v = (x ∨ ¬y ∨ ¬z) ∧ (x ∨ z) ∧ (¬x ∨ ¬y)
w = ¬x ∧ (x ∨ y) ∧ (¬y ∨ x)
las f·ormulas u y v se satisfacen por la asignaci·on de verdad t(x) = T , t(y) = F y t(z) = T ; donde
t : V → {T, F} es la funci·on de asignaci·on de valores de verdad denida sobre el conjunto V . De
esta manera, la primera cl·ausula en u es satisfecha por x y la segunda por ¬y. La f·ormula w no es
satisfecha por t, es m·as, no es dif·cil ver que w no es satisfecha por ninguna asignaci·on de verdad.
Definición 2 Una fórmula se dice que está en 3-forma normal conjuntiva, si cada claúsula contiene
exactamente tres literales.
1También se llama valuación.
1956
Un caso particular derivado del problema SAT es el 3-SAT donde el objetivo del problema 3SAT es determinar si una f·ormula en forma normal conjuntiva (con tres literales por cl·ausula) es
satisfacible. Un aspecto muy importante en este contexto es que cualquier f·ormula en forma normal
conjuntiva puede ser transformada a una f·ormula en forma normal conjuntiva con tres literales por
cl·ausula. Esto da la fundamentaci·on te·orica necesaria para trabajar en DPLL RN con f·ormulas con
tres literales por cl·ausula y dado que el problema 3-SAT presenta una formulaci·on m·as sencilla que
SAT, es un problema usado com·unmente en la bibliograf·a de teor·a de complejidad computacional
para mostrar la existencia de otros problemas NP-completos [5]. Adem·as, se puede observar, que
f·ormulas expresadas de manera que todas las cl·ausulas tengan la misma cantidad de variables son, de
alguna manera, m·as claras.
3. ALGORITMO DPLL
Un m·etodo simple para vericar satisfacibilidad de una f·ormula, es generar todos los posibles
resolventes, y entonces vericar si se genera la cl·ausula vac·a. Davis y Putnam [4] introdujeron un
m·etodo en el cual las variables se eliminan una a una de la f·ormula. En cada paso se generan todos los
posibles resolventes (basados en la elecci·on de una variable) y entonces se eliminan todas las cl·ausulas
que mencionan a aquella variable. Cada paso genera un subproblema con unas pocas variables menos
pero, posiblemente, con m·as cl·ausulas.
Por ejemplo, dadas dos cl·ausulasC1 = (v∨x1∨ ...∨xp) y C2 = (¬v∨y1∨ ...∨yr), donde xi 6= yj,
para i = 1, .., p y j = 1, ..r, el x resolvente de C1 y C2 es la cl·ausula (x1 ∨ ...∨xp ∨ y1 ∨ ...∨ yr), esto
es, la disyunci·on de C1 y C2 sin v y ¬v. El resolvente es una consecuencia l·ogica de la conjunci·on del
par de cl·ausulas. La resoluci·on es el proceso de generar repetidamente resolventes desde las cl·ausulas
originales y los resolventes previamente generados, hasta que la cl·ausula nula sea generada o no se
puedan crear m·as resolventes. En el primer caso la f·ormula es no satisfacible y en el ·ultimo caso es
satisfacible.
El algoritmo DPLL [3, 13, 12] es una variaci·on al algoritmo original propuesto por Davis y Putnam
(DP), dicha variaci·on es m·as eciente que el m·etodo original para prop·ositos pr·acticos. DPLL usa
una regla de splitting, la cual permite reemplazar al problema original por dos subproblemas m·as
pequenos, y adem·as, permite determinar cu·al es la variable a seleccionar. Esencialmente, el algoritmo
es una b·usqueda depth-first con backtracking a trav·es de las asignaciones de verdad (parciales). Este
algoritmo tiene un fuerte crecimiento exponencial. En el peor caso, para una f·ormula no satisfacible,
DPLL buscar·a a trav·es de todas las asignaciones de verdad que puedan ser hechas.
Dos heur·sticas son aplicadas durante este proceso (ver Algoritmo 1) con la idea de podar el
espacio de b·usqueda. ·Estas, son la regla del literal puro y la claúsula unitaria.
La regla del literal puro se aplica cuando una variable aparece con un ·unico valor de verdad en
todas las cl·ausulas a·un no satisfechas. En este caso, se asigna un valor de verdad a dicha variable de manera que todas las cl·ausulas involucradas sean satisfechas. Este es un procedimiento
altamente efectivo en la b·usqueda.
Si alguna variable ocurre en la f·ormula corriente en una cl·ausula de longitud 1, entonces la
regla de la cl·ausula unitaria se aplica. El literal se selecciona y se le asigna un valor de verdad
de manera que la cl·ausula respectiva sea satisfecha. La aplicaci·on repetida de la regla unitaria
com·unmente se conoce como Unit Propagation o Boolean Constraint Propagation (BCP).
El algoritmo DPLL trabaja por prueba y error, gr·acamente se puede observar la secuencia de
pasos, utilizando un ·arbol de b·usqueda, que se forma de la siguiente manera:
1957
Algorithm 1 Algoritmo DPLL (con heur·sticas) en pseudoc·odigo
Procedure DPLL (CNF formula:ϕ)
if (ϕ es vac·a) return si
else if (hay una clausula vac·a en ϕ) return no
else if (hay un literal puro v en ϕ) return DPLL(ϕ(v))
else if (hay una clausula unitaria {v} en ϕ) return DPLL(ϕ(v))
else seleccionar una variable v mencionada en ϕ
if DPLL(ϕ(v) = si) then return s·
else return DPLL(ϕ(¬v))
end
1. Un nodo corresponde a la elecci·on de una variable. Dependiendo de este nodo, DPLL toma una
de dos acciones posibles y ·esto se reeja con un descendiente (arco) en el ·arbol.
2. A partir de un arco, se extraen todas las implicaciones l·ogicas que se derivan de la ·ultima
elecci·on tomada.
3. Se vuelve a 1, a menos que encuentre una soluci·on o llegue a una contradicci·on. En este ·ultimo
caso, se hace backtraking hasta el nodo incompleto m·as cercano (con un ·unico arco descendiente), invierte el valor de la variable y vuelve a 2; si todos los nodos tienen sus dos arcos
descendientes, se determina la satisfacibilidad de la f·ormula.
En la tabla 1 se muestra la ejecuci·on del algoritmo para un ejemplo particular. Una de las columnas
incluye la representaci·on gr·aca del ·arbol de b·usqueda.
Paso 0: la instancia consiste de 5 cl·ausulas que involucran 4 variables, a las cuales se les puede
asignar el valor verdadero (T = True) o falso (F = False). Dado que es el paso inicial, el ·arbol de
b·usqueda es vac·o.
Paso 1: en este paso DPLL selecciona aleatoriamente una variable, entre las cl·ausulas m·as cortas
y le asigna un valor para que satisfaga la cl·ausula a la cual pertenece, por ejemplo w = T . Entonces
se agrega un nodo y un arco, los cuales representan la variable seleccionada (w) y su valor de verdad
(en este caso T ) respectivamente.
Paso 2: se extraen, a partir de la ·ultima elecci·on, las implicaciones l·ogicas: las cl·ausulas que contienen la variable w se satisfacen y son eliminadas, las cl·ausulas que incluyen ¬w son simplicadas,
y el resto de las cl·ausulas se mantiene sin modicaciones. Si ninguna cl·ausula unitaria (es decir con
una sola variable) existe, entonces se debe seleccionar una nueva variable.
Paso 3: en este punto toma lugar la regla de divisi·on (splitting), por lo tanto otro nodo y otro arco
se agregan al ·arbol.
Paso 4: como en el paso 2, pero en este punto existen cl·ausulas unitarias, entonces las variables
que ellas contienen deben ser jadas de manera adecuada (esto es lo que se denomina propagaci·on).
Paso 5: la propagaci·on de la cl·ausula unitaria resulta en una contradicci·on, por lo tanto, el camino
corriente en el ·arbol de b·usqueda se marca con una C.
Paso 6: el algoritmo DPLL retrocede hasta la ·ultima variable en la que se produjo una divisi·on
(split) (x), invierte su valor, es decir le da el valor F y crea un nuevo arco.
Paso 7: se realiza lo mismo que en el paso 4.
Paso 8: La propagaci·on de la cl·ausula unitaria elimina todas las cl·ausulas, esto signica que se
encontr·o una soluci·on S.
En este ejemplo se muestra como DPLL encuentra una soluci·on para una instancia satisfacible.
Para una instancia no satisfacible, la no satisfacibilidad se prueba cuando al retroceder (paso 6) no es
1958
Paso Claúsulas Árbol de búsqueda
0
w ∨ ¬x ∨ y
¬w ∨ x ∨ z
¬w ∨ ¬x ∨ ¬y
¬w ∨ ¬x ∨ y
x ∨ y ∨ ¬z
1 split: w = T
2
x ∨ z
¬x ∨ ¬y
¬x ∨ y
x ∨ y ∨ ¬z
3 split: x = T
4 ¬y y
5
propagaci·on: y = F y = T
contradicci·on
c
6 volver al estado 3: x = F
c
7
z
y ∨ ¬z
8
propagaci·on: z = T y = T
soluci·on: w = T , x = F , y = T , z = T
c s
Tabla 1: Ejemplo de la resoluci·on de una instancia de 3-SAT utilizando el algoritmo DPLL.
1959
posible ninguna acci·on, es decir, todas las variables tomaron los valores T y F . En este caso todos los
nodos en el ·arbol de b·usqueda nal tendr·an sus dos arcos descendientes y las hojas, rotuladas con C
(una contradicci·on).
4. DPLL Y REDES NEURONALES (DPLL RN)
La idea central de DPLL RN es que a partir de un conjunto de f·ormulas satisfacibles generadas
aleatoriamente, se genera un conjunto de patrones que corresponden a las asignaciones ·optimas de
valores a variables que satisfacen dichas f·ormulas. Luego, se entrena una red neuronal con dichos
patrones y nalmente se ejecuta el algoritmo DPRN para un conjunto de f·ormulas satisfacibles y no
satisfacibles generadas aleatoriamente. En la gura 1 se puede observar un esquema gr·aco con las
distintas componentes del sistema.
Generacion aletaoria de formulas
SISTEMA DPLL_RN
Obtencion de asignaciones de verdad
Determinacion conjunto de entrenamiento
Entrenamineto de la red neuronal
Ejecucion del algoritmo DPRN
  



Figura 1: Componentes del sistema DPLL RN
El algoritmo DPRN, que es una parte central del sistema, puede ser considerado un algoritmo
h·brido ya que se basa en el algoritmo DPLL aumentado con el poder de las redes neuronales [8, 11].
DPRN tiene caracter·sticas propias que lo hacen interesante, dado que el mismo est·a basado en el
algoritmo DPLL pero haciendo uso de una red neuronal para que decida cu·al es la variable que debe
ser seleccionada en cada caso y con qu·e valor de verdad. De esta manera, DPRN permite determinar la
satisfacibilidad y no satisfacibilidad de f·ormulas que no se encuentran en el conjunto de entrenamiento
debido al poder de generalizaci·on de las redes neuronales.
Las etapas involucradas en la aplicaci·on del sistema DPLL RN son:
Generaci·on aleatoria de f·ormulas en forma normal conjuntiva (CNF): esta etapa consiste en la
generaci·on aleatoria de las f·ormulas utilizando el programa mkcnf [6].
1960
Obtenci·on de las asignaciones que hacen verdaderas las f·ormulas: el conjunto de asignaciones
de verdad que satisfacen las f·ormulas se selecciona usando un algoritmo de b·usqueda. La selecci·on est·a basada en las reglas que usa el algoritmo DPLL, de manera que es un algoritmo
exhaustivo que usa la regla del literal puro y la cl·ausula unitaria. Este algoritmo permite obtener todas las asignaciones posibles de valores para todas las variables y en todos los ·ordenes
posibles, y a partir de all· se seleccionan los caminos de longitud m·nima que satisfacen las
f·ormulas, esto es, los caminos de longitud m·nima en el ·arbol de b·usqueda generado por este
algoritmo.
Determinaci·on del conjunto de patrones de entrenamiento: el conjunto de entrenamiento se
genera en base a las asignaciones de verdad obtenidas con el algoritmo mencionado en el item
anterior, en donde por cada paso, se genera un conjunto de patrones analizando las decisiones
que se deben tomar en cada punto.
Entrenamiento de la red neuronal: una vez obtenidos los patrones de entrenamiento, se entrena con el simulador Stuttgart Neural Networks Simulator (SNNS) [10], una red neuronal de
m·ultiples capas con conexiones hacia adelante, utilizando el algoritmo backpropagation con
momento, con los par·ametros est·andar para este tipo de algoritmo. El n·umero de unidades de
entrada y de salida es el doble del n·umero de variables.
Ejecuci·on del algoritmo DPRN: en la ·ultima etapa se ejecuta el algoritmo DPRN, utilizando
como entrada un conjunto de f·ormulas satisfacibles y no satisfacibles no utilizado para el entrenamiento, dicho algoritmo determina la satisfacibilidad o no de las f·ormulas dadas.
5. AMBIENTE DE EJECUCIÓN
Un ambiente de ejecuci·on se puede utilizar para describir el contexto en el cual se ejecutan ciertas
tareas. Este trabajo en particular permite denir el contexto en el cual es posible utilizar el sistema
DPLL RN, de una manera amigable y haciendo uso de los benecios provistos por el lenguaje de
programaci·on Java (e.g. posibilidades de desarrollo de aplicaciones web, etc.). El ambiente permite
al usuario la posibilidad de elegir entre dos opciones para el ingreso de la f·ormula, una de ellas es
que el mismo genere una f·ormula de forma aleatoria y la otra opci·on es que el usuario ingrese la
f·ormula que ·el desee en forma manual. El ambiente entonces va a mostrar las asignaciones de verdad
que hacen verdadera la f·ormula, utilizando un ·arbol para tal n. La forma gr·aca del mismo permite
que el usuario conozca las asignaciones de verdad . En el caso que la f·ormula no sea satisfacible el
ambiente muestra un ·arbol vac·o.
5.1. Módulos que conforman el Ambiente
Obtenci·on del conjunto de redes neuronales
Aqu· se obtienen las redes neuronales necesarias para ejecutar el algoritmo DPRN del sistema
DPLL RN. Este conjunto de redes neuronales consta de una red para 3 variables, para ser
utilizada cuando se requiere determinar la satisfacibilidad de una f·ormula de 3 variables, una
para 4 variables, y as· siguiendo, cabe destacar que se podr·an tener m·as de una RN en cada
caso particular, y seleccionar cualquiera de ellas. Es decir, es necesario contar con un pool de
redes neuronales entrenadas seg·un lo descripto en la secci·on 4, para ser utilizadas cuando el
algoritmo DPRN lo requiera.
1961
Sub-sistema DPRN (del sistema DPLL RN)
El programa DPRN que forma parte del sistema DPLL RN utiliza un archivo con la f·ormula
a analizar y una RN de las obtenidas seg·un se explica en el punto anterior. Cuando un usuario
ingresa una f·ormula para ser analizada, con el n·umero de variables de la misma determina cual
red va a utilizar y abre el archivo de la red que corresponda, de aqu· se extrae toda la informaci·on
de la red que necesita el algoritmo.
Generador de f·ormulas aleatorias
El ambiente tiene una opci·on de generar f·ormulas de forma aleatoria y ·este informa sobre la
satisfacibidad o no de la misma. Por tal motivo se necesita de un m·odulo que realice la tarea de
generar una f·ormula de forma aleatoria en CNF, que tambi·en es parte de este ambiente.
Manejo de las f·ormulas
Una de las opciones del ambiente es que la f·ormula sea generada de forma aleatoria. En este
caso se solicita que se ingresen la cantidad de variables, la cantidad de cl·ausulas que debe contener la f·ormula y la semilla que debe ser utilizada por el generador aleatorio. La otra opci·on es
que el usuario ingrese la f·ormula que ·el desee, en este caso se solicita la cantidad de variables,
la cantidad de cl·ausulas y la f·ormula cuyas variables se denotan con letras may·usculas, comenzando desde la A. El formato de la f·ormula puede contener los operadores l·ogicos (∨ y ∧) y los
par·entesis que necesite. Sin embargo, estos ·ultimos son optativos dado que el sistema trabaja
con f·ormulas en forma normal conjuntiva.
Interface propiamente dicha
Cuando el ambiente se inicia muestra las dos opciones de ingreso de f·ormulas. Una es el ingreso
manual y la otra el aleatorio.
5.2. Un ejemplo utilizando el ambiente de ejecución
Cuando se inicia la ejecuci·on del ambiente el usuario va a ver una pantalla con las dos opciones
para el ingreso de f·ormulas. Una es el ingreso manual y la otra el aleatorio. A continuaci·on se muestra
un ejemplo completo del funcionamiento del ambiente.
En la gura 2 se puede ver la primer pantalla que muestra el ambiente.
Figura 2: Elecci·on de ingreso manual de una f·ormula
1962
Como se muestra en la pantalla luego de la elecci·on de la opci·on tiene la posibilidad de salir del
ambiente o aceptar, y continuar con el ingreso de la f·ormula. Cuando se presiona el bot·on de aceptar
se muestra la pantalla de la gura 3.
Figura 3: Ingreso de una f·ormula
En esta pantalla se solicitan tres datos que son:
Cantidad de variables de la f·ormula (la f·ormula a ingresar tiene 3 variables).
N·umero de cl·ausulas (la f·ormula a ingresar tiene 5 cl·ausulas).
La f·ormula en CFN: aqu· se debe ingresar la f·ormula para analizar la satisfacibilidad. Se pueden
omitir los par·entesis y los operadores l·ogicos (∨ y ∧). En este caso se ingres·o la siguiente
f·ormula omitiendo dichos operadores l·ogicos y par·entesis:
¬A¬B¬CB¬AC¬C¬BA¬AB¬C¬BAC
que se corresponde a la siguiente f·ormula :
(¬A ∨ ¬B ∨ ¬C) ∧ (B¬ ∨ A ∨ C) ∧ (¬C ∨ ¬B ∨ A) ∧ (¬A ∨ B ∨ ¬C) ∧ (¬B ∨ A ∨ C)
La pantalla de la gura 4 tiene como nalidad mostrar en forma gr·aca, a trav·es de un ·arbol, las
asignaciones de verdad que satisfacen la f·ormula ingresada. Dicho ·arbol se interpreta de la siguiente
manera: cada variable se muestra con un rect·angulo con su nombre y este puede tener dos ramas, la
rama de la derecha signica que a la variable se le ha asignado el valor verdadero y la rama de la
izquierda signica que tiene asignado el valor falso. De cada nodo siempre saldr·a una rama, porque
signica que ese es el valor de verdad que debe tener asignado para poder satisfacer la f·ormula (en el
caso que la f·ormula sea satisfacible).
El usuario puede extraer la asignaciones de verdad que hacen verdadera la f·ormula visualizando
el ·arbol como sigue. Comienza el recorrido del ·arbol desde la ra·z, cada nodo tiene el nombre de la
variable y obtiene su asignaci·on con solo ver cual es la rama que sale del nodo. Luego se sigue la rama
hasta otro nodo y se procede de la misma manera hasta que se haya examinado todos los nodos de
dicho ·arbol. En el caso de nuestro ejemplo, con s·olo visualizar el ·arbol se puede obtener las siguientes
asignaciones para las variables, t(B) = F y t(A) = F , las cuales satisfacen la f·ormula ingresada.
Sobre la variable C no aparece ninguna asignaci·on de verdad, lo signica que puede tener asignado
cualquier valor de verdad.
1963
Figura 4: Resultado de una asignaci·on de verdad t(A) = F y t(B) = F .
6. CONCLUSIONES
La idea central del presente trabajo fue la de desarrollar un ambiente de ejecuci·on que permita
utilizar las distintas componentes del sistema DPLL RN, sin necesidad de que el usuario tenga que
conocer los detalles de la implementaci·on de dichas componentes, y que adem·as, provea un entorno
de manera que la intefase con el usuario sea amigable. Por otro lado, tambi·en se obtuvo un algoritmo
h·brido basado en el algoritmo DPLL, el cual es uno de los m·as usados para prop·ositos pr·acticos,
combinado con las capacidades de aprender y generalizar de las redes neuronales. A partir de aqu· y
de los resultados obtenidos [8, 11] se puede esperar que esta herramienta sea un punto de comienzo
para lograr resultados m·as robustos, es decir, trabajar con una cantidad mayor de variables, hecho
fundamental en el crecimiento exponencial del problema SAT, y por ende en la complejidad de los
algoritmos necesarios para resolver instancias de este problema. Finalmente, es importante destacar
que en la bibliograf·a existente no se ha propuesto ning·un algoritmo con las caracter·sticas que tiene
el algoritmo DPRN [1, 7].
