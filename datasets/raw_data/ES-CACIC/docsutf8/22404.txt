Seguimiento de objetos en video usando contornos activos y bounding boxes
﻿
The automatic tracking of objects along a sequence of images has applications in different areas as robotics, animation,
security systems or medical diagnosis. The tracking algorithm used in this paper starts fitting the contour of an object,
using a B-Spline curve as the initial search region. The next step is to sample normal vectors at regularly-spaced points
along this curve and to detect points on the border of the object by applying some image-processing filter along the curve
normals. A good initial estimate is required for the tracking algorithm to be successful.
This paper presents a method to avoid parametrization errors when fitting the outline of the object at the beginning of the
tracking. It has the advantage of being simple and efficient. Conflicts when fitting the contour of the object are avoided
using an acceleration structure. The modified algorithm is tested against real videos with excellent results.
Keywords: Image Processing, Active Contours, Bounding Boxes, Video Tracking.
Resumen
El seguimiento de objetos en forma automática a lo largo de una secuencia de imágenes tiene aplicaciones en áreas tan
diversas como robótica, animación, sistemas de seguridad o diagnóstico médico. El algoritmo de seguimiento utilizado
en este trabajo comienza con la definición de una curva B-Spline que es el área inicial de búsqueda del contorno de un
objeto. Luego se consideran una serie de segmentos de rectas normales a esta curva y se aplica algún método de detección
de bordes para hallar puntos sobre el contorno a lo largo de las rectas. Para que el algoritmo de seguimiento del objeto sea
exitoso es necesario que la estimación inicial sea muy precisa.
En este trabajo se presenta un nuevo método estable y eficiente para evitar errores de parametrización al ajustar el contorno
del objeto con una curva B-Spline al comienzo del método de seguimiento. Se utiliza una estructura de aceleración para
evitar conflictos al estimar el contorno del objeto. El algoritmo modificado se prueba en videos reales y se observan
excelentes resultados.
Palabras clave: Procesamiento de Imágenes, Contornos Activos, Bounding Boxes, Seguimiento en Video.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
763
1 INTRODUCCI ÓN
El seguimiento de objetos en video es de gran utilidad en numerosas aplicaciones como robótica [16,
14], diagnóstico médico [6, 5, 20], monitoreo de sistemas de seguridad [7, 18], animación [28, 1, 22]
y análisis de imágenes de Radar de Apertura Sintética (SAR) [11, 10], entre otros ejemplos.
Los algoritmos de contornos activos y snakes son muy utilizados para seguimiento de objetos en
video, por su robustez y tratabilidad. El primer algoritmo de detección de bordes para imágenes ópticas, basado en evolución de curvas por medio de la minimización de la energía y cálculo variacional,
fue desarrollado por Kass et al. [15]. Se trata de curvas que se deforman hasta ajustar el contorno de
un objeto de interés.
En este trabajo se utiliza la representación de curvas B-Spline como herramienta fundamental en la
descripción de contornos. El contorno formulado por medio de curvas B-Spline, tiene varias ventajas
con respecto a otras representaciones de curvas porque permite control local, requiere pocos parámetros y es una función suave. Además de aplicarse al seguimiento de objetos en secuencias de video
[3, 2, 17], la representación B-Spline se utiliza también para la aproximación de formas [26, 21, 8] y
detección de bordes [4, 13].
Utilizamos aquí el algoritmo de seguimiento en secuencias de imágenes desarrollado por Blake et al.
[2] que utiliza la representación B-Spline para describir curvas y el espacio de formas. El algoritmo
comienza con una curva B-Spline inicial que ajusta al contorno del objeto en el primer cuadro de
la secuencia. Para encontrar esta curva es necesario hallar los puntos de borde del objeto. Con este
objetivo, se define un área inicial de búsqueda determinada también por una curva B-Spline y se
consideran rectas equiespaciadas normales a esta curva. Luego se aplica algún algoritmo de detección
de bordes sobre los segmentos de recta. Entonces la imagen se recorre por regiones en lugar de
hacerlo sobre toda la imagen, lo que significa un gran ahorro en costo computacional. Luego, la curva
inicial se deforma según movimientos permitidos, restringidos al espacio de formas. Sin embargo,
una mala elección de normales al comienzo del algoritmo de seguimiento puede significar un ajuste
poco adecuado, razón por la cual el algoritmo falla.
En este trabajo, presentamos una nueva solución para evitar los problemas que acarrea una mala
elección de segmentos de recta normales a la curva. Se utilizan Bounding Boxes para obtener una
curva B-Spline de ajuste muy preciso al comienzo del seguimiento.
Las Bounding Boxes se han utilizado en muchas aplicaciones, tanto para la detección aproximada de
colisiones [24, 27, 29, 25] como estructura de aceleración [19, 9, 12]. Esta representación simplifica
la geometría del objeto tratándolo como un rectángulo que lo contiene (de ahí caja contenedora).
Este trabajo está organizado de la siguiente manera: la sección 2 está dedicada a la representación de
curvas B-Spline, al ajuste de puntos por medio de B-Splines y al espacio de formas. En la sección 3
se explica la aplicación de filtros a lo largo de normales para detectar los puntos de borde de un objeto
y se discuten los problemas que surgen de una mala elección de normales. También se presenta el
método propuesto que utiliza Bounding Boxes para solucionar el problema del cruce de normales, lo
que constituye el aporte más importante de este trabajo.. En la sección 4 se muestran los resultados
obtenidos. Finalmente, en la sección 5 se presentan las conclusiones.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
764
2 FUNDAMENTOS TE ÓRICOS
En esta sección se presenta un resumen de las herramientas que utiliza el algoritmo de seguimiento:
la representación B-Spline para curvas, el ajuste de un conjunto discreto de puntos por una curva
B-Spline y el espacio de formas. Para más detalles ver [2, 23].
2.1 Curvas B-Splines
Dado los puntos de control Q0, . . . ,QNB−1 donde Qn = (xn, yn)T ∈ 2 con 0 ≤ n ≤ NB − 1 y un
conjunto de L nodos {s0 < s1 < . . . < sL} ⊂ , una curva B-Spline de orden d se define como la
suma ponderada de NB funciones polinomiales Bn,d(s) de grado d− 1 dentro del intervalo [si, si+1],
0 ≤ i ≤ L − 1. La curva B-Spline se construye como r(s) = (x(s),y(s))T con 0 ≤ s ≤ L − 1
r(s) =
NB−1
∑
n=0
Bn,d(s)Qn (1)
donde x(s) = B(s)TQx,y(s) = B(s)TQy y los vectores de peso Qx y Qy son las primeras y
segundas componentes de Qn, respectivamente.
El vector de funciones base B(s) se define como B = (B0,d(s), . . . ,BNB−1,d(s))T . Si se denota
U(s) =
(
B(s)T 0
0 B(s)T
)
(2)
entonces r(s) puede escribirse como r(s) = U(s)Q.
Dado los puntos D1, . . . , DN del plano de la imagen, donde Di = (xi, yi)T , i = 1, . . . , N , se desea
encontrar la curva B-Spline definida por los puntos de control Q0, . . . ,QNB−1 que mejor los ajusta.
Entonces, se debe satisfacer
xi = B(ti)TQx, yi = B(ti)TQy (3)
para ciertos valores ti, donde i = 1, . . . , N y NB ≤ N .
Ahora el problema consiste en hallar los puntos de control de manera que la curva B-Spline pase por
todos los puntos D = K
(
Qx Qy
)
, K ∈ N×NB , donde
D =



x1 y1
.
.
.
.
.
.
xN yN



,K =



B(t1)T
.
.
.
B(tN)T



(4)
Definiendo
t1 = 0
ti = NB
∑i
j=1 ‖Dj − Dj−1‖
∑N
j=1 ‖Dj − Dj−1‖
, 1 < i ≤ N (5)
la solución es
(
Qx Qy
)
=
{
K−1D si NB = N
K+D si NB < N
(6)
Si K es cuadrada entonces es inversible. Sin embargo, si NB < N la matriz no es inversible y por lo
tanto se debe calcular la pseudo-inversa.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
765
Figura 1: Tranformaciones afines aplicadas a los puntos de control de una curva B-Spline.
2.2 Espacio de Formas
Sea S = L(W,Q0) el conjunto de las transformaciones y sean X ∈ NX y Q ∈ NQ un vector que
representa los puntos de control que genera una curva B-Spline. Una transformación f : NX → NQ ,
f ∈ S asigna a cada vector X un vector Q tal que f(X) = Q, con Q = WX + Q0 donde Q0 es
la curva patrón o template contra la cual se miden las variaciones de las formas y W ∈ NQ × NX
es una matriz que corresponde a las transformaciones permitidas de Q0. Los movimientos permitidos
son la traslación, rotación y escalado.
Típicamente ocurre que NX  NQ, de manera que se restringe el desplazamiento de los puntos de
control a un espacio con menor dimensión. Así, se intenta preservar la forma de la curva, como se
ilustra en la Figura 1. En este gráfico se observa el resultado de aplicar las transformaciones permitidas
en el espacio de formas a una figura generada por curvas B-Spline (imagen de la izquierda). Al
restringir la transformación de la curva a movimientos permitidos en el espacio de formas, se preserva
la forma de la curva. Por el contrario, la manipulación arbitraria de los puntos de control no mantiene
la forma.
2.2.1 Espacio de las Similitudes Euclideano
Sea r0(s) = U(s)Q0 la curva patrón generada por el vector Q0. La matriz W que genera el espacio
de similitudes euclideanas se define como
W =
(
1 0 Qx0 −Qy0
0 1 Qy0 Qx0
)
(7)
donde la primera y la segunda columna actúan sobre las traslaciones horizontal y vertical, respectivamente. La tercera y cuarta determinan la rotación y la escala a partir del vector Q0. Es decir, cada
columna genera uno de los cuatro movimientos permitidos en este espacio.
Por ejemplo, tomando X = (1, 0, 0, 0)T se genera una traslación horizontal sobre la curva Q0
Q =
(
1 0 Qx0 −Qy0
0 1 Qy0 Qx0
)




1
0
0
0




+
(
Qx0
Qy0
)
=
(
Qx0 + 1
Qy0
)
(8)
De la misma manera, X = (0, y, 0, 0)T , X = (0, 0, f1(θ), f2(θ))T y X = (0, 0, z, 0)T determinan una
traslación vertical, rotación y escalado isotrópico, respectivamente.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
766
2.2.2 Espacio de Formas Afín Planar
Dadas una curva r0(s), una matriz de rotación y escalado M ∈ 2×2 y un vector de traslación
u = (u1, u2)T , una transformación afín de r0(s) está dada por r(s) = u + Mr0(s). El vector u y
las coordenadas de la matriz M representan los seis grados de libertad del espacio afín. La matriz de
formas W se define como
W =
(
1 0 Qx0 0 0 Qy0
0 1 0 Qy0 Qx0 0
)
(9)
Las primeras dos columnas de W representan las traslaciones horizontal y vertical, respectivamente,
mientras que las restantes determinan los movimientos de rotación y escalado vertical, horizontal y
diagonal. Como Q = WX + Q0, los elementos de X actúan como pesos en las columnas de W y
están dados por X = (u1, u2, M11 − 1, M22 − 1, M21, M12)T . Para más detalles sobre el espacio de
formas ver [2].
3 DETECCI ÓN DEL CONTORNO DE UN OBJETO
El algoritmo de seguimiento comienza definiendo un área inicial de búsqueda determinada por una
curva B-Spline. Luego se plantea una serie de segmentos de recta normales a esta curva y se hallan
los puntos de borde del objeto sobre estos segmentos. Finalmente se interpolan estos puntos por una
curva B-Spline. A partir de esta estimación inicial, se sigue al objeto utilizando como curva inicial
en una imagen, la curva encontrada en el cuadro anterior. Por esa razón es muy importante que el
ajuste en el primer cuadro sea muy preciso. El método trabaja restringiendo la transformación de una
curva B-Spline a movimientos permitidos dentro del espacio de formas. De esta manera, se preserva
la forma de la curva y es un gran ahorro en costo computacional, pero no es posible utilizarlo cuando
los movimientos del objeto de interés no son planares. La representación B-Spline tiene la ventaja de
que las transformaciones se aplican a los puntos de control en lugar de hacerlo en toda la imagen, lo
cual sería excesivamente costoso. El problema ocurre cuando los segmentos de rectas normales a la
curva inicial se entrecruzan, provocando que la curva semilla esté muy lejos de la solución óptima.
En esos casos el método falla.
3.1 Estimación del Contorno de un Objeto
Para hallar los puntos de borde, se define una curva B-Spline inicial de búsqueda y un conjunto de
segmentos normales a ésta. Luego se hallan los puntos de borde que intersecan a estas rectas, como
se ve en la Figura 2. Si un punto pertenece al borde del objeto entonces una muestra tomada en una
vecindad de ese punto exhibe una discontinuidad en el valor de los niveles de gris y por lo tanto, es un
punto de transición. Luego, se encuentra el punto de borde sobre la recta convolucionando los niveles
de gris tomados de la imagen con el operador [−2,−1, 0, 1, 2].
Una mala elección de normales puede implicar que los puntos de borde queden invertidos como
consecuencia del cruce de normales. Esto introduce errores en la parametrización de la curva, como
se ilustra en la Figura 3. Para seleccionar normales no conflictivas, se puede intentar reordenar los
puntos de borde. Sea R = {r(s0), . . . , r(sN)} un conjunto de puntos de muestra sobre la curva
de ajuste. Se aplica el filtro de detección de bordes para encontrar el conjunto de puntos de borde
Rf = {rf(s0), . . . , rf(sN)} sobre la curva característica. Se desea encontrar una función biyectiva
g : R → Rf , definida por g(r(si)) = rf(sj), 1 ≤ i, j ≤ N tal que no haya cruce de normales,
como se muestra en la Figura 4(b). Sin embargo, no está garantizado de que exista g y además, este
mecanismo es computacionalmente muy costoso.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
767
Figura 2: Detección de bordes. A partir de una estimación inicial del contorno del objeto, se trazan
rectas normales para encontrar los puntos de borde. n(si) es la normal en el punto si.
(a) Generación de rectas normales a la curva inicial. (b) La curva resultante no ajusta el contorno
del objeto como consecuencia del cruce de
rectas normales.
Figura 3: El cruce de rectas normales provoca errores en el ajuste del contorno del objeto.
Otra forma de evitar el problema del cruce de normales consiste en analizar secuencialmente el ángulo
formado por tres puntos de borde consecutivos, rf(si), rf(si+1) y rf(si+2). Se descarta n(si+1) y se
elimina el primer cruce si ang(rf(si), rf(si+1), rf(si+2)) < 45◦. De esta manera, este mecanismo
permite ignorar las normales conflictivas. La Figura 4(c) ilustra esta alternativa.
En este trabajo se propone el método de las Bounding Boxes (BB) para solucionar este problema.
Finalmente, una vez hallados los puntos de borde correctos, se construye una curva B-Spline que los
ajusta, como se explica en la Sección 2.1.
3.2 Bounding Boxes
La propuesta consiste en recorrer secuencialmente las normales de a pares. Para cada segmento normal se construye una BB y se realizan cuatro comparaciones. Sea Cf0 la BB generada por los puntos
C0, Cf de la siguiente manera
Cf0 = {P ∈ I | (mín(Cx0,Cxf) ≤ P x ≤ máx(Cx0 ,Cxf)) ∧ (mín(Cy0,Cyf) ≤ P y ≤ máx(C
y
0,C
y
f))}
(10)
donde I es la imagen. La Figura 5(a) muestra una BB determinada por C0, Cf .
Sea r(s) la estimación inicial de la forma del objeto en la imagen, n(si) y n(si+1) dos normales de
r(s) muestreadas consecutivamente y P el punto de intersección entre ambas. Para cada i se construye
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
768
(a) El cruce de normales provoca que
puntos de borde queden invertidos.
(b) Función de permutación g tal que
g(r(s
i
)) = r
f
(s
i+1
), g(r(s
i+1
)) =
r
f
(s
i+2
), g(r(s
i+2
)) = r
f
(s
i
)
(c) Ángulo formado por tres
puntos de borde consecutivos.
Figura 4: Posibles soluciones al problema del cruce de normales.
(a) Caja Contenedora. (b) P ∈ Crfi
r
i
. (c) P /∈ Crfi
r
i
.
Figura 5: Cajas contenedoras como solución al problema del cruce de normales.
Crfiri definida por r(si), rf(si). Si las normales se intersecan antes de alcanzar el borde del objeto, se
cumple que P ∈ Crfiri , como muestra la Figura 5(b). Entonces se descartan n(si+1) y rf(si+1). En
cambio, se considera rf(si+1) cuando P /∈ C
rfi
ri , como se ilustra en Figura 5(c).
Una vez seleccionados los puntos de borde, se construye la curva B-Spline que los ajusta.
El Algoritmo 1 muestra el resumen de este proceso de selección de puntos de borde.
Algoritmo 1 Algoritmo de estimación inicial del contorno de un objeto
1: Determinar una región de interés definida por una curva B-Spline.
2: Determinar una serie de segmentos equiespaciados sobre la curva B-Spline.
3: for all segmento s(i) do
4: Hallar la posición sobre el segmento s(i) donde se encuentra la máxima discontinuidad entre
los valores de s(i) convolucionando con el operador [−2,−1, 0, 1, 2].
5: Calcular el punto P de intersección entre el segmento s(i) y el último segmento aceptado S.
6: Construir la caja contenedora C determinada por S.
7: if P /∈ C then
8: s(i) y el punto encontrado se marcan como aceptados.
9: end if
10: end for
11: Construir la curva B-Spline que interpola los puntos encontrados.
XIII Congreso Argentino de Ciencias de la Computación
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
 
V Workshop de Computación Gráfica, Imágenes y Visualización
_________________________________________________________________________
 
 
769
4 RESULTADOS
En esta sección se presentan los resultados obtenidos al aplicar el algoritmo con la modificación del
método de las Bounding Boxes. La Figura 6 muestra una secuencia de cuadros de un seguimiento sin
evitar el cruce de normales. Se observa que las curvas de ajuste en cada cuadro no son aceptables,
razón por la cual el algoritmo de seguimiento falla.
En la Figura 7 se observa que las curvas B-Spline de ajuste en cada cuadro son apropiadas y el
algoritmo funciona correctamente obteniendo el contorno del objeto en cada cuadro.
5 CONCLUSIONES
En este trabajo se presenta un nuevo método para evitar errores de parametrización debido al cruce
de normales. El método de las Bounding Boxes permite obtener una curva B-Spline de ajuste muy
preciso. Esto es muy importante para inicializar los algoritmos de seguimiento de un objeto en video.
La solución presentada en este trabajo es estable y eficiente ya que requiere cuatro comparaciones para
determinar si la intersección entre dos normales consecutivas está dentro del rectángulo generado por
una recta. La aplicación del método propuesto presenta resultados visuales muy satisfactorios con un
aceptable costo computacional.
