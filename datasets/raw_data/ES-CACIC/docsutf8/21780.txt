Algoritmo de reunión espacio temporal usando estructura 3DR tree podada
﻿



The  join  query  is  one  of  the  most  important  operation  in  the  Database  Management  System  (DBMS). 

Because  of  the  modern  (DBMS)  have  incorporated  new  types  of  data  bases  (temporal,  spatial,  among 

others), it has become necessary to possess new algorithms to process join queries in these areas. Nowa- 

days  the  databases  have  been  receiving  major  importance  due  to  the  wide  variety  of  applications  that 

they need to process the spatial history of the objects. The spatio-temporal access methods proposed till 

now  are  orientated  to  trying  principally  timeslice  and  interval  query  and  they  do  not  approach  the  join 

query. In this work we present and evaluate a join space-temporal algorithm based on it structures 3DR- 

tree  and  that  beneﬁts  by  the  applied  pruned  technique  from.  Also  it  is  introduced  an  analytical  model 

about the algorithm that estimate the cost in terms of node or disk accesses. Finally the predictive behavior 

of the proposed model will be compared with the 3DR-tree cost model showing the accuracy of this model. 



Keywords: Spatiotemporal Join (STJ), 3DR-tree, Reuníon espacio temporal, Modelo de costo, 3DR-tree 

podado. 



   * 

    Este  trabajo  es  parcialmente  subvencionado  por  los  Proyecto  de  Tecnologías  Avanzadas  de  Bases  de  Datos  22/F314, 

Departamento de Informática, UNSL; y el Proyecto AL06-PF-013 Geometría Computacional. 

  ** 

    Parcialmente  ﬁnanciado  por  el  proyecto  Algoritmos  para  la  evaluacíon  de  consultas  espacio-temporales,  código  073218 

A/R de la Universidad del Bio-Bio. 

 _________________________________________________________________________ 

                                                                                                                             

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                237 


----------------------- Page 2----------------------
                                      XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



                                                          Resumen 



La consulta de reuníon (join) es una de las operaciones fundamentales en un Sistema de Administracíon de 

Bases de Datos (DBMS). Debido a que los (DBMS) modernos han incorporado nuevos tipos de bases de 

datos (temporal, espacial, entre otros), se ha hecho necesario contar con nuevos algoritmos para procesar 

consultas de reuníon en esas áreas. Actualmente las bases de datos espacio-temporales han ido cobrando 

mayor importancia debido a la amplia variedad de aplicaciones que requieren procesar la historia espacial de 

los objetos. Los métodos de acceso espacio-temporales propuestos hasta ahora estan orientados a procesar 

principalmente  consultas  de  tipo  time-slice  y  de  tipo  interval  y  no  abordan  la  consulta  de  reuníon.  En 

este trabajo presentamos y evaluamos un algoritmo de reuníon espacio temporal basado en la estructuras 

3DR-tree y que se beneﬁcia por la técnica de podado aplicada. Tambíen se introduce un modelo analítico 

del algoritmo que estima el costo en términos de accesos a nodo o accesos a disco. Finalmente se evalua el 

comportamiento predictivo del modelo propuesto con el modelo original de costo del algoritmo de reuníon 

espacio-temporal 3DR-tree mostrando la precisíon del mismo. 



1  Introduccíon. 



1.1 Conceptos preliminares. 



Los objetos espacio-temporales, esto es objetos cuyo atributo espacial cambia a través del tiempo, aparecen 

en muchas aplicaciones [5,9,11]. La naturaleza de tales aplicaciones requiere del procesamiento de grandes 

cantidades  de  datos  espacio-temporales  generados  de  manera  muy  frecuente.  El  procesamiento  eﬁciente 

de  consultas,  sobre  estos  volúmenes  de  datos,  demanda  de  nuevos,  soﬁsticados  y  eﬁcientes  esquemas  de 

indexacíon o métodos de acceso espacio-temporales. Los métodos propuestos hasta ahora apuntan princi- 

palmente  a  resolver  dos  tipos  de  consultas  espacio  temporales  conocidas  como  time-slice  y  time-interval 

[12]. El primer tipo recupera todos los objetos que intersectan un rango espacial, en un instante de tiempo 

especiﬁco, en cambio el segundo extiende la idea a un intervalo de tiempo. Otro tipo de consultas en ambi- 

entes espacio-temporales de reconocida importancia en [8,11,10] es el de reuníon para el cual, de acuerdo 

a lo que conocemos, no existen esquemas de índices ni algoritmos, salvo 3DR-tree [20] en donde la reuníon 

espacio-temporal corresponde a una reuníon espacial considerando el tiempo como otra dimesíon espacial 

como condicíon indispensable para su procesamiento eﬁciente. 



1.2 Deﬁnicíon del Problema. 



La operacíon de reuníon espacial, S 1 θ  S2, combina dos conjuntos de objetos espaciales S1 y S2, basado 

en el predicado θ. En el ambitó       espacio temporal se puede deﬁnir la consulta de reuníon espacio-temporal 

como  S 1 θ∧τ      S2,  pero  ahora  S1  y  S2  son  dos  conjuntos  espacio-temporales,  donde τ  corresponde  a  un 

predicado temporal y θ al espacial. 

Por lo tanto y de acuerdo a [8]        “Dadas dos relaciones espacio-temporales S 1 y S2, la consulta de reuníon 

espacio-temporal  se  deﬁne  como  la  operacíon  de  hallar  los  pares  de  objetos  que  pertenecen  a  ambos  con- 

juntos y cuyas extensiones se intersectaron durante el intervalo de tiempo t  ” 



De  esta  forma  podemos  responder  consultas  como  :  Encontrar  todos  los  autos  que  tuvieron  una  colisíon 

el dia de ayer. Suponiendo que el conjunto contiene todas las posiciones de los autos, la consulta anterior 

implica  buscar  todos  los  autos  cuyas  trayectorias  se  intersectaron  en  el  intervalo  de  tiempo  consultado. 

Claramente esta consulta se resuelve por medio de una reuníon espacio temporal. 



 _________________________________________________________________________ 

                                                                                                                              

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                 238 


----------------------- Page 3----------------------
                                       XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



2  Antecedentes. 



En el modelo de dato espacio-temporal, los objetos espacio-temporales son aquellos que pueden cambiar 

su  forma  y  su  posicíon  en  el  espacio,  o  cambiar  su  forma  sin  cambiar  la  posicíon  o  cambiar  su  posicíon 

y  no  su  forma.  En  este  campo,  y  tomando  como  ejemplo  objetos  en  movimiento  cuya  geometria  propia 

no  se  modiﬁca,  la  operacíon  de  reuníon  espacio-temporal  tiene  como  antecedente  la  propuesta  por  [1]  y 

que  se  aplica  sin  modiﬁcaciones  en  la  estructura  de  dato  3DR-tree.  Como  nuestro  algoritmo  de  reuníon 

espacio-temporal  se  basa  en  este  método  de  acceso,  en  esta  seccíon  describiremos  el  mismo  junto  con  el 

algoritmo de reuníon para dicha estructura y su modelo de costo. 



2.1 Método de acceso espacio-temporal 3DR-tree 



3DR-tree, es un método de acceso espacio-temporal que considera el tiempo como una dimensíon adicional 

a  las  coordenadas  espaciales.  De  esta  forma  cuando  un  objeto,  en  un  espacio  de  2  dimensiones,  cambia 

su posicíon o forma geométrica se inserta un MBR formado por 2 puntos en 3 dimensiones. Un MBR es 

un “rectángulo mínimo envolvente”, el cual es capaz de contener los atributos espaciales del objeto. Este 

rectángulo  mínimo  es  la  aproximacíon  geométrica  de  un  objeto  real,  que  se  guarda  en  el  nodo  hoja  del 

árbol, y los nodos internos representan una sucesíon de regiones rectangulares minimales, cada una de las 

cuales controla un nodo en el nivel inferior. 

La estructura 3DR-tree es muy eﬁciente en el uso del almacenamiento y en el procesamiento de consultas 

de  tipo  time-interval.  Sin  embargo,  una  de  sus  principales  desventajas  es  su  ineﬁciencia  para  consultas 

de tipo time-slice debido a la gran altura que puede alcanzar provocada por la gran cantidad de MBR’s 

que se deben insertar. Esta deﬁciencia se reduce considerablemente gracias a la técnica de podado que se 

aplica a la estructura de indexacíon como se explica en la Seccíon 3. 



2.2 Algoritmo de reuníon espacio-temporal basado  en 3DR-tree 



Dado que un 3D R-tree es un R-tree en un espacio de 3 dimensiones, la implementacíon de la consulta de 

reuníon  espacio-temporal  se  resuelve  en  forma  directa  utilizando  el  procedimiento  propuesto  en  [1]  para 

la  reuníon  espacial  y  que  se  muestra  en  el  Algoritmo  1.  Dicho  algoritmo  supone  que  los  dos  conjuntos 

de  objetos  tienen  disponible  un índice  espacial  basado  en  R-tree.  Cabe  destacar  que  el  procesamiento 

de  la  reuníon  espacial  considera  dos  etapas:  ﬁltrado  y  reﬁnamiento.  En  la  etapa  de  ﬁltrado  se  obtiene 

un  superconjunto  de  objetos  los  cuales  son  seleccionados  de  acuerdo  a  su  aproximacíon  espacial(MBR). 

Posteriormente,  en la  etapa de reﬁnamiento (utilizando la  geometría exacta de  los objetos)  se  veriﬁca si 

se cumple o no el predicado espacial. El procedimiento descrito por el Algoritmo 1 (SJ) se utiliza para la 

etapa de ﬁltrado y funciona tanto si los árboles tienen igual o diferente altura. 



2.3 Modelo analítico para la reuníon espacial usando  R-tree 



Ya que 3DR-tree es utilizado para comparar nuestro algoritmo de consulta de reuníon espacio-temporal, 

es  que  en  esta  seccíon  describimos  el  modelo  de  costo  que  se  plantea  para  la  reuníon  espacial.  Primero 

explicamos un modelo para consultas espaciales de tipo “window query” y luego para la consulta de reuníon 

espacial. 

Existen varias propuestas para estimar el rendimiento de una consulta espacial (windows query) sobre un 

R-tree [6,10,13,16,18,19]. Uno de los modelos más conocido es el descrito en [16,19]. 

En [19] se propone un método para estimar el costo de una operacíon de reuníon espacial. Dicho modelo 

asume  un  espacio  multidimensional  y  que  existen  dos  conjuntos  espaciales  de  cardinalidad  NR1                    y  NR2 

respectivamente y que cada uno de ellos cuenta con un R-tree, R1 y R2. El objetivo del modelo es obtener 

el  número  promedio  de  nodos  (NA)  accesados  o  número  promedio  de  bloques  de  disco  leidos  (DA)  por 

una operacíon de reuníon espacial. La diferencia entre NA y DA se deben a que en el cálculo de NA no se 



 _________________________________________________________________________ 

                                                                                                                                  

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                     239 


----------------------- Page 4----------------------
                                        XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



Algorithm  1 Algoritmo para procesar Reuníon espacial de objetos espacio- temporales 

  1: SJ(R1, R2) {R1 y R2 corresponden a nodos de R-tree(3DR-tree)} 

  2: for  all E 1 in R1 do 

  3:    for  all E2 in R2 do 

  4:       if  IntersectMBR(E 1.MBR, E2.MBR) then 

  5:          if  R1 y R2 son hojas then 

  6:             output(E 1.Oid, E2.Oid) 

  7:          else if  R1 es hoja then 

  8:             ReadPage(E2.ptr) 

  9:             SJ(E 1.ptr, E2.ptr) 

 10:          else if  R2 es hoja then 

 11:             ReadPage(E 1.ptr) 

 12:             SJ(E 1.ptr, E2.ptr) 

 13:          else 

 14:             ReadPage(E 1.ptr) 

 15:             ReadPage(E2.ptr) 

 16:             SJ(E 1.ptr, E2.ptr) 

 17:          end if 

 18:       end if 

 19:    end for 



20:  end for 



considera un sistema de buﬀer mientras que para DA si. De esta forma la desigualdad DA  ≤ NA siempre 

se  cumple.  En  primer  lugar,  suponiendo  que  R1  y  R2  tienen  la  misma  altura  h  y  que  las  dos  raíces  se 

almacenadas en memoria, el valor de NA según[19] se deﬁne en la Ec.(1) : 



                                                            h−1 

                                    NA        (R  , R  ) =  {NA(R  , j) + NA(R  , j)}                                            (1) 



                                         total   1   2                    1                2 

                                                            j =1 



donde NA(Ri ;j ) es el número promedio de nodos en el nivel j del R-tree i y está dado por : 



                                                                 n 

                                NA(Ri , j) = NR2 ,j .NR1 ,j   min{1, (sR1 ,j,k  + sR2 ,j,k)}                                     (2) 



                                                                k=1 



y según [18] el costo total de la reuníon espacial vale: 



                       h−1         ⎛          n                                              n                          2⎞ 

    NA(R  , R  ) =  N              ⎝          [S          + S        ] + 1 + N              (S           + S           )   ⎠ 

            1   2             R1 ,j  NR2 ,j        R1 ,j,k     R2 ,j,k           R2 ,j+1          R1 ,j,k     R2 ,j+1,k          (3) 



                       j =1                  k=1                                           k=1 



Pero en la expresíon para la cantidad de nodos promedio por nivel debemos tener en cuenta el rango de 

crecimiento  de  los  mismos  a  través  del  tiempo  en  la  estructura.  Luego  debemos  considerar  el  efecto  del 

tiempo como lo expresa [14]: 

                                              Ni,T  = Ni,0  + Ni,0  · (T − 1) · a∗                                               (4) 



donde Ni,T     es el número total de objetos del árbol i al cabo de un tiempo T, Ni,0                  es el número incial de 

objetos en el árbol i (T=0) y a∗         es el rango promedio de crecimiento en la estructura. En caso de haber 

variacion de la forma del objeto con el paso del tiempo en  a∗                  se debe considerar el promedio de cambio 

de forma ams      con lo cual a∗  = aext  + ams  − aext  · ams        [14]. 



3. Algoritmo de Reuníon espacio-temporal usando 3DR-tree podado. 



3.1    Estructura espacio-temporal APR-tree. 



La estrategia de particionar el árbol principal de indexacíon la aplicamos para reducir su altura, generando 

varios árboles 3DR-tree-podados. Un arbol            3DR-tree-podado es una estructura arborea 3DR-tree pero de 

 _________________________________________________________________________ 

                                                                                                                                  

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                      240 


----------------------- Page 5----------------------
                                       XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



menor  altura  la  cual  se  obtiene  dividiendo  la  estructura  principal  en  múltiples  3DR-trees  responsables 

cada uno de un intervalo temporal Li           < T . 

Una idea similar es la que se propone en [7] donde dividen el árbol principal en arboles                  más pequeeños de 

acuerdo con el tamaaño de la carga de trabajo, llamándo al resultado de la particíon estructura APR-tree. 

En esta estructura el intervalo temporal Li  que administra cada 3DR-tree-podado depende de la carga de 

trabajo de la estructura principal. En la Figura 1 se puede observar las longitudes temporales L1 , L2  y Li 

de las estructuras R  , R       y R   del APR-tree. 

                         1    2     i 



                                              Figura 1: Estructura APR-tree 



El APR-tree no comparte nodos, pero el particionado del árbol principal genera duplicados en los arboles 

podados. Una entrada tiene la forma Aid, s, [t  , t  ), donde id es el identiﬁcador del objeto,  s es el MBR 

                                                         s   e 



espacial, y ts , te  son los instantes en que el objeto se ha ingresado a la base de datos y en que se ha modiﬁca- 

do. Cuando una entrada por ejemplo A1  intersecta el límite del intervalo temporal L1  entre las estructuras 

R   y  R  ,  se  divide  el  lifespan  de  la  entrada  en  dos  y  obtenemos A      id, s, [t  , t  ) y  A  id, s, [t  , t  ) in- 

  1      2                                                                         11         s  2        12          2  e 



sertándo A     en R    y A     en R  . Esto es una limitacíon a la hora de realizar la búsqueda en los nodos para 

             11       1      12      2 

determinar los pares de objetos que se solapan. Sin embargo esta limitacíon se ve minimizada gracias a la 

reduccíon en altura obtenida en la divisíon de la estructura principal y por la gran reduccíon de espacio 

muerto obtenida por el fraccionamiento de los datos. 



3.2    Nuestra propuesta . 



Sean los conjuntos S1 con N1 objetos espacio-temporales con una historia T1 y S2 con N2 objetos y una 

historia  T2.  Aplicando  la  metodología  de  particíon  de  [7]  obtenemos  K1  y  K2  árboles  podados  de  cada 

conjunto y cuyas raíces e intervalos temporales guardamos en arreglos A y B respectivamente, es decir: 

A = {S 1  , S1  , S1  , ......, S1   }         y          B = {S2  , S2  , S2  , ......, S2    } 

           1    2     3           K 1                                1     2    3           K2 



Siendo los intervalos temporales de cada conjunto : 

T 1 = {L1  , L1  , ......, L1    }         y          T 2 = {L2  , L2  , ......, L2   } 

            1     2          K 1                                  1    2           K2 



Una  vez  ﬁnalizado  el  paso  anterior  se  deﬁne  el  intervalo  de  vida  promedio  por  conjunto,  L1  y L2  como 

        

          K 1                                                  K 1 

                                                                

          i=1 L1i 

L1 =               , donde (L1i  ∩ L1i+1) = ∅           y          L1i  = T 1, análogamente para L2. 

           K 1 

                                                               i=1 



Partiendo de los arreglos A y B pasamos a procesar la reuníon implementando el Algoritmo 2 sobre los pares 

de estructuras de A y B. Este algoritmo utiliza la informacíon de que los conjuntos A y B se encuentran 

ordenados por el tiempo. El algoritmo comienza eligiendo el intervalo más antiguo entre los conjuntos A 

y B. Luego veriﬁca todos aquellos intervalos que se intersectan con él y cumplan que el límite inferior del 

intervalo que intersecta sea inferior al límite superior del intervalo más antiguo. Se veriﬁca entonces que los 

3DR-tree-podados responsables de esos intervalos, se intersecten espacialmente y si cumplen esa restriccíon 

entonces se procesa la reuníon espacial simple (Algoritmo 1: SJ(RA ,RB  )). En este algoritmo se modiﬁca 

                                                                                  i     j 



el ﬁnal de la línea 4, agregando AND (E  .t         ≤ R1.t  ) AND (E  .lifespan ∩ E  .lifespan), a efectos de tener 

                                                2  e          e            1                 2 



en cuenta la existencia de duplicados generados por la metodología de particíon de la estructura principal 

 _________________________________________________________________________ 

                                                                                                                               

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                  241 


----------------------- Page 6----------------------
                                           XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



y para veriﬁcar que las entradas cumplen con el predicado de la reuníon espacio temporal. A continuacíon 

se selecciona el siguiente intervalo más antiguo y se repite el proceso hasta alcanzar el límite K 1 o K 2 del 

menor de los conjuntos tratados. 



Algorithm  2 Algoritmo de reuníon mejorado sobre arboles podados de A y B 

  1: Filtrar(A,B) {RAi        y  RBj   son 3DR-tree-podados de A y B respectivamente} 

  2: i=0; j=0; 

  3: while  (i < K 1 and j < K 2) do 

  4:     if (RA  .t  ≤ RB  .t  ) then 

                 i s        j  s 



  5:        if (RA  .t  > RB  .t  ) then 

                    i e        j  s 

  6:           if  IntersectMBR(RA  .MBR, RB  .MBR) then 

                                       i             j 

  7:              SJ(< RAi , RBj     >) 

  8:           end if 

  9:           Antiguo(RA  , RB  ) 

                               i     j 

 10:        else 

 11:           i++; 

 12:        end if 

 13:     else 

 14:        if (RB  .t   > RA .t  ) then 

                    j  e       i  s 



 15:           if  IntersectMBR(RA  .MBR, RB  .MBR) then 

                                       i             j 

 16:              SJ(< RAi , RBj     >) 

 17:           end if 

 18:           Antiguo(RA  , RB  ) 

                               i     j 

 19:        else 

20:            j++; 

21:         end if 

22:      end if 

23:  end while 



Algorithm  3 Algoritmo que mantiene el arbol podado más antiguo de A y B 

  1: Antiguo(RA  ,RB  ) 

                     i     j 



  2: if  (RA  .t  > RB  .t  ) then 

             i  e        j  e 

  3:     j++; 

  4: else 

  5:     i++; 



  6: end if 



El algoritmo 2 procesa exactamente aquellos 3DR-tree-podados que se intersectan temporalmente, cuyo 

costo  se  reduce  por  la  restriccíon  de  interseccíon  espacial  que  pueda  existir  entre  pares  de  3DR-tree- 

podados. 



4.  Modelo  de costo 



Asumimos  que  todos  los  objetos  están  uniformemente  distribuidos  en  un  espacio  d-dimensional[18].  En 

segunda instancia, la historia T de la base de datos se ha particionado en K subestructuras de altura Hi , 

obteníendose K 3DRp-tree (3DR-tree podado, en adelante árbol). Los que son responsables de un intevalo 

de vida (lifespan) promedio L              = K        L /K 

                                         i       i=1    i 



Sea NR  ,j    el  número  de  nodos  del  árbol i  en  el j-ésimo  nivel,  y  sea  Pi,j           la  probabilidad  de  que  un  nodo 

          i 



del  árbol  i,  a  nivel j    sea  visitado  para  responder  la  consulta  de  reuníon.  Suponiendo  que  los  tamaaños 

promedios  espacial  y  temporales  de  los  nodos  de  los  árboles  son  iguales.  Entonces  la  cantidad  de  nodos 

accesados para responder una consulta de reuníon espacio-temporal que involucre un unicó                                     árbol de A y 

un unicó    objeto del conjunto B estará dada por la Ec(3). 



4.1 Costo de la reuníon mejorada 



De acuerdo a estas consideraciones aplicadas al algoritmo de reuníon espacio-temporal mejorado sobre los 

árboles de los conjuntos A y B tenemos: 

 _________________________________________________________________________ 

                                                                                                                                              

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                                 242 


----------------------- Page 7----------------------
                                    XIII Congreso Argentino de Ciencias de la Computación 



 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



                                                                

                                     Cuadro 1: Lista  de  sımbolos  usados 

    Símbolo       Deﬁnicíon 

       M           capacidad máxima del nodo 

        f          fanout promedio del nodo 

        c          capacidad promedio de nodo en  % 

        h          altura del arbol primario 3DR-tree . 

        H          altura promedio del subarbol podado 3DRp. 

       Ni          Número de objetos en el conjunto inicial de datos 

       Ni,j        Número de entradas del arbol i en el nivel j. 

       Di          Densidad de nodo a nivel i 

      S 1,S2       Conjuntos de datos 1 y 2 

        ai         Agilidad del árbol i 

        T          Número total de instantes de tiempo en la historia de la base 

        Li         amplitud del intervalo de vida de un arbol      podado; 

       si,j        Tamaaño promedio del nodo s en el arbol i en el nivel j 

      NAi          Número promedio de nodos accesados por la operacíon en el arbol i 

       NA          Número total promedio de nodos accesados en la reuníon 

 C (ST J )3DRp     Costo de reuníon espacio temporal sobre 3DR podado. 

        K          Número de arboles podados . 



                                                                       

                                  CST J3DR1   = [C(A) + C(B)] · P      · C(SJ)3DRp 



                                                                                                   

donde C(A)=K1 y C(B)=K2 son el costo leer los conjuntos A y B respectivamente y P                   es la probabilidad 

de interseccíon espacial de los 3DR-tree-podados de A y B. En este caso se trata de hallar la probabilidad 

de interseccíon del MBR que cubre todo el 3DR-tree-podado de uno de los árboles del conjunto A, con el 

MBR que cubre todo un 3DR-tree-podado del conjunto B. Observamos que el área máxima que determinan 

estos dos 3DR-tree-podados es igual a la suma de sus respectivos MBR (RA .MBR + RB  .MBR), siendo 

                                                                                      i              j 



el universo muestral el área ocupada por el MBR de todo el conjunto B y cuya expresíon esta dada por 

S2.MBR  =  K2        · H −1 N 2j,n   · s2j,n ,  donde N 2j,n es  la  cantidad  promedio  de  nodos  del j-ésimo  árbol 

                j =1    n=1 



podado del conjunto B a nivel n y s2j,n  es el tamaaño promedio del nodo de ese árbol a nivel n. Relacionando 

ambas  expresiones  a  través  del  concepto  de  probabilidad,  determinamos  que  la  probabilidad  espacial  de 

interseccíon de los árboles podados RAi     y RBj    esta dada por : 



                                                 RA .MBR + RB  .MBR 

                                                     i              j 

                                          P   = 

                                                          

                                            θ              H −1 

                                                   K 2 ·   n=1  N 2n  · s2n 



                                     H −1                                                H −1 

            donde : RA .MBR =   N 1              · s1           y        RB  .MBR =   N 2            · s2 



                         i                    i,n    i,n                     j                    j,n    j,n 

                                      n=1                                                n=1 



s1i,n es  el  tamaaño  promedio  de  los  nodos  del i-ésimo  3DR-tree-podado  del  conjunto  A  ∈ S 1  a  nivel n y 

s2j,n es el tamaaño promedio de los nodos del j-ésimo 3DR-tree-podado del conjunto  B  ∈ S2 a nivel n y 

cuyos valores se obtienen de la ecuacíon: si,n  = Di,n /Ni,n        [19]. En la ecuacíon utilizaremos la expresíon 



                           

para la probabilidad P      = min [1; P ] dada por [14]. 

Luego reemplazando valores nos queda: 



                               =⇒ C                = [K 1 + K 2] · min [1; P  ] · C (SJ )                            (5) 

                                      (STJ1)3DRp                             θ 



C (SJ )  es  el  costo  de  la  reuníon  de  los  elementos  de  las  estructuras  de  RAi y  RBj que  pertenecen  a  los 

arreglos A y B y que satisfacen el predicado de reuníon espacio-temporal. 

 _________________________________________________________________________ 

                                                                                                                      

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                          243 


----------------------- Page 8----------------------
                                        XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



La expresíon para el costo C (SJ ) de acuerdo a la Ec(3) considerando el intervalo temporal de los arboles 

podados, vale: 



                                          Hj −1 

                       C(SJ)3DRp  =          NRBj,n       · NRAi,n    · Pi,n  + 1 + NRAi,n+1     · [ Pi,n+1]2                      (6) 



                                           n=1 



donde  N           = [N       + N        (L  − 1) · a  ]  es  el  número  de  nodos  del  árbol i  al  cabo  de  un  período  de 

           RAi,n         R  ,n      R  ,n  i          ∗ 

                           i         i 



tiempo Li     (lifespan del arbol    i) a nivel n, y NR  ,n  = (Ni,n /f ) es la cantidad inicial de nodos en el i-ésimo 

                                                             i 



arbol  podado a nivel n, donde Ni          es la cantidad inicial de objetos del árbol podado, cuya expresíon esta 

dada por : 



                                                                  (Nt /K) 

                                                     Ni  = 

                                                            (Li  − 1) · a % + 1 



donde Nt  es la cantidad de objetos del 3DR-tree sin podar al cabo de la historia T; con lo cual la cantidad 

de objetos en un árbol podado al cabo de Li              instantes de tiempo esta dada por : 



                                                 NLi   = Ni  + Ni  · (Li  − 1) · a∗                                                (7) 



5  Evaluacíon. 



En esta seccíon comparamos la eﬁcacia del modelo propuesto con el modelo 3DR-tree. La razón de usar 

3DR-tree  es  que  es  uno  de  los  métodos  más  eﬁcientes  para  procesar  consultas  considerando  intervalos 

temporales  largos  teniendo  un  rendimiento  muy  similar  a  MV3R-tree  [15].  Consideramos  conjuntos  de 

hasta  50.000  objetos  de  tipo  punto  los  que  se  distribuyeron  uniformemente  en  el  espacio.  Consideramos 

una  historia  T1  de  100  instantes  de  tiempo  y  para  T2  de  100  y  200  instantes  de  tiempo.  La  unidad  de 

medida utilizada correspondío a la cantidad de bloques de disco (1024 bytes) leídos al ejecutar la operacíon 

de reuníon espacio temporal. 



                                  Figura 2: Costo en funcíon del cambio de frecuencia 



 _________________________________________________________________________ 

                                                                                                                                    

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                        244 


----------------------- Page 9----------------------
                                       XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



5.1 Comparacíon analítica 



El rendimiento de 3DR-tree se obtuvo mediante el modelo de costo descrito en la Seccíon 2.3 Ec.(3). 

El  total  de  objetos  a  insertar  en  el  3DR-tree  se  obtuvo  con  la  Ec.(4),  y  el  total  de  objetos  a  insertar  en 

los 3DR-tree-podados se obtuvo con la Ec.(7). Por otro lado consideramos una densidad inicial D0  = 0,2, 

con una capacidad por nodo de 36 entradas y una capacidad promedio de llenado de 67 % . Se adoptó un 

valor K1=10 para la particíon del la estructura principal de cada conjunto de datos y se obtuvo un inter- 

valo temporal promedio por árbol podado de Li  = 10 % de T . Para el conjunto S2 adoptamos un rango 

de K2=(5,10,20,40) obteniendo un rango de intervalos temporales promedios para cada valor de K2. Por 

otro lado tambien se probaron extensiones temporales en un rango de variacíon desde T1=100 unidades 

temporales, y T2=100 y 200 unidades temporales. 



                                    Figura 3: Costo de la reuníon espacio-temporal 



El gráﬁco de la Figura 2 se ha obtenido mediante la implementacíon de 3DR-tree y APR-tree. En dicha 

ﬁgura es posible observar el rendimiento del modelo para la reuníon espacio-temporal sobre las estructuras 

podadas respecto de la consulta sobre una estructura 3DR-tree sin podar. Los resultados están en funcíon 

del  cambio de frecuencia a %, normalmente llamado movilidad, la cual representa el porcentaje de objetos 

que cambian su posicíon en cada instante de tiempo. La diferencia observable se debe fundamentalmente 

a la reduccíon en altura de los árboles respecto de la altura del arbol           principal y la reduccíon del orden de 

complejidad de O(K 1 · K 2)del Algoritmo 1 a O(K 1 + K 2) dada por el Algoritmo 2. Esta característica se 

ve reﬂejada en el tamaaño promedio del nodo que al reducir la altura y la cantidad de objetos de búsqueda 

por árbol, la probabilidad de interseccíon entre los nodos crece en proporcíon al tamaaño de los mismos, lo 

cual redunda en una mayor exactitud en el ﬁltrado de las extensiones espaciales. 



En  la  Figura  3  se  puede  observar  el  efecto  de  mejora  que  se  obtiene  al  particionar  la  estructura  3DR- 

tree  principal  en  diferentes  cantidades  de  intervalos  temporales  pero  manteniendo  igual  rango  temporal 

para  ambos  conjuntos  de  datos  e  igual  cantidad  de  particiones  K .  En  cambio  cuando  aumentamos  el 

rango temporal para un conjunto y variamos la cantidad de particiones, el costo es menor para valores de 

K 2 > K1 . Esto se observa en la Figura 4. Esta diferencia se basa en que los intervalos temporales Li  para 

 _________________________________________________________________________ 

                                                                                                                                

    

  IV Workshop de Ingeniería de Software y Bases de Datos                                                                   245 


----------------------- Page 10----------------------
                                      XIII Congreso Argentino de Ciencias de la Computación 



  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 



                            Figura 4: Costo para diferentes valores de K2 y distinto T 



valores pequeeños de  K 2, aumentan y este aumento genera una gran cantidad de entradas en los arboles 

podados lo que redunda en un aumento del costo. 



6.  Conclusiones. 



En este trabajo se presenta un algoritmo para realizar la reuníon espacio-temporal basado en la estructura 

3DR-tree podada (APR-tree). La aplicacíon de la metodología de poda permite reducir la altura del árbol 

de búsqueda y por lo tanto reducir el costo de las operaciones de consulta que se realizan. Se deﬁnío un 

modelo de costo para nuestro algoritmo. Usando los modelos de costo de 3DR-tree y el de nuestro algoritmo, 

se compararon los rendimiento de la reuníon espacio-temporal usando ambas estructuras. 

Como se ha podido observar el costo de la reuníon espacio temporal sobre los árboles podados es bastante 

menor que la observada para toda la estructura sin podar. 

El siguiente paso en este trabajo es comparar la eﬁcacia del modelo descrito, implementando el algoritmo 

usando el lenguaje c++ sobre una plataforma linux. Una vez realizado esto se determinará cuan ajustado 

a la realidad se comporta el modelo establecido para ambos algoritmos de reuníon (join) sobre 3DR-tree. 

Como     trabajo   futuro   se pretende    ahondar    en   el estudio   de  los  algoritmos    de  reuníon  (join)  espacio- 

temporales,  en  particular  para  consultas  del  tipo  “Hallar  las  colisiones  de  autos  que  ocurrieron  el  dia 

de  ayer  en  la  zona  céntrica”.  Este  tipo  de  consulta  evidentemente  se  responde  con  la  evaluacíon  de  la 

operacíon de reuníon espacio-temporal pero se ha de puntualizar que ahora la consulta especiﬁca un sector 

determinado donde se consultan las intersecciones y que permite realizar un corte más especíﬁco en este 

tipo de consultas. Tambien enfocaremos el diseeño de estructuras de datos y algoritmos que permitan re- 

solver eﬁcientemente este tipo de consultas y realizar trabajos de experimentacíon que permitan establecer 

la eﬁcacia de tales modelos comparándolos contra los métodos existentes. 



