Spaghettis en memoria secundaria
﻿

The Spaghettis is a data structure deviced for searching in metric spaces. Empirical results show that this
structure achieves good performance for high-dimensional metric spaces. This structure is an array type and is
based on pivots.

An unusual characteristic on the current metric structures is their manipulation on secundary memory. The
utilization of this structure on real aplications could be uncertain if is not allow this characteristic.

This paper describe differents choices for storage on secundary memory for this structure, showing particularly
one, that keep cost low in access and storage on disc without diminishing the cost for distance evaluations. Front
part, allow real aplications structure use, even on large metric spaces databases.

Keywords: databases, data estructures, algorithms, metric spaces, similarity queries.

Resumen

El Spaghettis es una estructura de datos para busquedas por similaridad en espacios métricos [CMBY99]. Esta
estructura es prometedora dado que se ha demostrado que tiene buen desempeﬁo en espacios de alta dimension.
Esta estructura es basada en pivotes y es del tipo arreglo.

Una caracteristica poco com1’1n en las estructuras métricas actuales es la manipulacion de estas en memoria
secundaria. No poseer dicha caracteristica hace poco factible la utilizacion de estas estructuras en aplicaciones
reales.

El presente trabajo describe distintas alternativas de almacenamiento en memoria secundaria para la
estructura, mostrando en particular una, que resulta optima para mantener bajos los costos de almacenamiento
y accesos a disco sin disminuir los costos en términos de evaluaciones de distancia. Lo anterior, permite la
utilizacion de dicha estructura en aplicaciones reales, dado el gran tamaﬁo de las actuales bases de datos.

Palabras claves: bases de datos, estructuras de datos, algoritmos, espacios métricos, consultas por
similaridad.

*Parcialmente ﬁnanciado por Fondecyt 1060776, Conicyt, Chile.
**Parcialmente ﬁnanciado por el programa de investigacion PR—F1—002IC—06, Universidad de Magallanes.

527

Readsl Seek en Disco

Alternativa 2 Multispaghetis

| Writes | Seeks | Reads | Writes |
399 761 780 380
721 1373 1408 688
1030 1989 2025 996
1342 2583 2634 1293
1676 3229 3291 1616

Tabla 3: Accesos a disco para las alternativas 2 y 3 (multispaghettis).

Costos Promedios dc Busqueda para n=86061 palabras

Costos Promedios de Busqueda para n=8606l palabras

2500 I I 2500 I I
Pivotesj 4 —% Pjvotesz 4 *—
   
2000 2 ]]:i:gE::3  - -><- - 2 O 2000 2 Pivotesg 16 ' '><' ' 2
. ‘ < . _A_ .
plvotesz 20 — A— - 8 Plvotes. 20
' _ _ 1 -2:
1500— A__ _———A — - - - — ‘ ‘*4 §1500— A#_-1—-—A"”’  
- — ’ “ ’ g A , — — ’ ’ ’
_. _ V _ _ V _ V _ _ , _ , _ _ , . Z , _ V V , _ _ . . .
A— _x_ _ _ _ _ _ X E x X_ X
1000?‘ _ > — ‘ _ > — < "B _ _ _ > _ _ _ 7 _ _ > _ _ "E _ _ _ _ _ _ _ , _ _ _ _ . "13 E 1000t- — - > ‘ — > — — -4} 7 _ _ _ > _ _ i _ _ _ _ _ __E, _ _ , _ _ , . _ . — - » — Hf]
:3—->*‘ (1) E3 — — - ' ’ _ _ _ V > Hi
500-II-_ » — - — - -   ' ' ' ‘ ‘ ' ' ' ' ' ' ' ' V "+ ' > - ' V ‘ - V V - ' ‘ - ' V - ‘ V - V V ”+ - ' V V > - - ‘ V V - - ‘ ' V V - - - V V Hf M 5004; - — - - V - ' ' ' ' ' ' ' ' ‘ ' ' ' ' ' ' "+ ' V - V V - ' ‘ - V A - V > - V . - V - - 33+ - - ' V > - ' V A - ‘ V - - -V 1
[V [V
0 I I 0 I I
1 2 3 4 1 2 3 4
Range de Busqueda Rango dc Busqueda

Figura 6: Costos de lectura para las alternativas 2 y 3 (multispaghettis).

536

mayor a medida que se aumenta la cantidad de pivotes.

La reduccion de los costos de lectura se debio principalmente a la redeﬁnicion de la estructura, es decir, a la
agrupacion de los objetos y sus distancias a los pivotes, de esta manera se puede discriminar con una sola lectura
en disco si un objeto es o no candidato.

Con el presente trabajo se ha comprobado que la estructura resultante es mas competitiva, desde el punto de
vista de espacio en memoria secundaria, que muchos indices del tipo arbol. Ya que en la mayoria de las estructuras
de tipo arbol, el gran inconveniente que se presenta es la inadecuada utilizacion de paginas de disco lo que genera
una estructura de excesivo tamaﬁo. Por ejemplo, al realizar la construccion, en base a un diccionario en espaﬁol
de 86.061 objetos y utilizando 20 centros (pivotes), en el gnat se tiene que el n1’1mero de paginas utilizadas fue
de 15.405 y en el caso del egnat 4.057 [Uri05]. En las implementaciones realizadas en este trabajo, en el caso de
la implementacion original, el n1’1mero de paginas utilizadas f1’1e de 3.040 y en las alternativas presentadas 1.614
paginas.

5.2. Trabajos Futuros

Algunas extensiones futuras que se estan haciendo en base al presente trabajo son:

I Analizar y desarrollar ideas de modo que las implementaciones propuestas, especialmente la segunda
alternativa, obtenga capacidades dinamicas. Por ejemplo para la reinsercion de objetos, se puede ir creando
nuevos subspaghettis de modo de evitar reconstruir la estructura por completa, de tal manera de usar ordenar
solo el 1’1ltimo subspaghetti.

I Analizar y probar si es posible aplicar métodos existentes de eliminacion para estructuras basadas en
particiones compactas, como es el método de planos fantasmas [Uri05], en estructuras basados en pivotes.
En este sentido, en el caso de la eliminacion de objetos para la tercera version de spaghettis, se podria hacer
realizando un intercambio entre el objeto a eliminar y uno del o los 1’1ltimo(s) subspaghettis que estén a la
misma distancia del primer pivote.

I Generar nuevos algoritmos para mejorar los costos de b1’1squedas sobre las estructuras propuestas.
I Obtener distintas formas de administracion de paginas para las implementaciones propuestas.

I Probar las distintas alternativas presentadas, sobre otras estructuras de tipo arreglo.

I Distribuir y paralelizar la estructura spaghettis.

I Encontrar valores optimos de n1’1meros de pivotes y determinar los efectos cuando la cantidad de pivotes supera
el optimo.

Referencias

[BK73] W. Burkhard and R. Keller. Some approaches to best—match ﬁle searching. Communication of ACM,
16(4):230 236, 1973.

[Bri95] Sergei Brin. Near neighbor search in large metric spaces. In the 21st VLDB Conference, pages
574 584. Morgan Kaufmann Publishers, 1995.

[BYCMW94] R. Baeza—Yates, W. Cunto, U. Manber, and S. Wu. Proximity matching using ﬁxedqueries trees. In
5th Combinatorial Pattern Matching (CPM’94}, LNCS 807, pages 198 212, 1994.

537

[CMBY99]

[CNBYM01]

[CPZ97]

[MOV94]

[Nav02]

[TTSF00]

[Uh191]

[Uri05]

[Yia93]

E. Chavez, J. Marroquin, and R. Baeza—Yates. Spaghettis: An array based algorithm for similarity
queries in metric spaces. In 6th International Symposium on String Processing and Information

Retrieval (SPIRE’99}, pages 38 46. IEEE CS Press, 1999.

Edgar Chavez, Gonzalo Navarro, Ricardo Baeza—Yates, and Jose L. Marroquin. Searching in metric
spaces. In ACM Computing Surveys, pages 33(3):273 321, September 2001.

P. Ciaccia, M. Patella, and P. Zezula. M—tree : An efﬁcient access method for similarity search in
metric spaces. In the 23st International Conference on VLDB, pages 426 435, 1997.

L. Mico, J. Oncina, and E. Vidal. A new version of the nearest—neighbor approximating and
eliminating search (aesa) with linear preprocessing—time and memory requirements. Pattern
Recognition Letters, 15:9 17, 1994.

Gonzalo Navarro. Searching in metric spaces by spatial approximation. The Very Large Databases
Journal (VLDB.I}, 11(1):28 46, 2002.

Caetano Traina, Agma Traina, Bernhard Seeger, and Christos Faloutsos. Slim—trees: High performance
metric trees minimizing overlap between nodes. In VII International Conference on Extending
Database Technology, pages 51 61, 2000.

J. Uhlmann. Satisfying general proximity/similarity queries with metric trees.
Processing Letters, pages 402175 179, 1991.

In Information

Roberto Uribe. Manipulacion de estructuras metricas en memoria secundaria. Master’s thesis,
Facultad de Ciencias Fisicas y Matematicas, Universidad de Chile, Santiago, Chile, Abril 2005.

P. Yianilos. Data structures and algoritms for nearest neighbor search in general metric spaces. In
4th ACM—SIAM Symposium on Discrete Algorithms (SODA ’93}, pages 311 321, 1993.

538

1. Introduccién

1.1. Antecedentes

Uno de los problenias de gran interés en ciencias de la coniputacion es el de ”b1’1squeda por siniilaridad”,
es decir, encontrar los elenientos de un conjunto nias sin1ilares a una niuestra. Esta bflsqueda es necesaria en
n11’1ltiples aplicaciones, con1o ser en reconociniiento de voz e iniagen, conipresion de video, genética, niineria de datos,
recuperacion de inforniacion, etc. En casi todas las aplicaciones la evaluacion de la siniilaridad entre dos elenientos
es cara, por lo que usualniente se trata COII10 n1edida del costo de la bflsqueda la cantidad de sin1ilaridades que se
eval1’1an.

Interesa el caso donde la sin1ilaridad describe un espacio niétrico, es decir, esta niodelada por una funcion de
distancia que respeta la desigualdad triangular. En este caso, el problenia nias con11’1n y dificil es en aquellos espacios
de ”alta dimension” donde el histogrania de distancias es concentrado, es decir, todos los objetos estan mas o menos
a la misma distancia unos de otros.

El auniento de taniaﬁo de las bases de datos y la aparicion de nuevos tipos de datos sobre los cuales no interesa
realizar bflsquedas exactas, crean la necesidad de plantear nuevas estructuras para bflsqueda por sin1ilaridad o
bflsqueda aproxiniada. Asin1isn1o, se necesita que dichas estructuras sean dinaniicas, es decir, que perniitan agregar
o elin1inar elenientos sin necesidad de crearlas nuevaniente. Asi tanibién, las aplicaciones reales requieren que dichas
estructuras perniitan ser alniacenadas en n1en1oria secundaria eﬁcienteniente, con1o tanibién que posean niétodos
optiniizados para reducir los costos de accesos a disco.

1 .2. Marco teorico

La siniilaridad se niodeliza en II11lCh0S casos interesantes a través de un espacio niétrico, y la bflsqueda de objetos
nias sin1ilares a través de una bflsqueda por rango o de vecinos nias cercanos.

Deﬁnicién 1 (Espacios Métricos): Un espacio niétrico es un conjunto X con una funcion de distancia d : X2 —>
R, tal que Vm,y,z E X,

1. d(:r,y) Z 0 and d($,y) = 0 532' :r = y. (p0siti'uidad}
2. d(:r,y) = d(y,:r). (Simetrz'a}
3. d(:r,y) + d(y,z) Z (d(:r,  (Desigualdad Triangular}

Deﬁnicién 2 (Consulta por Rango): Sea un espacio niétrico (X,d}, un conjunto de datos ﬁnito Y Q X, una
consulta m E X, y un rango 7" E R. La consulta de rango alrededor de :5 con rango r es el conjunto de puntos
y E Y, tal que d(:r,y) 3 7".

Deﬁnicién 3 (Los k Vecinos mds Cercanos): Sea un espacio niétrico (X, d}, un conjunto de datos ﬁnito Y Q
X, una consulta m E X y un entero kt. Los k vecinos mas cercanos a :5 son un subconjunto A de objetos de Y,
donde la lAl = k: y no existe un objeto y E A tal que d(y,:r} sea nienor a la distancia de alg1’1n objeto de A a :5.

El objetivo de los algoritnios de bflsqueda es n1inin1izar la cantidad de evaluaciones de distancia realizadas para
resolver la consulta. Los niétodos para buscar en espacios niétricos se basan principalniente en dividir el espacio
enipleando la distancia a uno o nias objetos seleccionados. El no trabajar con las caracteristicas particulares de
cada aplicacion tiene la ventaja de ser nias general, pues los algoritnios funcionan con cualquier tipo de objeto
[CNBYM01].

Existen distintas estructuras para buscar en espacios niétricos, las cuales pueden ocupar funciones discretas o
continuas de distancia. Algunos son BKTree [BK73], MetricTree [Uhl91], GNAT [Bri95], VpTree [Yia93], FQTree
[BYCMW94], MTree [CPZ97], SAT [Nav02], Slin1—Tree [TTSF00].

528

Algunas de las estructuras anteriores basan la bflsqueda en pivotes y otras en clustering. En el primer caso se
seleccionan pivotes del conjunto de datos y se precalculan las distancias entre los elenientos y los pivotes. Cuando
se realiza una consulta, se calcula la distancia de la consulta a los pivotes y se usa la desigualdad triangular para
descartar candidatos.

Los algoritnios basados en clustering dividen e1 espacio en areas, donde cada area tiene un centre. Se alniacena
alguna inforniacion sobre el area que perniita descartar toda e1 area niediante solo coniparar la consulta con su
centro. Los algoritnios de clustering son los niejores para espacios de alta diniension, que es el problenia nias dificil
en la practica.

Existen dos criterios para deliniitar las areas en las estructuras basadas en clustering, hiperplanos y radio cobertor
(covering radius). E1 prin1ero divide e1 espacio en particiones de Voronoi y deterniina e1 hiperplano al cual pertenece
la consulta segfln a que centro corresponde. E1 criterio de radio cobertor divide e1 espacio en esferas que pueden
intersectarse y una consulta puede pertenecer a mas de una esfera.

Deﬁnicién 4 (Diagrama de Voronoi): Considérese un conjunto de puntos {C1, C2, . . . , cn}(centros). Se deﬁne
e1 diagrania de Voronoi COII10 la subdivision del plano en n areas, una por cada ci, tal que q 6 al area ci si y
solo si la distancia euclidiana d(q, CZ’) < d(q, cj) para cada cj, con j 75 2'.

Existen dos caracteristicas poco coniunes en las estructuras actuales. La priniera es el dinamismo, es decir, la
posibilidad de insertar y eliniinar objetos una vez construida la estructura. La segunda caracteristica, a1’1n n1enos
frecuente, es la nianipulacion de estas estructuras en n1en1oria secundaria. No poseer dichas caracteristicas hace
poco factible la utilizacion de estas estructuras en aplicaciones reales.

Spaghettis es una estructura basada en pivotes y es una variante de LAESA [MOV94]. Propone reducir el
tiempo de CPU extra necesario al realizar una consulta utilizando una estructura de datos en donde las distancias
a los pivotes estan ordenadas por separado, construyendo un arreglo por cada pivote, lo que perniite realizar una
bflsqueda binaria en el rango relevante.

Si para cada pivote se encuentra e1 conjunto .9; = {ac : \d(:r,pi) — d(q,pi| 3 r},i = 1, ...,k: entonces la lista de
candidatos esta dada por la interseccion de todos estos conjuntos.

Para este articulo se selecciono, para la realizacion de las pruebas, un espacio niétrico consistente en un diccionario
de palabras en castellano de 86.061 objetos, donde la distancia utilizada es la distancia de edicidn, la cual entrega
COII10 resultado e1 n1’1n1ero niininio de inserciones, eliniinaciones o reeniplazos de caracteres, necesarios, para que
una palabra sea igual a otra. Para la bflsqueda se creo la estructura con el 90 % de los datos y se reservo e1 10 %
COII10 consultas.

2. Spaghettis

2.1. Construccion de Spaghettis
1. Se seleccionan k puntos (pivotes), pl, ...,pk, los cuales pueden o no pertenecer a la base de datos a indexar.

2. Se calcula y alniacena la distancia entre los pivotes y cada objeto de la base de datos, alniacenando adenias
un identiﬁcador de cada objeto, obteniendo un arreglo de largo n para cada pivote.

3. Para los prinieros k—1 pivotes se canibia e1 identiﬁcador del objeto, por su posicion en el pivote siguiente.

2.2. Bﬁsqueda en Spaghettis

Se asunie que se desea buscar todos los objetos con distancia d 3 7" a un objeto q. Una bflsqueda en un spaghettis,
se realiza COII10 sigue:

1. Se calcula la distancia entre q y todos los pivotes pk, para luego obtener k intervalos de la fornia
[a1,b1], ..., [ak,bk], donde ai = d(pi,q) — 7" y bi = d(p,',q) + 7".

529

PIVOTE 1 PIVOTE 2 PIVOTE 3 PIVOTE 4 BASE DE DATOS

0 1 0 1 0 7 0 4 Objelo 1

1 0 1 3 x 5 1

Objelo 3
Objelo 4
Objelo 5
Objelo 6
Objelo 7
Objelo S
Objelo 9
Objelo 10
Objelo 1 1

Objelo 12

Objelo 14

Objelo 1 6

Objelo 17

Figura 1: Spaghettis: Construccion y representacion de objetos candidatos.

2. Los objetos que se encuentren en la interseccion entre los kt intervalos forniados, se convierten en candidatos
COII10 posible respuesta a la consulta q.

3. Para cada objeto candidato :10, se calcula la distancia entre éste y la consulta q. Si se tiene que d(q,:r) 3 7",
entonces e1 objeto an es una respuesta a la consulta.

La ﬁgura 1 representa la estructura spaghettis construida usando 4 pivotes para indexar una base de datos de
17 objetos. Sobre esta estructura se realiza la bflsqueda COII10 sigue. Suponga una consulta q con distancia a
los pivotes {8,7,4,6} y rango de bflsqueda 7" = 2. En la ﬁgura 1 se niuestran nias oscurecidos los intervalos
{(6,10), (5, 9), (2,4), (4, 8)} sobre los cuales se realizara la bfisqueda. En la misma ﬁgura se aprecian con distintos
achurados todos los objetos que pertenecen a la interseccion de todos los intervalos. Dichos objetos son posibles
candidatos a ser solucion.

Como referencia, y en térniinos de evaluaciones de distancia, los valores para la construccion y bflsqueda usando
4, 8, 12, 16 y 20 se niuestran en la ﬁgura 2. Para la bflsqueda se construye la estructura con el 90 % de los datos,
dejando el 10 % restante COII10 consultas.

3. Implementacién en Memoria Secundaria

Dado que spaghettis considera, en el nioniento de una consulta, solaniente los intervalos deﬁnidos para cada
pivote, entonces no es necesario cargar conipletaniente la estructura. Este trabajo esta enfocado principalniente a
éste punto, es decir, en redeﬁnir la estructura de tal II10d0 de no hacer necesario cargar la totalidad de la estructura
en nienioria principal. Considerando que en n1en1oria secundaria, no solo se debe considerar el costo de evaluaciones
de distancias realizadas, si no tanibién se debe toniar en cuenta los accesos a disco, COII10 ser, lecturas, escrituras o
nioviniientos de cabezal (reads, writes, seeks) y el uso adecuado de las paginas de disco.

530

C0510 de C0nsLn1cci0n para n=86061 palabras C0510 de Busqueda promedi0 para n=86061 palabras

l.6e+06 I I I I A 70000 I I
’ Piv0Ies: 4 *
l.4»e+06 * Pivoles: 4 + A/ * 60000 _ Pivoles: 8 "'4'" ..,
3 Pivoles: 8 "+ ' / ’ 3 Pivoles: 12 "El"  4;]
-5 l2e+06 _ Pivoles: 12 WE’ A .,  5 Pivoles: 16 X '  ’ ,
g ' Pivoles: 16 ' '><' / X - ' 5 50000 — P1v0tes:20 *3 ' .v ‘ . 13
«,;,' Pivoles: 20 *3 /K . - ' g
:5 le+06 r A / V V x’ E] :5
% , x v E A , — _g 40000 ’ ’
r/1 800000 — A’ , 7 ' - .1,
E / .-‘X g——’E E 30000— —
-3 000000— /Af.-X 7437/ _,+.---—* g
:I _ .>< E  3 7 7
E 400000 _ . E E 20000
Lu +__ + Lu

200000 — ' ' 10000 ’ ’

Oh I 0 " ’ I I
0 20 40 60 80 100 1 2 3 4
P0rcenLaje pr0cesado de la base de datos Rang0 de Busqueda
(a) Construccion (b) Bflsqueda

Figura 2: Spaghettis: Calculos de distancia para la construccion y bflsqueda en RAM.

Uno de los objetivos nias iniportantes en la iniplenientacion de la estructura en nienioria secundaria es la
reduccion de los nioviniientos de cabezal, lo que se logra recorriendo el archivo en fornia secuencial. Queda de
nianiﬁesto que las soluciones para estructuras de bflsquedas exactas son inadecuadas, debido a que no se puede
niantener alg1’1n orden en el sentido tradicional. Sin embargo, se puede lograr cierta secuencialidad de acceso al
disco organizando los objetos seg1’1n alguna caracteristica, por ejeniplo, distancias a un deterniinado objeto. Gran
parte de las estructuras niétricas existentes realizan una iniplenientacion de ésto, pero no garantiza la disniinucion
de saltos dentro de un archivo. Un objeto, en el caso de los espacios niétricos, puede estar cerca de otros objetos,
lo que iniplica que durante una bflsqueda por un n1isn1o rango, este objeto seria respuesta a varias consultas y por
lo tanto es indiferente donde se agrupe.

Para los experinientos niostrados en este capitulo se asuniio que la estructura no entra conipletaniente en
n1en1oria principal y que solo se dispone de 2Mbytes de RAM. Las paginas de disco seran de 4Kbytes y los pivotes
utilizados en las tres iniplenientaciones seran los n1isn1os.

3.1. Implementacion Original

Con esta iniplenientacion se pretende construir el indice en n1en1oria secundaria seg1’1n su diseﬁo original, para
ésto, cada nodo alniacena los n1isn1os paranietros que la iniplenientacion de spaghettis en n1en1oria principal, es
decir, la distancia del objeto al pivote y la ubicacion del objeto en el siguiente pivote. Tanibién cada nodo guarda
la posicion en disco del siguiente nodo dentro del archivo que alniacena el indice.

La ﬁgura 3 niuestra la fornia de los nodos para la priniera iniplenientacion. Para la construccion, se insertan las
distancias a los pivotes y posicion en el siguiente pivote hasta la capacidad niaxinia por cada nodo (4Kbytes) y luego
por cada pivote, posteriorniente se realiza el ordenaniiento. Cada nodo se Va alniacenando luego de llenado y de
acuerdo a la capacidad niaxinia de nodos que soporta la RAM. La ﬁgura 3 niuestra la estructura una vez ﬁnalizada
la construccion, en este ejeniplo el nodo tiene un taniaﬁo de 44 bytes y un niaxinio de 5 objetos (representacion
de 5 objetos). Adicionalniente al spaghettis, se niantiene una estructura que identiﬁca a los nodos, ésta alniacena
la distancia niininia y niaxinia nias la posicion en n1en1oria secundaria donde se encuentra el nodo. Esta estructura
perniite realizar las bflsquedas nias eﬁcienteniente, sabiendo que nodo cargar en RAM seg1’1n el intervalo que tenga.

En la ﬁgura 3, se niuestra tanibién un ejeniplo de bfisqueda para una consulta q con d(q,pi) = {6,8, 3, 7} y
7" = 3. Las celdas leveniente oscurecidas corresponden a los intervalos de bflsqueda y la celda mas oscura a el objeto
candidato a respuesta.

Como se observa, se debe leer de disco k nodos para cada objeto que sea candidato a solucion, siendo k el

531

PIVOTE 1 PIVOTE 2 PIVOTE 3 PIVOTE 4

UJUIUIUI
Sax-bun

 

 

440 660 880

 

Figura 3: Spaghettis: Representacién de la estructura original en memoria secundaria. Ejemplo de intervalos de
bﬁsqueda para cada pivote.

532

Pivotes Nodos Espacio Writes Seeks Reads %Pagina Usado

4 608 2.4 Mb 1674 66310 66310 100
8 1216 4.8 Mb 3498 154094 154014 100
12 1824 7.2 Mb 5322 240112 238416 100
16 2432 9.6 Mb 7146 319511 317199 100
20 3040 12 Mb 8970 406180 403252 100

Tabla 1: Spaghettis: Inforniacion general de la estructura en disco.

Costos Promedios de Busqueda para n=86061 palabras

 

l l
300000 7 Pivotes:4 —9— _ _ __ -3:
Pivotes:8 "+" I/§_’,.“..‘‘ '_'_'__.{3
250000 /lgivotesi i6 *5" / ,’.’’ ';J433‘*’Ti7—77—7--"""
_§ Pil3i§§§20—A-4%‘-7‘;Li;_j‘.T7---"*"'
D -’  _
E 200000
g 150000E  —
E ,
‘U
E 100000 —
50000 — —
0 l l
1 2 3 4

Range de Busqueda

Figura 4: Costos proniedios de lecturas en disco para la b1’1squeda.

n1’1n1ero de pivotes de la estructura. Lo anterior es sin considerar aquellos nodos leidos y que ﬁnalniente no tienen
candidatos. Esto puede resultar en extrenio costoso si la cantidad de pivotes es elevada.

La tabla 1 niuestra inforniacion general de la estructura en disco, con1o ser el n1’1n1ero de pivotes, el total de nodos
generados, el espacio de la estructura en n1en1oria secundaria, las cantidades totales de escrituras, n1ovin1ientos de
cabezal y lecturas, ﬁnalniente se niuestra el porcentaje usado de la pagina.. Se considero el taniaﬁo de la pagina de
4096 bytes y la cantidad de datos soportada por cada nodo fue de 511.

L0 interesante de una estructura de tipo arreglo es que la utilizacion de las paginas de disco puede resultar
bastante eﬁciente, COII10 en este caso.

3.2. Alternativas de Implementacion

Si se observan los resultados experinientales obtenidos con la iniplenientacion anterior, se puede apreciar que
existe una gran cantidad de accesos a disco durante la b1’1squeda, esto provoca que dicha alternativa no sea
conipetitiva. Este problenia se debe principalniente a la fornia de la estructura.

A continuacion se presentan alternativas de aln1acenan1iento que reducen los costos de acceso a disco y espacio
utilizado por la estructura.

Las nuevas alternativas utilizan n1enos paginas de disco para su construccion, principalniente porque el indice
ya no es construido en base a los pivotes, si no, en base a los objetos, evitando tener que aln1acenar inforniacion
adicional con1o por ejen1plo: la ubicacion de un objeto dentro del siguiente pivote.

3.2.1. Optimizacién en Memoria Secundaria

La segunda alternativa redeﬁne la estructura y alniacena conjuntaniente la distancia del objeto a todos los pivotes
y la ubicacion del objeto en la base de datos original. Adenias, se niodiﬁca el algoritn1o de construccion ordenando

533

Pivotes Nodos N0 Objetos Espacio %Pagina Usado

4 378 204 1.5 Mb 99.8047
8 686 113 2.7 Mb 99.5117
12 994 78 3.9 Mb 99.2188
16 1291 60 5.1 Mb 99.8047
20 1614 48 6.3 Mb 98.6328

Tabla 2: Caracteristicas comunes en memoria secundaria para las 1’1ltimas dos alternativas.

los datos solo en base al primer pivote. La forma de esta estructura se muestra en la ﬁgura 5 (a). Finalmente el
nodo almacena la posicion en disco del nodo siguiente.

La ﬁgura 5 (a) muestra el proceso de construccion una vez terminado, es decir, luego del ordenamiento de los
objetos en base al primer pivote. La misma ﬁgura muestra celdas mas oscuras que representan la b1’1squeda para
una consulta q con d(q,p,-) = {6, 8, 3, 7}y 7" = 3. Se muestran oscurecidas todas las celdas de todos los pivotes que
estan dentro del intervalo. Sin embargo, en términos reales se descarta inicialmente en base al primer pivote.

3.2.2. Mﬁltiples Spaghettis

La tercera alternativa es basada en la segunda, es decir, almacena todas las distancias de un objeto a los pivotes
y los ordena en base al primero. La diferencia radical con la version anterior es que se crean m1’1ltiples spaghettis,
donde cada spaghetti sera del tamaﬁo de la memoria principal. De esta manera se evitan las lecturas y escrituras
adicionales producto del ordenamiento posterior a la construccion. La ﬁgura 5 (b) muestra la 1’1ltima version. En
esta ﬁgura se entiende que el tamaﬁo de los nodos es de 44 bytes y la capacidad en RAM es de 2 nodos.

Para la bflsqueda se realiza un proceso similar al de la segunda version, sin embargo, en la 1’1ltima version
necesariamente se deben revisar todos los spaghettis, lo que implica incrementar levemente las lecturas a disco.

Para las dos 1’1ltimas alternativas se utiliza una estructura adicional para almacenar informacion de los nodos,
como es: minima y maxima distancia al primer pivote y la posicion en memoria secundaria del nodo.

4. Resultados experimentales

Las nuevas alternativas propuestas para el almacenamiento de la estructura resultan interesantes, principalmente
porque hay una optimizacion en los costos de acceso a disco y de espacio utilizado por la estructura. La tabla 2
muestra informacion general equivalente en ambas estructuras. La informacion resulta ser igual en ambas debido a
que la diferencia es a nivel del ordenamiento de las celdas.

Durante la construccion la diferencia entre la segunda y tercera alternativa es que la 1’1ltima no requiere de
lecturas en disco, y por lo tanto tampoco de movimientos de cabezal, por lo que dichos valores son cero. Respecto
de las escrituras, estas también disminuyen, y en la 1’1ltima son del orden de la cantidad de paginas de disco generada
por la estructura. La tabla 3 muestra las diferencias entre las dos estructuras en términos de accesos a disco durante
la construccion.

La ﬁgura 6 muestra graﬁcos comparativos durante la b1’1squeda para las dos alternativas. La diferencia es muy
levemente favorable a la alternativa 2.

De la informacion obtenida en los experimentos se puede deducir que entre la implementacion original (alternativa
1) y la segunda implementacion, hay una reduccion de un 55 % en los writes a disco, para 4 pivotes. Para 8, 12, 16
y 20 pivotes la reduccion de los writes es del orden del 64% en promedio. En el caso de los reads y seeks, estos se
reducen cerca de un 99 %.

Entre la primera y la tercera alternativa, los valores son de un 77.3 de reduccion en los writes con 4 pivotes, de
un 81.5 para el resto de los pivotes. En el caso de las lecturas y movimientos de cabezales es de un 100 %.

534

2 4 2 11 3 2 4 2 11 3
3 12 5 12 13 4 11 3 3 5
3 9 7 11 15 4 1 6 3 6
4 11 3 3 5 8 14 8 11 2
44 44 Primer Spaghellis
4 1 6 3 6 8 1 2 3 4
4 5 1 7 22 8 4 7 4 7
5 12 6 10 14 9 8 11 13 1
6 11 10 9 9 9 5 7 9 8
& 88
6 2 2 12 12 3 12 5 12 13
7 7 4 8 17 3 9 7 11 15
7 6 8 8 18 5 12 6 10 14
7 9 11 6 19 6 11 10 9 9
132 132 4
Segundo Spaghems

8 14 8 11 2 6 2 2 12 12
8 1 2 3 4 9 9 1 6 11
8 4 7 4 7 11 6 11 9 16
9 8 11 13 1 12 2 10 3 10

176 176
9 5 7 9 8 4 5 1 7 22
9 9 1 6 11 7 7 4 8 17
9 4 9 4 23 7 6 8 8 18
10 13 12 7 20 7 9 11 6 19

220 220 4
Tercer Spaghems

11 6 11 9 16 9 4 9 4 23

12 2 10 3 10 10 13 12 7 20

12 13 12 9 21 12 13 12 9 21

264 264

(a) Alternativa 2 (b) Alternativa 3 (multi spaghettis)

Figura 5: Alternativas en Menioria Secundaria: Construccion y representacion de intervalos de bflsqueda.

Respecto de las lecturas en disco durante las bflsquedas, éstas se ven notorianiente reducidas con las 1’11tin1as
dos alternativas, del orden del 90 % en cornparacion con la prirnera.

Es iniportante seﬁalar que tanto en la construccion como en las bflsquedas, los costos debido a los calculos de
distancias son exactaniente iguales en las 3 irnplenientaciones.

5. Conclusiones

5.1. Aspectos Relevantes y Aportes

Un gran n1’1rnero de las estructuras que han sido desarrolladas para bflsquedas por siniilaridad estan diseﬁadas
solo con1o prototipos para n1en1oria principal. Por lo tanto, es relevante contar con estructuras sobre n1en1oria
secundaria de tal nianera que puedan ser iniplenientadas en aplicaciones reales. En este sentido, se considera que
el aporte mas relevante del presente trabajo es la presentacion de 2 alternativas de la estructura Spaghettis para su
utilizacion en n1en1oria secundaria.

Dichas alternativas presentan reducciones considerables en los costos de accesos a disco, tanto en la construccion,
como en la bflsqueda (seccion 4). En funcion del espacio utilizado en disco, la reduccion es del orden de un 40 % y

535
