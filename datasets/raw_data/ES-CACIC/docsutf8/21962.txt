Verificación de propiedades temporales en PPML
﻿
Product Process Modeling Languaje(PPML) is a formal language for the specification
of Business Processes, it has a formal semantics based on timed transition systems. The
language has artifacts that make it suitable for the formal specification of Business Processes with temporal restrictions, concurrency, etc. . Nevertheless, there is no support
tool for the language. Particulary, the language lacks tools for the verification of temporal properties associated to specifications. In this paper we propose, first, a codification
of the PPML semantics into timed automatas through a translation from PPML to the
language UPPAAL. Second, we use this translation, that was automated in a prototype,
in order to verify CTL (branching time) propierties of the PPML specifications, using the
UPPAAL asociated tool.
Keywords: Formal Methods, Model Checking, Timed Automatas, Business Processes
Resumen
Product Process Modeling Languaje(PPML) es un lenguaje formal para modelar Procesos de Negocios que posee una semántica basada en sistemas de transición de estados
temporizados. El lenguaje posee elementos que lo hacen apropiado para la especificación
formal de procesos de negocios con restricciones temporales, concurrencia, etc. Sin embargo, no existe actualmente ninguna herramienta de soporte al lenguaje; en particular,
el lenguaje carece de herramientas de verificación de propiedades temporales asociadas a
las especificaciones. En este trabajo proponemos, en primer lugar, una codificación de la
semántica de PPML en autómatas temporizados, a través de una traducción de PPML al
lenguaje UPPAAL. En segundo lugar, aprovechamos esta traducción, que ha sido automatizada en un prototipo, para realizar verificación de propiedades CTL (branching time)
de especificaciones PPML, utilizando la herramienta asociada a UPPAAL.
Palabras Clave: Métodos Formales, Model Checking, Autómatas Temporizados, Procesos
de Negocios
1
1 Introducción
El constante esfuerzo de distintas organizaciones por el perfeccionamiento de sus procesos en
busca de eficiencia y control, ha impulsado el actual auge de diversos métodos y lenguajes para
el modelado de procesos de negocios. Si bien existen diversos lenguajes como Business Process
Execution Language(BPEL) entre otros, en su gran mayoría están orientados a servicios y en
general no proveen una semántica formal que nos permitan realizar análisis formales. PPML
[9] es un lenguaje para el modelado de procesos de negocios con una semántica formal basada
en sistemas de transición de estados temporizados [8]. Sus modelos se construyen mediante
la especificación y composición de procesos y su interacción con los productos que manipulan.
PPML ofrece una variedad de elementos, en particular la asignación de cotas temporales a los
procesos, que lo hacen adecuado para la especificación formal de procesos en los cuales existan
restricciones temporales, sincronización entre componentes, concurrencia en las tareas, etc..
Pese a las ventajas mencionadas, aún no existe ninguna herramienta que asista la creación de
modelos y que permita obtener información de propiedades que estos cumplan.
En los últimos años, se han conseguido significativos avances en el desarrollo de técnicas y
herramientas para la verificación de requerimientos, una de las más conocidas es Model checking [4] cuya combinación con el uso de lenguajes formales nos permiten automatizar el procesos
de verificación. Entre las herramientas más utilizadas de Model checking para sistemas de
tiempo real, se pueden mencionar Kronos [6] y Uppaal [1]. Uppaal está basada en la teoría de
autómatas temporizados y provee un subconjunto de Computational Tree Logic(CTL)[10, 11, 3]
como lenguaje de especificación de cosultas.
En el presente trabajo presentamos la utilización de Uppaal para la verificación de propiedades
temporales de modelos especificados en PPML. Para ello se propone una traducción de los
modelos al lenguaje que utiliza Uppaal y así poder consultar la validés de dichas propiedades.
Como caso de estudio mostraremos una versión simplificada de una línea de producción de una
compañ´ıa de MotherBoards.
Primeramente se daremos una descripción del lenguaje PPML, una introducción a Uppaal y
luego mostraremos la traducción propuesta junto con las propiedades verificadas. Para finalizar
mencionaremos el trabajo presente y futuras extensiones del mismo.
2 Descripción de PPML
PPML es un leguaje formal para modelar Procesos de Negocios, está basado en el método
descripto en [12]. El Método consta tres tipos de construcciones básicas: Productos, Procesos y
Puertas. Los Productos son entidades representadas por un conjunto de atributos. Los Procesos
son entidades que pueden manipular, transformar productos. Éstos son caraterizados por su
comportamiento en el tiempo teniendo como resticción, sólo un producto de entrada y uno de
salida. Esta restricción revela la necesidad de poder empaquetar y desmpaquetar productos
mediante Puertas.
2.1 Productos
Los Productos capturan las características relevantes del modelo empírico, por ejemplo altura,
peso, color, etc. Estas características pueden ser directamente observables o calculables a partir
de otras mediante funciones, además son determinadas en base a una escala apropiada.
Definimos Productos como: atómicos, compuestos o estructurados.
2
• Un Producto Atómico P es una 5-upla < codigoP , nombreP , tiempoP , atributosP , <
ΣP , AP >> donde: codigoP es una constnate del conjunto Codigo, distingue unívocamente
cada producto, nombreP es una constante del conjuntoNombre, tiempoP es una constnate
del conjunto Time (time stamp del producto), atributosP es un conjunto de constantes de
ΣP , representando las caratecrísticas que queremos modelar del referente empírico. Los
atributos pueden ser directos o derivados, éstos últimos obtienen su valor a partir de otros
por medio de axiomas AP . < ΣP , AP > es la teoría de presentación, el proto-producto que
consta de todas las constantes definidas. La igualdad de productos queda determinada
por al igualdad de la especificación del proto-producto.
• Un Producto Compuesto P es : o bien, un par P =< codigoP , ⊗(Pc1, .., Pcn) > donde
⊗(Pc1, .., Pcn) es una inyección de los componentes Pci en el producto cartesiano ( usado
para sincronizar y empaquetar varios productos como entrada de un proceso ), o bien,
un par P = codigoP , ι(P) donde P es un conjunto finito de productos y ι(P) ∈ P (
utilizado en situaciones donde el producto de entrada es elegido en base a una condición).
Los productos compuestos no tienen nombres y tiempos ya que son una construcción del
método y no representan referentes empíricos.
• Un Producto Estructurado P puede ser: Especializado o refinado, se extiende
uno definido agregando nuevas constantes, funciones y relaciones. Agregado, permite
combinar varios productos como constituyentes de un nuevo producto. Los atributos de
los productos agregados pueden ser atributos de sus constituyentes o nuevos atributos y
su proto-producto es una especialización de la unión disjunta de los proto-produtos que
lo conforman.
Como ejemplo, supongamos que queremos modelar una versión simplificada de una línea de
producción de una compañ´ıa de MothoerBoards; en la cual tenemos un producto MotherBoard
con un slot para un procesador y un slot para un banco de memoria y como producto terminado
la versión ensamblada y testeada de los tres componentes. Por cuestiones de espacio sólo se
mostrará la especificación de algunas partes del modelo.
Product MotherBoard <
<MProccessor: Proccessor ; MMemory:Memory > ,
weight ,
HasProccessor ,
Proccessor_Socket ,
HasMemory >
Figura 1: Producto estructurado MotherBoard
Podemos observar que las precedentes definiciones representan los que en Orientación a Objetos llamamos clases. Así llamaremos instancias a los referentes empíricos que se corresponden
con dichas clases; estas instancias de productos son las tendrán lugar en la ejecución de los
procesos. Una instancia de un producto P =< c, n, t, att, T > es un una interpretación en el
sentido lógico de T .
En el mundo real existen situaciones en las que un producto va evolucionando en la medida
en que es procesado, es decir, existen situaciones en las que se desconocen ciertos atributos del
mismo; o en caso de ser un producto estructurado, situaciones en las cuales aún no se le ha
asociado alguno de sus componentes. Para ello por cada dominio necesitamos definir valores
que se correspondan a estas situalciones (valores nulos).
3
2.2 Procesos
Un proceso modela un referente empírico que transforma un producto de entrada en uno de
salida. Al igual que los productos, los procesos pueden ser atómicos (sin estructura interna
o subprocesos) o estructurados. Los procesos modelan transformaciones, para ello, por cada
proceso existe una máquina virtal que interpreta sus comandos básicos. Esta máquina virtual
es un objeto con métodos, por ejemplo, asignaciónes a variables. Para especificar un proceso,
definimos las transformaciones éste realiza usando acciones básicas o combinaciones de estas
por medio de estructuras de control. La formalización del concepto de máquina virtual [7]
consiste en un framework lógico sobre sistemas de transición de estados llamado RETOOL
[2]. La especificación es un par que contiene una signatura y una conjunto de sentencias que
describen su comportameinto.
La definición de un proceso es una transacción, un segmento de computación de la máquina
virtual subyacente. Consta de la condición inicial q (estados que satisfacen las condiciones
iniciales), la condición final p ( estados que satisfacen la condición final de la transacción), el
Invariante I ( sentencia que debe evaluarse verdadera en todos los estados de la traza) y las
cotas inferior y superior l, u que especifican el tiempo mínimo y máximo que puede demorar en
completarse. Formalmente (q, I)l∆up, y su semántica: σ, T, i  (q, I)l∆up si y sólo si para algún
j, k tal que i+ 1 ≤ j < k ≤ i+ u, tenemos para cada i ≤ m ≤ j que σ, T,m  q; σ, T, k  p, y
para cada j ≤ n ≤ k tenemos σ, T, n  I.
Un Proceso Atómico p es un par < proc, V M >, donde VM =< θ,Θ > y proc =< codigo,
nombre, propietario, PI , PO, (q, I)l∆up >. codigo, nombre, propietario son variables de los
correspondientes conjuntos y son fijos, es decir, no cambian durante trazas de cómputo. PI , PO
son los productos de entrada y salida, y (q, I)l∆up es la especificación del comportamiento del
proceso.
Como ejemplo se muestra el proceso que toma una MotherBoard sin ensamblar y un Procesador y devuelve la MotherBoard con el procesador ensamblado. El producto de entrada será
un paquete con ambos productos de entrada. Como condición inicial especificamos la compatibilidad de los socket de conexión y que la MotherBoard no tenga asemblado el Procesador. El
invariante requiere que no puede ser asemblado simultaneamente la memoria, y como producto
de salida retorna la MotherBoard con el Procesador ensamblados. Además especificamos que
el proceso tomará como mínimo 5 unidades de tiempo y 10 como máximo.
Process assem 1 <
input: ⊗(<Mother_in:Motherboard;Proc_in:Proccessor>)
output: MotherBoard
invariant: Mother_in.HasMemory = false
requires: Mother_in.Proccessor Socket = Proc_in.Proccessor Socket
∧ Mother_in.HasProccessor=false
ensure: output=<<Mother_in,Proc_in,item> , true, false>
l_time: 5 , u_time:10 >
Figura 2: Proceso que ensambla un Procesador en una Motherboard
2.3 Puertas
Usaremos el concepto de puertas para modelar construcciones que necesitamos en el lenguaje,
por ejemplo, cuando un proceso necesita varios productos o para distribuir varios productos
como entrada a procesos o para organizar sincronizar el control del sistema cuando cierta
condición debe ser cumplidad para poder continuar. Exiten tres tipos básicos de puertas:
4
• Multiplexor es una 4-upla < codigo, P , P , F > donde codigo es una variable estática
que la identifica, P es el conjunto de productos de entrada, P es el producto de salida y
F es la función que define cada Pi explícitamente en terminos de P .
• Demultiplexor , definición simétrica a la anterior, en este caso los productos de salida
son proyecciones sobre producto de entrada.
• Semáforo es una 3-upla < codigo, P, S,> donde P es el producto de entrada/salida y S
es la condición que debe satisfacerse para continuar. Gráficamente:
P1
...
Pn
M
P
Figura 3: Multiplexer
P
D
P1
...
Pn
Figura 4: Demultiplexer
P
S
P
Figura 5: Semaphore
2.4 Frameworks
En el proceso de modelar sistemas, al igual que en programación, necesitamos abstracción
y encapsulamiento como herramientas. PPML provee estructuras de procesos framework
process a través de las diferentes formas de combinar procesos:
• Composición Sequencial: compone dos procesos p1, p2 (denotado p1; p2 ) en uno nuevo
p de la siguiente manera: el codigo y nombre de p tienen un nuevo y único codigo y
nombre respectivamente, el propietario será la entidad responsable de p. La entrada de
p será la de p1 y su salida la de p2. La función de transición τ es (qp, Ip)lp∆
uppp donde: lp
es la cota inferior del primer proceso, up es la suma de las cotas superiores, qp es q1, pp
es p2 y Ip es q1U>lp1 (Ip1U≤up1−lp1 (pp1 → trueU(qp2U>lp2 (Ip2U≤up2−lp2pp2))))
El invariante requiere que la condición inicial del primer proceso se mantenga almenos
hasta lp1 , a partir de ese punto el invariante de p1 debe ser cierto durante up1−lp1 unidades
de tiempo, cuando la condición final pp1 se torna verdadera. Eventualemente la condicion
inicial qp2 será verdadera almentos hasta lp2 , en ese momento comezará la validéz de la
invarte Ip2 durante un tiempo no superior a up2 − lp2 justo en el punto en el cual se
cumple la condición final pp2 . Cabe destacar que deben concordar las especificaciones
de los produtos de salida de p1 y entrada p2. El tiempo entre el estado final de p1 y el
inicial de p2 no es tenido en cuenta en el modelo, en caso de querer reflejar cierto tiempo
que manifieste el referente empírico, debeíamos componer otro proceso intermedio que lo
refleje. Denotamos la composición secuencial como p1; p2.
• Composición Condicional (Semáforos): Denotado por p1;s p2 es el proceso p =<
codigo, nombre, propietario, Pi, Po, τ > con una definición análoga a la anterior, y cuyo
invariante está dado por:
q1U>lp1 (Ip1U≤up1−lp1 (pp1 → trueU((qp2 ∧ Ss)U>lp2 (Ip2U≤up2−lp2pp2)))).
• Composición Paralela: Denotada por [p1; p2](dI ,mO) es: codigo, nombre y propietario
análogos a las definiciones anteriores; la entrada de p es la del demultiplexor dI , la salida
5
es la del multiplexor mO y la función τ de p es (qp, Ip)lp∆
uppp: lp es máximo (lp1 , lp1), up
es máximo (lp1 , lp1), qp es q1 ∧ q2 ,
pp es p1 ∧ p2, y Ip es (q1 ∧ q2)→ (τ1[(p1U(p1 ∧ p2))/p1] ∧ (τ2[(p2U(p1 ∧ p2))/p2])) (donde
τ [(pUq)/r] significa el reemplazo de la condición final r en τ por la condición (pUq)).
Un framework process p es un Proceso atómico definido a través de un conjunto de procesos
{p1, ..., pn} que lo forman en términos de las distintas composiciones definidas anteriomente y
lo denotamos con el par < p, fw.exp >, donde p es la difinición clásica de proceso y fw.exp es
la especificación de los procesos que lo forman en términos de composiciones entre ellos.
3 Uppaal
Uppaal es una herramienta para la verificación de sistemas de tiempo real. Está basada en
la teoría de autómatas temporizados y provee un subconjunto de CTL (Computational Tree
Logic) como lenguaje de especificación de cosultas. Un modelo de un sistema en Uppaal es un
conjunto de instancias de esquemas que se comunican por medio de distintos tipos de canales. La
especificación consta de tres partes: Declaraciones Globales, Esquemas ( Automata Templates)
con sus Declaraciones Locales y la Especificación del Sistema.
3.1 Declaraciones
Las declaraciones globales, o locales a un esquema, contienen definiciones de variables, arreglos,
registros y tipos (estilo lenguaje C). Existen cuatro tipos predefinidos: int (enteros), bool
(lógicos), clock (relojes), and chan (canales); éstos ultimos puden ser canales urgent o broadcast.
También pueden definirse constantes anteponiendo el prefijo const. Uppaal provee un lenguaje
rico para la declaración de funciones que pueden ser invocadas dentro de los los esquemas,
podemos especificar parámetros, sentencias condicionales, sentencias iterativas como While y
For.
3.2 Esquemas
Los Esquemas son definidos en forma de Autómatas Temporizados Extendidos ; pudiendo en
ellos leer y modificar relojes, variables, invocar a funciones definidas, etc. El autómata de
un esquema cosiste en Estados y Aristas, también pueden contener declaraciones locales y
parámetros por valor o referencia.
Los Estados pueden estar etiquetados (nombres que los referencian). También podemos
especificar invariantes en los estados, esto es, una condición que siempre debe cumplirse. Las
expresiones permitidas como invariantes son restringuidas, sólo pueden ser una conjunción de
condiciones simples sobre relojes o expresiones lógicas que no contengan relojes. No se permiten
condiciones que involucren cotas inferiores sobre relojes. Existen tres modificadores para los
estados de esquemas: Inicial, cada esquema debe tener exactamente un estado inicial. Urgentes,
detienen el paso del tiempo mientras un proceso se encuetre en uno de ellos. Comprometidos,
al igual que los urgentes detienen el paso del tiempo, además obliga que la próxima transición
debe tomar alguna arista que comienze en un estado comprometido habilitado.
Los estados están conectados por medio de Aristas, en ellas se pueden definir: selectores,
guardas, sincronizaciones y modificaciones. Los selectores retornan aleatoreamente un valor de
un rango especificado. Una arista esta habilitada si y sólo si la condición de su guarda se cumple,
6
las condiciones de las guardas tienen las mismas restricciones que las de los invariantes. Los
procesos pueden sincronizarse compartiendo un canal, en el cual uno escribe (!) y el otro escucha
(?), sólo se permite un canal por arista. Cuando las aristas son ejecutadas, las expresiones de
modificaciones son evaluadas y su efecto cambia el estado del sistema.
Cuando dos procesos son sincronizados, ambas aristas de los procesos son ejecutadas. Las
modificaciones de ambos se realizan se realiza en orden, primero evaluando las del proceso
que escribe y luego las del que escucha. Los canales Broadcast perminten sincronizacioes de
1-a-muchos, esto es, un proceso escribe en un canal y todos aquellos con aristas habilitadas en
escucha de dicho canal serán invocados.
3.3 Especificación del Sistema
La Especificación de un modelo de sistema consiste de uno o mas procesos concurrentes (instancias de esquemas), variables y canales de comunicación. Las variables, canales y funciones
definidas aqui no son visibles para los esquemas.
3.4 Propiedades Temporales
Uppaal soporta como lenguaje de consultas, lógica temporal CTL [ ref ] con ciertas restricciones,
sólo pude haber un cuantificador de caminos. Así las consultas que podemos realizar son de la
forma:
• E  q: se evalua como verdadera si y sólo si existe una secuencia de transiciones s0 →
· · · → sn donde s0 es el estado inicial y en sn satisface q.
• A[]q: es verdadera si y sólo si todo estado alcanzable satisface q.
• E[]q: es verdadera si y sólo si existe una secuencia de transiciones s0 → s1 → · · · → si →
· · · donde todo si satisface q.
• A  q: es verdadera si y sólo si toda secuencia de transiciones posible alcanza un estado
que satisface q.
Donde q es un expresión lógica bien formada, en ella podemos hacer referencia a variables
o estados de los procesos (instancias de esquemas), por ejemplo A[] MotherBoard.End imply MotherBoard.hasProcessor, especifica que para cualquier secuencia de ejecución siempre es
cierto que si una instancia del esquema MotherBoard está en el estado End entonces su variable
hasProcessor debe ser verdadera.
4 De PPML a Uppaal
Con el objetivo de probar propiedades temporales de modelos especificados en PPML, se implementó una traducción automática de modelos PPML al lenguaje Uppaal, así luego de traducir e
invocar al solver de Uppal podemos verificar dichas propiedades. La idea general de traducción
consiste en: Por cada clase de producto generar un esquema que describe sus estados dentro
del sistema. Por cada proceso se construye un esquema que describe su comportamiento. La
semántica de las puertas se incluyen dentro de los esquemas de productos y procesos. La comunicación entre productos y procesos se realiza mediante variables compartidas (globales) y
7
mensajes de sincronización. Esta forma de traducir refleja la independencia de cada proceso y
nos permite incrementar la cantidad de instancias de productos dentro del sistema de manera
automática. Con el fin de ejemplificar la traducción se seguirá el siguiente caso de estudio:
M
Pr
oc
M1
<M,Proc>
assem1
M
M2
M
em
<M,Mem>
assem2
M
D1
M
M
test1
test2
M
M
M3
M
Figura 6: Diagrama PPML assem1;assem2;[test1;test2](D1,M 3)
El proceso de ensamblado comienza con un proceso assem1 que recibe una MotherBoard
y un Procesador, los ensambla en un intervalo de entre 5 y 10 unidades de tiempo, seguidamente el proceso assem2 recibe el producto de salida del proceso anterior, una Memoria y los
ensambla con la misma restricción temporal. Luego se testean el Procesador y la Memoria de
la MotherBoard en paralelo por los procesos test1 y test2 respectivamente cuyos tiempos se
estiman entre 3 y 5 unidades.
4.1 Traducción de Procesos
Por cada proceso en PPML se genera:
• En las declaraciones globales del sistema, canales de mensajes para la comunicación con los
producto que procesa, esto es, un canal y una variable (del tipo de código correspondiente)
por cada producto que el proceso manipula. Si bien en PPML, los procesos sólo tienen un
producto de entrada, éste puede ser un producto compuesto (empaquetado), esto se refleja
en la traducción como la sincronización a través de los canales mencionados. También
se genera un canal (broadcast) por el cual, el proceso avisa a los productos intervinientes
que están siendo procesados.
• Un esquema con una declaración de una variable reloj (tiempo que demora el proceso
en completarse), un estado inicial, los estados correspondientes a: la puerta previa ( en
caso de ser una puerta multimplexora, las posibles combinaciones de sincronizaciones de
los productos que el proceso manipula), un estado para representar la condición “listo
para comenzar” o pre-ejecución del mismo y un estado para su pos-ejecución. Éstos
dos últimos estados contienen como invariante, la traducción del Invariante del proceso
PPML. Las aristas que unen el estado inicial y los correspondientes a la sincronización de
productos, están etiquetados con la espera por el correspondiente canal de comunicación.
La arista que conecta los estados de pre y pos ejecución del proceso tiene como guarda la
restricción temporal sobre la variable reloj del proceso. Finalmente un arco que reestablece
las condiciones para un próximo proceso conectando el estado final con el inical.
• Dentro de la declaración del sistema, se generan una instacia por cada proceso.
8
Globales
//input sincronizations channels
urgent chan cassem2TMotherBoard;
urgent chan cassem2TMemory;
//procesing comunication channel
broadcast chan cAssem2;
//ids of the inputs products
n motherboards0 assem2 id motherboard;
n memories0 assem2 id memory;
Locales al esquema
clock x;
Sistema
Assem20 = Assem2();
Estados y Aristas del esquema
e1
l11
l12
l13
l14
e3
l2 e4
l3
e1: Estado Inicial (M2)
l11 : Sincr.: cassem2TMotherBoard?
l12 : Sincr.: cassem2TMemory?
l13 : Sincr.: cassem2TMotherBoard?
l14 : Sincr.: cassem2TMemory?
e2: Pre-assem2
l2: Guarda: x >=3 && x<=5
Sincr.: cassem2!
e3: Pos-assem2
l3: Modif.: x =0;
assem2 id memory = 0 ;
assem2 id motherboard = 0;
Figura 7: Traducción del Proceso assem2
4.2 Traducción de Productos
Por cada producto en PPML se genera:
• Una definición de tipo subrango de entero 0..n en las declaraciones globales, que indica
n-1 instancias del producto. Estos valores serán los códigos o identificadores unívocos de
cada producto dentro del sistema, el identificador 0 se reserva para el producto nulo, en
caso de productos estructurados incompletos.
• Un esquema que contiene: Como declaración local: una variable de tipo reloj (tiempo
del sistema). Una variable por cada atributo. En caso de ser estructurado, una variable
(identificador) por cada uno de sus componentes. Una función por cada proceso que lo
manipula, en la cual se reflejan los cambios que realiza el proceso en los atributos del
producto. Un parámetro constante del tipo correspondiente al los identificadores de
dicho producto, que es utilizado para la creación de las instancias dentro del sistema.
Estados: un estado incial, un estado por cada proceso o puerta que lo manipula y
un estado final. Arcos: Para simplificar la traducción y sin pérdida de generalidad
asumimos que a cada proceso le precede una puerta (en caso de no existir asumimos
una puerta de tipo semáforo con la condición verdadero). De esta manera tenemos dos
tipos de arcos, los que van de un estado correspondiente a una puerta al de un proceso y
viceversa. Los primeros (epuerta,eproc.) están etiquetados con un mensaje de escritura por
el canal correspondiente (listo para ser tratado) y la asignación de su identificador en la
variable correspondiente al proceso en caso de que su valor sea 0 (no hay otro producto
esperando para ser tratado). Para los arcos (eproc. ,epuerta), un mensaje de espera por el
canal correspondiente al proceso, la condición de que el identificador del producto que el
proceso va a manipular sea el suyo y la invocación a la función que refleja los cambios
producidos por el proceso en sus atributos. En caso de productos que sean copiados por
demultiplexores, por ejemplo MotherBoard, estas bifurcaciones de procesamiento paralelo
se reflejarán en el esquema como todos los posibles casos (interleaving) en que el producto
puede ser procesado.
9
• En la declaración del sistema, se delaran las instancias de de los esquemas.
Globales
//amount of instances 2
typedef int[1,2] n_memories;
//amount of instances 2 + null
typedef int[0,2] n_memories0;
Locales al esquema
clock x;
//attributes
int size;
bool tested;
bool assembled;
//Processes Updates
void Assem2() assembled = true;
void Test2() tested = true;
Sistema
Memories(const n_memories id) =
Memory(id);
Estados y Aristas del esquema
e1
l1 e2
l2 e3
l3 e4
l4 e5
e1: Estado Inical (M2)
l1: Guarda: assem2 id memory = 0;
Sincr.: cassem2TMemory!
Modif.: assem2 id memory = id
e2: assem2
l2: Guarda: assem2 id memory == id
Sincr.: cassem2?
Modif.: Assem2()
e3: D1
l3: Guarda: test2 id memory = 0;
Sincr.: ctest2TMemory!
Modif.: test2 id memory = id
e4: test2
l4: Guarda: test2 id memory == id
Sincr.: ctest2?
Modif.: Test2()
e5: Estado Final (M3)
Figura 8: Traducción del Producto Memory
4.3 Declaración del sistema y verificación de propiedades
Finalmente se genera la declaración del sistema con todas las instancias de los esquemas de procesos y productos. Con el modelo generado podemos invocar al verificador con las propiedades
que deseamos verificar.
Como parte del caso de estudio se verificaron las siguientes propiedades:
1) A[] forall (i:n_motherboards) forall (j:n_motherboards)
i != j imply ((MotherBoards(i).End and MotherBoards(j).End)
imply (MotherBoards(i).id_Memory != MotherBoards(j).id_Memory
and MotherBoards(i).id_Processor != MotherBoards(j).id_Processor))
Toda MotherBoard ensamblada no puede compartir su memoria ni su procesador con otra.
2) A[] forall(i:n_motherboards) (MotherBoards(i).End imply
(MotherBoards(i).id_Memory!=0 and MotherBoards(i).id_Processor!=0
and Processors(MotherBoards(i).id_Processor).tested == true and
Memories(MotherBoards(i).id_Memory).tested == true)
Toda MotherBoard que llege al final del proceso es ensamblada con una memoria y un procesador
testeados.
10
3) E<> exists(i:n_motherboards)(MotherBoards(i).End and
MotherBoards(i).x<=13)
Los testeos puden realizarse en paralelo reduciendo el tiempo de producción (13 es la suma de
los tiempos mínimos de los procesos del modelo).
Las propiedades se verificaron en una PC con un procesador Intel Pentium 4 de 3 ghz y
2GByte memoria DDR con sistema operativo Linux, los detalles de los tiempos son:
2 c/prod. 3 c/prod. 3 Moth., 4 Proc. y Mem. 3 Moth., 5 Proc. y Mem.
1) 0,18 s 15,83 s 22,15 s > 3 h
2) 0,02 s 0,97 s 6,13 s > 3 h
3) 0,001 s 0,01 s 4,51 s 826,23 s
Nota: Los experiemtos se realizaron con la cantidad Procesadores y Memorias suficientes para
la cantidad de MotherBoards, es decir, almenos un Procesador y una Memoria por MotherBoard; caso contrario propiedades como 2 no podían verificarse, tal como se esperaba. Con
4 MotherBoards al igual que en los casos de 3 MotherBoards, 5 Procesadores y 5 Memorias,
pasadas las 3 horas de ejecutada la verificación y habiendo duplicado el espacio de memoria
virtual con respecto al físico, se cancelaron las verificaciones.
5 Conclusiones y Trabajos Futuros
Hemos mostrado una traducción de modelos del lenguaje PPML al de Uppaal con el fin de
poder verificar propiedades temporales de los mismos. Actualemnte se esta desarrollando una
herramienta para asistir en la creación de modelos en PPML y, como extensión de la misma,
la traducción automática propuesta. Creemos que el lenguaje PPML es de gran utilidad para
el modelado de diversos procesos en los cuales se necesite un análisis formal. Por medio de
este trabajo se puede contar con una herramienta automática que facilita la construccion de
modelos de negocios y verificar en ellos propiedades de safety, invariancia, etc.
Debido al problema de la explosión de estados, se está estudiando la posibilidad de aplicar
técnicas de abstracción [5] para poder explorar modelos con dominios de productos y procesos
más grandes.
11
