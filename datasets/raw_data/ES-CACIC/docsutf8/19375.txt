Um método para a programaçao de software adaptativo
﻿s métodos (frequentemente chamados de “metodologias”) de
programac¸aao costumam compreender um conjunto de recomendac¸ooes e
procedimentos de uso para os recursos disponibilizados por uma linguagem de programac¸aao, com o objetivo de disciplinar o seu emprego
na produc¸aao de programas para uso em diversas áreas de aplicac¸aao. O
presente trabalho é dedicado à programac¸aao adaptativa, e propooe um
método para o desenvolvimento desse tipo de software, embasado na
equivaleˆncia que pode ser observada entre estruturas de controle de diversas naturezas, que teˆm sido empregadas tradicionalmente em programac¸aao. Para isso, propooe-se aqui uma possível forma de se converter,
para o estilo adaptativo, programas imperativos que se utilizam dessas
estruturas tradicionais. Um exemplo ilustrativo encerra este trabalho,
mostrando a aplicac¸aao do método proposto para a implementac¸aao de um
projeto simples, mas relativamente abrangente, de software adaptativo.
Keywords: Adaptatividade, programas automodificáveis, método de
programac¸aao adaptativa
1 Introduc¸aao e histórico
Os primeiros programadores, em meados do século passado, utilizavam a automodificac¸aao de código como forma de otimizar os escassos recursos das máquinas
entaao disponíveis. A introduc¸aao, na década de 1970, da prática da formalizac¸aao
dos métodos de desenvolvimento de programas, levou ao surgimento da Engenharia de Software, a qual praticamente extinguiu, na prática, o uso da automodificac¸aao de código do processo de desenvolvimento de programas [1].
No entanto, observa-se que, nos últimos anos, vem novamente sendo reintroduzido o uso dessa técnica, a qual tem revelado a sua possibilidade (e convenieˆncia) de aplicac¸aao em uma ampla gama de tipos de problemas, tais como:
protec¸aao de programas [2], melhora das técnicas de obtenc¸aao de checksum [3],
tratamento de linguagens naturais, reconhecimento de linguagens formais e diversas outras possibilidades [4].
As máquinas antigas naao dispunham de muitos recursos, o que exigia dos seus
programadores certa habilidade para o desenvolvimento de programas que fossem
capazes de executar as tarefas necessárias sem extrapolar em suas exigeˆncias
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 950
2 Salvador Ramos Bernardino da Silva e Joaao José Neto
de recursos computacionais. Em particular, a memória se mostrava um recurso
escasso, e os programas cresciam cada vez mais, exigindo que o programador
executasse muitas manobras e artifícios em seus programas com a finalidade de
burlar essa limitac¸aao, que lhe impunha restric¸ooes crescentes.
A utilizac¸aao de linguagens de baixo nível (linguagens de máquina, linguagens de montagem e mesmo linguagens de macro-montagem), juntamente com a
prática da automodificac¸aao de código, foram, entaao, excelentes formas que encontraram os programadores para conviverem com a escassez de memória, enquanto
desenvolviam programas que dela faziam exigeˆncias cada vez maiores.
A entaao notória escassez de fundamentos teóricos e de métodos de desenvolvimento de programas automodificáveis muito contribuiu para que tais programas
se revelassem – ao menos, do ponto de vista de usuários que buscavam a solidez de
programas cujo comportamento gostariam de poder antecipar – cada vez menos
atraentes para uso extensivo, devido às situac¸ooes de vulnerabilidade exibida por
tais programas em decorreˆncia da fluidez e imprevisibilidade acarretadas pela
modificac¸aao espontaˆnea de tais programas, e da decorrente dificuldade de projeto, de manutenc¸aao, de compreensaao, e de rastreamento que exibiam programas
assim construidos.
Visando à criac¸aao de um método adequado para a construc¸aao de programas
automodificáveis de boa qualidade, o presente trabalho propooe uma série de procedimentos que buscam guiar o desenvolvimento de programas dessa natureza,
também denominados programas adaptativos.
Este artigo contém uma proposta de sistematizac¸aao da forma de produzir
programas adaptativos usando para tanto, como ferramenta, uma linguagem de
programac¸aao especialmente projetada para essa finalidade, acompanhada por
um método aderente ao mesmo tipo de estrutura cuja utilizac¸aao é propiciada
pela linguagem.
Essa adereˆncia entre a linguagem e o método aqui apresentado é viabilizada
devido à adoc¸aao, em ambas, de uma mesma arquitetura para o software adaptativo a que se referem, estimulando assim o programador a utilizar-se, para os
problemas que estiver resolvendo, de uma modelagem apropriada para o uso das
ferramentas em questaao.
2 Elementos da Programac¸aao Adaptativa
Um método de programac¸aao adaptativa é um conjunto de recomendac¸ooes que
orientam a prática de construc¸aao de programas adaptativos de boa qualidade,
fornecendo ao programador recursos para evitar a usual vulnerabilidade, imprevisibilidade e dificuldade de leitura, de projeto e de manutenc¸aao em decorreˆncia
dos quais por tanto tempo os programas com código dinaˆmico foram evitados
na prática.
Nos programas adaptativos podem sempre ser identificados os dois conceitos
que caracterizam os dispositivos adaptativos: um dispositivo subjacente inicial
naao-adaptativo e uma camada adaptativa [5]. Neste estudo, o dispositivo subjacente é um programa de comportamento estático, que representa o programa
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 951
Um método para a programac¸aao de software adaptativo 3
adaptativo ao início da execuc¸aao (suas instruc¸ooes, de máquina real ou virtual,
correspondem às regras dos dispositivos adaptativos teóricos), e a camada adaptativa é o conjunto das ac¸ooes adaptativas (chamadas de func¸ooes especiais, ligadas
às instruc¸ooes do programa subjacente) que impooem modificac¸ooes ao programa,
quando da sua execuc¸aao.
2.1 Formas convencionais de representac¸aao de fenoˆmenos
repetitivos
Das situac¸ooes usuais em que é evidente a possibilidade de uso da adaptatividade, destaca-se a representac¸aao de fenoˆmenos que se repetem, dentro de um
programa, sendo freqüentes ao longo de todas as fases do desenvolvimento de
um programa: estudo do problema, modelagem, codificac¸aao, compilac¸aao e execuc¸aao do programa.
Na codificac¸aao de modelos usando linguagens de programac¸aao, a partir de
abstrac¸ooes representando componentes do programa, surgem naturalmente as
declarac¸ooes de estruturas de dados, de func¸ooes, subrotinas e macros, possivelmente paramétricos.
Algumas repetic¸ooes saao entaao resolvidas manualmente pelo programador, que
se incumbe de criar comandos, no programa, que reflitam através da simples
cópia física dos comandos que realizam as repetic¸ooes conceituais pretendidas das
abstrac¸ooes a serem repetidas no programa. Isso só deve ser feito, todavia, em
situac¸ooes muito especiais.
Uma alternativa melhor, adotada por muitas linguagens de programac¸aao,
oferece comandos e declarac¸ooes específicas para a codificac¸aao de estruturas repetitivas, e automaticamente traduzidas, pelo compilador, para um código executável equivalente, cabendo ao compilador determinar sua forma de realizac¸aao,
em linguagem de máquina, como procedimentos abertos (macros, expandidos em
tempo de compilac¸aao, resultando programas rápidos e longos) ou fechados (subprogramas, chamados em tempo de execuc¸aao, resultando programas compactos
porém mais lentos).
Pouco tem sido explorado o uso da adaptatividade como variante para a utilizac¸aao de macros, cuja expansaao é postergada para a época da execuc¸aao nos
programas adaptativos. Neste artigo, mostra-se que situac¸ooes usualmente representadas através de técnicas tradicionais podem ser alternativamente codificadas
em forma adaptativa, caso essa opc¸aao se mostre proveitosa na particular situac¸aao
do programador.
2.2 Modelo de camadas para software adaptativo
Em [6], descreve-se a sintaxe de uma linguagem para programac¸aao adaptativa,
e o funcionamento da camada adaptativa dos programas nela desenvolvidos.
Nela, figuram os elementos necessários para representar programas adaptativos, mas, se conveniente, pode ser usada também para codificar fluxogramas
naao adaptativos.
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 952
4 Salvador Ramos Bernardino da Silva e Joaao José Neto
Pode-se sintetizar brevemente a descric¸aao da arquitetura de um programa
adaptativo concebido de acordo com o modelo em que se baseia essa linguagem,
considerando suas quatro camadas mutuamente ortogonais: (i) a primeira camada, povoada por um conjunto de blocos básicos, representando operac¸ooes
monolíticas com uma só entrada e uma só saída, nesse nível de abstrac¸aao; (ii) a
segunda, que abriga um conjunto de decisores, cada qual acoplado diretamente
à saída de um bloco básico, criando saídas separadas para cada caso possível,
considerada a variedade existente de condic¸ooes de saída produzidas pelo bloco
básico associado; (iii) a terceira, associada a um conjunto de ac¸ooes adaptativas (chamadas paramétricas de func¸ooes adaptativas), responsáveis pela automodificac¸aao propriamente dita do programa, posicionadas nas extremidades dos
conectores, entre uma saída de algum decisor e um conector (ac¸aao adaptativa
anterior), ou entre um conector e a entrada de um bloco básico (ac¸aao adaptativa
posterior); (iv) a última, compreendendo um conjunto de conectores, que estabelecem as ligac¸ooes existentes entre as saídas dos diversos decisores e as entradas
dos blocos básicos.
A representac¸aao gráfica de programas adaptativos, construidos em conformidade com o modelo em questaao, apresenta o aspecto mostrado na Figura 1, no
qual se pode observar a independeˆncia entre as camadas. É fácil observar que,
Figura 1. Gráfico de programa adaptativo, idealizado segundo o modelo de camadas.
removendo-se desse diagrama as ac¸ooes adaptativas, o programa representado se
reduz a um fluxograma seqüencial, portanto, essa notac¸aao se aplica igualmente
à representac¸aao de lógicas estáticas e de códigos automodificáveis.
2.3 Implementac¸aao adaptativa de fenoˆmenos repetitivos.
Conforme foi discutido, elementos repetitivos de um programa costumam ter
implementac¸aao através do uso de técnicas iterativas ou recursivas, e através de
abstrac¸ooes representadas por procedimentos abertos ou fechados.
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 953
Um método para a programac¸aao de software adaptativo 5
As ac¸ooes associadas ao tratamento de tais elementos repetitivos ocorrem em
época de projeto, de compilac¸aao (repetic¸ooes expandidas pelo compilador, a partir
das chamadas de macros empregadas no programa) ou de codificac¸aao (usando-se
repetic¸aao explícita).
Em programas de código estático, usualmente saao processados, em tempo
de execuc¸aao, os comandos repetitivos disponibilizados pelas linguagens de programac¸aao, bem como as chamadas de procedimentos, acionadas pelo programa
ao longo da sua execuc¸aao, enquanto em programas automodificáveis, explora-se
a modificac¸aao dinaˆmica do programa durante a sua execuc¸aao, promovida pela
execuc¸aao de ac¸ooes adaptativas.
Em particular, repetic¸ooes implementadas adaptativamente se resumem a um
processo análogo ao da expansaao de macros, porém efetuada naao durante a
compilac¸aao, como em programas de código estático, mas apenas em tempo de
execuc¸aao, e apenas o número de vezes que for estritamente necessário para a
particular atividade que estiver sendo executada em cada caso.
3 Programac¸aao Adaptativa
Na linguagem para programac¸aao adaptativa que foi proposta, podem ser identificadas construc¸ooes sintáticas que refletem a estrutura dos programas automodificáveis desenvolvidos com a arquitetura acima resumida: (i)Uma linguagem
hospedeira naao especificada pode ser empregada para exprimir a lógica do programa naao-adaptativo subjacente, em particular a dos blocos básicos. A lógica
global do programa pode ser complementada usando-se, adicionalmente, todos
os demais recursos da linguagem, exceto as ac¸ooes adaptativas. Como naao foram
feitas restric¸ooes para os blocos básicos, nada impede que cada um deles possa
ser, por sua vez, outro programa automodificável. Isso proporciona a possibilidade de um projeto com arquitetura hierárquica, abrindo assim possibilidades
metodológicas adicionais. (ii) A camada adaptativa oferecida pela linguagem pooe
à disposic¸aao do programador, além das declarac¸ooes e das chamadas das func¸ooes
adaptativas, a possibilidade de implementar seu programa adaptativo a partir
de uma concepc¸aao baseada em um modelo em camadas aderente à arquitetura
que foi apresentada anteriormente.
Detalhes sobre a linguagem proposta podem ser encontrados em [6]. Especificamente, nessa linguagem, dispooe-se das seguintes construc¸ooes sintáticas:
(i) Declarac¸aao dos blocos básicos: efetuada através dos comandos code; (ii)
declarac¸aao das func¸ooes adaptativas, que descrevem a lógica parametrizada, representada pelas ac¸ooes adaptativas mencionadas no programa: adaptive function;
(iii) As ac¸ooes adaptativas, referentes às chamadas de func¸ooes adaptativas declaradas
no programa (indicando se a aplicac¸aao da ac¸aao adaptativa deve ser anterior
ou posterior à transfereˆncia de controle entre os blocos básicos de origem e de
destino da conexaao à qual estaao associadas): perform ... before/after; (iv)
Declarac¸aao dos decisores, indicando para a saída de um bloco básico, qual deve
ser a entrada do próximo bloco básico a ser executado, em func¸aao do valor de
saída calculado pelo bloco básico ao qual o decisor estiver associado: especificaCACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 954
6 Salvador Ramos Bernardino da Silva e Joaao José Neto
dos através dos comandos de múltipla escolha case; (v) Declarac¸aao das conexooes
condicionais (representadas por um decisor) existentes entre a saída de um bloco
básico e a entrada de outro: connect ... to
4 Método Proposto
As recomendac¸ooes aqui descritas visam conduzir à estruturac¸aao de um programa
que resulte em um modelo aderente ao mencionado no item 2.2. Este método
foi idealizado considerando a existeˆncia de uma linguagem compatível, como é
o caso da linguagem citada no item 3, sendo portanto vantajoso, embora naao
obrigatório, que ambos sejam utilizados em conjunto.
Conforme mencionado, estruturas e comportamentos abstratos que se repetem
saao muito freqüentes em programac¸aao, e podem ser representados nos programas, de maneira convencional, através de subprogramas, de forma aberta (por
exemplo, como repetic¸ooes explícitas de código, ou como macros) ou fechada (por
exemplo, na forma de func¸ooes, subrotinas, procedimentos, métodos etc.).
Em programas que se alteram dinamicamente, identificam-se igualmente abstrac¸ooes dessa natureza, que convivem com outras partes do programa, especificamente utilizadas para promoverem a automodificac¸aao do código.
Partindo desse fato, é possível iniciar-se o desenvolvimento de um programa
automodificável pela estruturac¸aao de sua lógica sem considerar, em um primeiro
momento, as alterac¸ooes dinaˆmicas que se pretende para o mesmo. Para isso,
é possível fazer uso dos recursos e métodos usuais de projeto oferecidos pela
Engenharia de Software, originando um programa naao adaptativo subjacente.
O próximo passo consiste em identificar no programa todas as regiooes sobre
as quais se preveˆ que possa vir a acontecer, durante a execuc¸aao do mesmo,
quaisquer tipo de modificac¸aao. Em cada regiaao assim caracterizada, determinar
exatamente todos os pontos onde ocorreraao as alterac¸ooes, e quais seraao essas
alterac¸ooes, as quais podem acontecer na forma de retirada ou de inserc¸aao de
trechos de código. A seguir, secciona-se o programa nesses pontos, destacando
do restante do programa os pontos de potencial inserc¸aao e os trechos a serem
potencialmente removidos.
Caso seja observado que alguma estrutura de controle do programa em análise
foi seccionada, deve-se reescrever a mesma utilizando estruturas mais simples.
Dessa forma, obtém-se, ao final, uma partic¸aao do programa, em que cada trecho de código assim obtido deverá ser nomeado e formará, na estrutura proposta,
um bloco básico (na linguagem adotada, os blocos básicos saao representados pela
estrutura code).
A primeira sec¸aao do programa adaptativo, em sua versaao final, será formada
pela declarac¸aao de todos os codes. Para tanto, a lógica dos codes deve ser expressa na forma de um trecho de programa, com uma só entrada e uma só saída.
Na linguagem proposta, isso é feito usando-se os comandos de uma linguagem
hospedeira.
O fluxo de execuc¸aao do programa pode agora ser estabelecido, interconectandose os blocos básicos identificados anteriormente. A conexaao de um bloco básico
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 955
Um método para a programac¸aao de software adaptativo 7
aos outros depende dos valores assumidos à saída do bloco básico de origem, os
quais determinam o bloco básico sucessor, naquela ocasiaao.
Deve-se assegurar que cada bloco básico tenha apenas uma entrada e uma
saída. À saída de cada bloco básico deve ser associado um valor numérico inteiro, para que possa ser determinado corretamente o bloco básico que o deverá
suceder, uma vez terminada a sua execuc¸aao.
Como isso ocorre em tempo de execuc¸aao, é necessário que o programa preveja
todas as condic¸ooes e o rumo a tomar em cada uma delas. Por essa razaao, cada
bloco básico fica associado a um decisor, o qual determina, para cada valor de
saída associado ao bloco básico de origem, qual dos blocos básicos do programa
será seu sucessor naquela ocasiaao.
Para tanto, utilizam-se conectores, que interligam as saídas do decisor associado aos blocos básicos de origem às entradas dos blocos básicos que os sucederaao
na seqüeˆncia de execuc¸aao do programa.
Finalmente, estabelecidos todos os valores de saída dos blocos básicos e
também os seus blocos básicos sucessores em cada caso, resta apenas utilizar
os conectores para interligá-los, estabelecendo assim a topologia inicial do grafo
da lógica do programa.
A declarac¸aao das conexooes formará a segunda sec¸aao do programa.
Uma vez desenvolvida a lógica do programa estático, a fase seguinte consiste em incorporar a ele as chamadas de func¸ooes adaptativas, bem como as
declarac¸ooes das respectivas func¸ooes adaptativas.
Saao essas func¸ooes que especificam as ac¸ooes adaptativas elementares a serem
executadas, responsáveis pelas modificac¸ooes atoˆmicas do código.
Todas as alterac¸ooes de lógica, a serem efetuadas durante a execuc¸aao do programa, deveraao nessa ocasiaao ser especificadas, na forma de chamadas de func¸ooes
adaptativas.
Na arquitetura adotada, a aplicac¸aao de ac¸ooes adaptativas ao programa podem
ocorrer em apenas duas situac¸ooes: imediatamente à saída de um bloco básico,
antes que o controle do programa seja transferido ao bloco básico que o sucede
(ac¸aao adaptativa anterior), ou entaao, na situac¸aao inversa (ac¸aao adaptativa posterior), após a transfereˆncia de controle ao bloco sucessor, mas imediatamente
antes de este assumir o controle da execuc¸aao do programa.
A especificac¸aao dessas ac¸ooes adaptativas se faz acoplando-se as chamadas
das respectivas func¸ooes adaptativas às extremidades das conexooes entre blocos
básicos, que estabelecem a topologia do fluxograma do programa: ac¸ooes anteriores saao acopladas à extremidade de origem da conexaao, enquanto ac¸ooes adaptativas posteriores se associam à extremidade de destino da conexaao.
Na linguagem proposta, quando existir uma chamada de func¸aao adaptativa,
ela será especificada ao ser descrita a conexaao que a suporta.
Na linguagem proposta, sempre que a execuc¸aao de uma ac¸aao adaptativa promover a remoc¸aao ou adic¸aao de uma conexaao, é da responsabilidade do programador cuidar para que seja mantida a conectividade do grafo que representa a
lógica do programa.
A declarac¸aao das func¸ooes adaptativas encerra a codificac¸aao do programa.
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 956
8 Salvador Ramos Bernardino da Silva e Joaao José Neto
5 Exemplo Ilustrativo
Para exemplificar o emprego do método de desenvolvimento de programas automodificáveis proposto neste artigo, apresenta-se aqui o esboc¸o do desenvolvimento de uma implementac¸aao adaptativa do núcleo de um simulador dirigido
por eventos, similar ao apresentado no antigo trabalho de McDougall [7]. A simulac¸aao dirigida por eventos é uma técnica simples, ao mesmo tempo em que se
mostra tecnologicamente importante, em virtude da vasta gama de aplicac¸ooes
em que pode ser empregada. A classe de problemas que este núcleo de simulac¸aao
resolve é a da reac¸aao de um modelo, quando estimulado por uma seqüeˆncia de
eventos.
No simulador, tal seqüeˆncia funciona como uma espécie de programa a ser
executado, cujas instruc¸ooes saao os eventos, a serem interpretados pelo simulador.
Essa programac¸aao dos eventos a serem simulados é especificada na forma de
uma estrutura de dados organizada como lista, ordenada segundo os instantes
relativos previstos para a ocorreˆncia temporal dos eventos que a compooem.
Os eventos saao modelados na forma de triplas de informac¸ooes, especificandose para cada qual o tipo de evento, a atividade simulada à qual o evento se refere,
e o instante programado para a sua ocorreˆncia. Eventos podem ser independentes ou dependentes, conforme seja sua ocorreˆncia especificada externamente,
ou decorrente de ac¸ooes provocadas por outros eventos.
Naturalmente, a ocorreˆncia de eventos dependentes é determinada pelo próprio
processo de simulac¸aao à medida que este progride, portanto novos eventos podem ir sendo dinamicamente agregados à lista de eventos, razaao porque a lista
de eventos pode com naturalidade ser considerada como um script de programa
adaptativo, e o simulador, como sendo o seu interpretador.
A simulac¸aao tem início quando se fornece ao simulador um conjunto de eventos independentes, ou seja, um conjunto de ocorreˆncias desejadas, Assim, cada
elemento dessa lista representa e especifica um particular evento a ser simulado,
contendo para isso as informac¸ooes mencionadas acerca do evento, que viabilizem
sua simulac¸aao (tipo de evento, atividade a que se refere, instante de ocorreˆncia),
servindo o instante de ocorreˆncia como chave de ordenac¸aao da lista.
É interessante notar que, com pequenas modificac¸ooes, essa estrutura de dados pode se adequar com facilidade à representac¸aao de uma grande variedade
de fenoˆmenos, que podem ser objeto de simulac¸ooes estruturadas de forma similar. Entre tantos exemplos possíveis, é particularmente aderente a este exemplo a simulac¸aao de arquiteturas de interfaces reativas, como por exemplo, as
de máquinas de calcular, ou ainda de processadores em geral, guiada por uma
programac¸aao apresentada na forma de uma lista de operac¸ooes a realizar (teclas
acionadas ou instruc¸ooes especificadas). Ilustra essa situac¸aao a interpretac¸aao de
programas expressos através de uma linguagem de script, ou de alguma linguagem de máquina, real ou virtual.
Um importante elemento de uma simulac¸aao dessa natureza é, naturalmente, o
tempo, visto que se trata de uma simulac¸aao de fenoˆmenos temporais. A simulac¸aao
de ocorreˆncias temporais raras vezes pode ser efetuada na mesma escala de tempo
que os fenoˆmenos simulados, ou seja, para um observador simultaˆneo do processo
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 957
Um método para a programac¸aao de software adaptativo 9
de simulac¸aao e do processo simulado, o tempo físico gasto pelo simulador para
simular um dado fenoˆmeno real pode ser muito diferente (maior ou menor) que
o correspondente tempo físico gasto pelo fenoˆmeno real. Adicionalmente, raras
vezes é possível criar simuladores cujos intervalos tempo de simulac¸aao sejam
sequer proporcionais aos correspondentes intervalos de tempo dos fenoˆmenos
simulados. Por essa razaao, opta-se por um tempo simulado que flui de forma
discreta, naao contínua, limitando-se aos instantes em que haja alguma atividade
em curso, e saltando intervalos inativos, economizando dessa maneira tempo de
processamento.
Paralelismo e concorreˆncia podem ser facilmente simulados em uma arquitetura como esta. Eventos que ocorrem simultaneamente ocupam posic¸ooes diferentes na lista de eventos, apesar de estes estarem ordenados segundo o instante de
sua ocorreˆncia. Assim, a simulac¸aao (seqüencial) de eventos que estejam programados para ocorrerem simultaneamente naao será obrigatoriamente simultaˆnea,
mas o instante de tempo simulado naao deve progredir enquanto houver eventos
programados para ocorrerem num mesmo instante.
Considerando-se esse fato, e tomando-se apenas alguns cuidados com o tratamento dos inevitáveis conflitos que surgem em situac¸ooes dessa natureza, a simulac¸aao de eventos simultaˆneos poderá ser feita sem grandes dificuldades, praticamente da mesma forma que a dos demais eventos.
Esboc¸a-se a seguir em pseudo-código, a lógica do núcleo de um simulador
dirigido por eventos de propósito geral, que pode ser convenientemente adequado
para a implementac¸aao de aplicac¸ooes como as sugeridas anteriormente.
1. Obter o conjunto de eventos independentes especificado pelo usuário, e com
ele construir a lista de eventos inicial. Ordenar essa lista segundo os instantes
de ocorreˆncia programados para os diversos eventos. Posicionar o relógio
simulado (TIME) no instante inicial de simulac¸aao, usualmente, o instante
relativo zero. Posicionar o simulador para a extrac¸aao do primeiro evento da
lista.
2. Preparar o simulador para extrair, identificar e interpretar o próximo evento
da lista.
3. Naao restando eventos na lista, emitir relatório dos resultados coletados durante a simulac¸aao, e terminar o processamento. Caso contrário, prosseguir.
4. Retirar o primeiro evento (e, t, j) da lista de eventos, cujo instante de
ocorreˆncia (t) é o mais baixo dentre os eventos programados.
5. Registrar o instante corrente de simulac¸aao para este evento: a) caso o relógio
simulado TIME acuse um instante futuro em relac¸aao ao instante (t) previsto para a ocorreˆncia do evento, o instante de simulac¸aao daquele evento
será aquele indicado pelo relógio (TIME), o qual se mantém inalterado; b)
caso contrário, TIME deverá ser adiantado para coincidir com o instante (t)
previsto para a ocorreˆncia do evento.
6. Determinar o tipo (e) do evento extraído e a identificac¸aao do fenoˆmeno simulado ao qual o evento se refere (j).
7. De acordo com o tipo (e) do evento, é preciso acionar uma rotina de interpretac¸aao apropriada. A lógica específica dessa rotina pode ser criada adaptativamente, neste ponto, para ser executada logo a seguir, em substituic¸aao
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 958
10 Salvador Ramos Bernardino da Silva e Joaao José Neto
a um eventual outro bloco que estiver presente abaixo, no item 8. (Em casos
muito simples, essa lógica poderia ter sido programada antecipadamente, de
forma estática.)
8. Bloco de interpretac¸aao do evento corrente, criado dinamicamente.
9. Registrar os resultados da simulac¸aao do evento, para o relatório final de simulac¸aao; Inserir, na lista de eventos, de acordo com as conseqüeˆncias programadas para o particular evento simulado, os eventos dependentes adicionais
que forem necessários, programando-os para que seu (futuro) instante de
ocorreˆncia esteja em conformidade com as características do fenoˆmeno simulado. [É aqui que a simulac¸aao pode se utilizar dos recursos dinaˆmicos dos
programas adaptativos].
10. Voltar ao passo 2, para a extrac¸aao do próximo evento a simular.
Diagrama — Identificam-se facilmente os seguintes pontos notáveis do programa acima:
a) Blocos básicos: correspondentes aos itens 1, 2, 3, 4, 5a, 5b, 6, cada um dos
sub-itens do item 7, referentes aos diversos tipos possíveis de eventos, e a junc¸aao
dos itens 9 e 10 (por serem puramente seqüenciais) do algoritmo acima;
b) Blocos dinaˆmicos: bloco 8, que é substituido pela ac¸aao dos sub-itens do
bloco 7 a cada vez que o simulador os executa.
c) Blocos que efetuam alterac¸ooes no programa: cada um dos sub-itens do
bloco 7, responsáveis pela alterac¸aao dinaˆmica do bloco 8. Assim, fica evidente
quais seraao os blocos básicos de que o programa se constitui. As ac¸ooes adaptativas
estaraao todas a cargo dos componentes do bloco 7, e portanto as conexooes entre
todos os blocos também ficam bem definidas. O diagrama resultante, equivalente
ao modelo em camadas e mais compacto, é o seguinte:
Figura 2. Diagrama do simulador de eventos.
A codificac¸aao deste diagrama na linguagem proposta fica com o seguinte
aspecto:
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 959
Um método para a programac¸aao de software adaptativo 11
Figura 3. Programa adaptativo do simulador de eventos.
6 Conclusooes
Este artigo oferece ao leitor um panorama sobre o atual estado do desenvolvimento de tecnologia voltada para a programac¸aao adaptativa, apresentando detalhadamente, para essa classe de programas, um método de projeto e desenvolvimento apoiado em uma arquitetura geral, especialmente projetada para a
representac¸aao de programas adaptativos.
Nessa arquitetura, representa-se a lógica de um programa automodificável
decompondo-o em quatro camadas mutuamente ortogonais, cuja utilizac¸aao privilegia que sejam evidenciados os quatro tipos fundamentais de elementos de que
se constituem os programas adaptativos: (i) blocos básicos de código estático;
(ii) decisores; (iii) ac¸ooes adaptativas; (iv) conectores.
A linguagem aqui empregada para programac¸aao adaptativa reflete essa arquitetura, e permite que programas adaptativos, concebidos segundo suas diretrizes, possam ser diretamente codificados em um nível aderente de abstrac¸aao
conceitual.
Para que se possa desenvolver, como soluc¸aao adaptativa de um problema,
um modelo que siga esse padraao, é necessário planejar o uso da adaptatividade
nessa soluc¸aao, aplicando técnicas projetadas e escolhidas caso a caso, ou entaao
partir de alguma soluc¸aao tradicional, convertendo-a para que seja representada
adaptativamente através de alguma forma automodificável equivalente.
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 960
12 Salvador Ramos Bernardino da Silva e Joaao José Neto
No presente trabalho, esta última forma foi tratada com maior cuidado,
complementando outras publicac¸ooes anteriores, cuja toˆnica estava centrada em
soluc¸ooes ad-hoc, aplicáveis em uma variedade de casos específicos entaao estudados.
Refereˆncias
1. Anckaert, B; Madou, M; Bosschere, K. D. A Model for Self-Modifyind Code. Lecture
Notes in Computer Science, Springer Berlin / Heidelberg, ISSN 0302-9743, Volume
4437/2007, Information Hiding, ISBN 978-3-540-74123-7, Pages 232-248, September
14, (2007)
2. Madou, M. et al. Software Protection Through Dynamic Code Mutation. Wisa 2005.
LNCS 3786, pag. 194-206 (2006)
3. Giffin, J. T., Christodorescu, M., Kruger, L. Strenghtening software selfchecksumming via self-modifying code. Proceedings of the 21st Annual Computer
Security Applications Conference – ACSAC (2005)
4. Laboratório de Linguagens e Técnicas Adaptativas – LTA, http://www.pcs.usp.
br//lta
5. Neto, J.J. Adaptive Rule-Driven Devices - General Formulation and Case Study.
Lecture Notes in Computer Science. Watson, B.W. and Wood, D. (Eds.): Implementation and Application of Automata 6th International Conference, CIAA 2001,
Vol. 2494, Pretoria, South Africa, July 23-25, Springer-Verlag, 2001, pp. 234-250
(2001)
6. Neto, J.J., Silva, S.R.B. Projeto de uma linguagem para programac¸aao adaptativa.
Submetido ao IX Congreso de la Sociedad Peruana de Computación (2010)
7. MacDougall, M.H. ACM Computing Surveys (CSUR) . Volume 2 , Issue 3 (September 1970), pages: 191 – 209 ISSN:0360-0300 (1970)
CACIC 2010 - XVI CONGRESO ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN                                                 961
