Argumentación Temporal utilizando Labeled DeLP
﻿En este trabajo se presenta una forma de argumentación en
la que se considera la validez temporal de los argumentos involucrados.
La herramienta utilizada es una extensión existente de Defeasible Logic
Programming denominada Labeled-DeLP. Esta extensión permite considerar intervalos de tiempo en los que las claúsulas que componen un
determinado argumento están “activas”, permitiendo describir por extensión la vigencia temporal de estas claúsulas. Asi se determinan los
intervalos de tiempo en los que el argumento esta activo. Al efectuar una
consulta, el sistema deberá tener en cuenta el intervalo de tiempo para el
que se está efectuando la misma, analizando cuales son los argumentos
que están activos en dicho intervalo.
Palabras Clave: Argumentación Temporal, Argumentación Abstracta, Razonamiento Rebatible.
1. Introducción
Argumentar es un proceso que consiste en defender una afirmación dando
razones para su aceptación; tanto la afirmación original como el soporte ofrecido
para ella están abiertos a la duda manifestada por afirmaciones contrapuestas.
Es usual denominar argumento a la estructura compuesta por una afirmación o
conclusión, junto con el soporte ofrecido o premisas y la descripción de la forma en como las premisas soportan a la afirmación. Este último componente se
denomina comúnmente inferencia. El proceso de argumentación puede presentarse como un juego entre dos participantes: un proponente cuyo rol es apoyar
al argumento original y un oponente cuya actividad tiende a interponerse con el
argumento original . Los argumentos del proponente se denominan argumentos
pro y los del oponente se denominan op. Un argumento ofrecido para socabar
otro argumento se denomina contraargumentos. Así, el proceso comienza con la
introducción de un argumento pro por parte del proponente, luego el oponente
ofrece sus contraargumentos. En este momento el proponente se transforma en
oponente de su contrincante y ofrece contraargumentos para los contraargumentos introducidos. El proceso continúa de esta manera hasta agotarse.
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 51
La intuición que permite basar el razonamiento en un proceso argumentativo
es que una afirmación es creíble si se puede argumentar a su favor con éxito,
i.e., en el caso de que existan contra-argumentos, estos pueden ser derrotados.
En otras palabras, un agente racional creerá o no en una sentencia dependiendo
de que los argumentos que soporten dicha declaración puedan defender exitosamente de todos los posibles ataques producidos por otros argumentos. En base a
esto, existen los sistemas argumentativos que constituyen una formalización del
razonamiento rebatible, en el cual las conclusiones obtenidas pueden ser rechazadas ante la aparición de una nueva evidencia.
Inicialmente propuesto por Dung [3], el modelo de argumentación abstracta se basa en considerar un conjunto de argumentos y una relación binaria
definida sobre el conjunto de todos los posibles argumentos que representa el
ataque de un argumento hacia otro. Así, el formalismo considera una dupla
AF = (AR,ATTACKS), donde AR es el conjunto de argumentos considerados
y ATTACKS representa la relación de ataque definida sobre AR. Este modelo
gira en torno de dos nociones básicas: la de “aceptabilidad” y la de “admisibilidad”de un conjunto de argumentos.
Existen muchas extensiones que surgen a partir de este formalismo abstracto,
entre ellas se encuentra el timed abstract framework [1,2]. Este formalismo aporta la posibilidad de encontrar el intervalo en que un argumento es aceptable. En
los argumentos temporales (Timed Abstract Framework) cada argumento tiene
asociado un conjunto de intervalos de tiempo en los que este argumento está activo. De esta manera, al formalismo abstracto se le agrega un componente Av
que define los intervalos de tiempo en los cuales los argumentos se encuentran
activos, obteniendo una 3-tupla (AR,ATTACKS,Av). El tiempo cobra así importancia en la determinación de la aceptabilidad de un argumento.
Una forma de argumentación en la que se considera la forma en que los argumentos están construidos, es la Programación en Lógica Rebatible (Defeasible
Logic Programming o DeLP); este es un formalismo que combina la programación lógica y la argumentación rebatible. DeLP incorpora el formalismo de
argumentación para tratar los conocimientos contradictorios. Este formalismo,
permite la identificación de las piezas de conocimiento que están en contradicción
y a través de un proceso dialéctico, decidir cuál de ellos prevalece.
El objetivo de este trabajo es instanciar el Timed Abstract Frameworks a
través de DeLP definiendo los componentes que no aparecen en argumentation
abstracta, i.e., el lenguaje de representación, la construcción de un argumento
en ese lenguaje, y las nociones de ataque y derrota. Extenderemos DeLP para
establecer, para cada elemento del programa los intervalos de tiempo en el que
está activo, y en función de esta información determinar cuando un argumento
esta activo. Usaremos una extensión de DeLP conocida como -DeLP que utiliza el álgebra de etiquetas, y una función de propagación de las mismas, para
manejar la meta-información asociada a cada uno de los argumentos de un árbol
dialéctico.
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 52
2. Programación en Lógica Rebatible - DeLP
La programación en lógica rebatible (Defeasible Logic Programming - DeLP)[4],
combina la programación lógica y la argumentación rebatible. DeLP extiende
la programación en lógica convencional empleando la argumentación rebatible
para capturar aspectos del razonamiento de sentido común difíciles de expresar en la programación en lógica convencional. Los programas lógicos rebatibles
permiten expresar información potencialmente inconsistente o incompleta, pudiendo decidir entre metas contradictorias mediante un determinado criterio de
preferencia.
Un programa lógico rebatible consiste de: (1) un conjunto Δ de reglas rebatibles de la forma L —< P
1
, . . . , P
n
, con n ≥ 0, que representa información
incompleta o tentativa, donde L y cada P
i
son literales, y (2) un conjunto Π
de reglas de la forma L ←− P
1
, . . . , P
n
, con n ≥ 0, que representa información
estricta, donde L y cada P
i
son literales. En el caso particular cuando n = 0,
se denotará como L ←− True, y en esta oportunidad L se denomina hecho. Es
importante tener en cuenta que el conjunto Π debe ser consistente ya que representa información concreta (indisputable). Por el contrario, el conjunto Δ puede
ser o no consistente, esto se debe a que este conjunto representa información
tentativa.
Definición 1 Sea h un literal y P = (Π,Δ) un programa lógico rebatible. Un
argumento para h es un par 〈A, h〉, donde A es un conjunto de reglas rebatibles
de Δ, tal que:
1. Existe una derivación rebatible para h a partir de Π ∪ A.
2. Π ∪A es no contradictorio, y
3. A es minimal, es decir, no existe un subconjunto propio A′, A′  A que
satisface (1) y (2).
Un argumento 〈B, q〉 es un sub-argumento de 〈A, h〉 si y sólo si, B ⊆ A.
Este formalismo, permite la identificación de las piezas de conocimiento que
están en contradicción y a través de un proceso dialéctico, decidir cuál de ellos es
el que prevalece. Los argumentos pueden interactuar unos con otros de diferentes
maneras a través de las relaciones de desacuerdo, contra-argumento y derrota.
Estas nociones se definen a continuación:
Definición 2 Sea P = (Π,Δ) un programa. Dos literales h y h′ están en desacuerdo, si y sólo si el conjunto Π ∪ {h, h′} es contradictorio.
El ejemplo más simple de literales en desacuerdo son dos literales complementarios como “p” y “∼p”, ya que Π∪{p,∼p} es contradictorio, cualquiera sea
el conjunto Π. Sin embargo, dos literales que no sean complementarios, como
“p” y “q”, también pueden estar en desacuerdo, e.g., si Π = {h ← p,∼h ← q}.
Definición 3 Sean 〈A
1
, h
1
〉, 〈A
2
, h
2
〉 dos argumentos en P = (Π,Δ). Decimos
que 〈A
1
, h
1
〉 contra-argumenta a 〈A
2
, h
2
〉 en el literal h si y sólo si existe un subargumento 〈A, h〉 de 〈A
2
, h
2
〉 tal que h y h
1
están en desacuerdo. El argumento
〈A, h〉 se llama sub-argumento de desacuerdo, y el literal h será el punto de
contra-argumentación. Si 〈A
1
, h
1
〉 contra-argumenta a 〈A
2
, h
2
〉, entonces tamCACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 53
bién se dirá que 〈A
1
, h
1
〉 ataca a 〈A
2
, h
2
〉, o que 〈A
1
, h
1
〉 es un contra-argumento
para 〈A
2
, h
2
〉.
Dos argumentos en conflicto pueden compararse mediante el criterio de especificidad, que establece un orden de preferencia entre los mismos. Especificidad
favorece argumentos que contengan mayor información o sustenten su conclusión
en forma más directa. Seguidamente se enuncia su definición formal:
Definición 4 Sean 〈A
1
, h
1
〉, 〈A
2
, h
2
〉 dos argumentos en P, y L el lenguaje generado por P. Se dice que 〈A
1
, h
1
〉 es estrictamente más específico que 〈A
1
, h
1
〉,
denotado como 〈A
1
, h
1
〉 	 〈A
2
, h
2
〉, si y sólo si:
1. Para todo e ∈ Sent(L) que e activa no trivialmente A
1
, i.e., Π∪{e}∪A
1
|∼h
1
y Π ∪ {e}  h
1
se verifica que e activa A
2
, i.e., Π ∪ {e} ∪A
2
|∼h
2
.
2. Existe e ∈ Sent(L) que e no activa A
1
, i.e., Π ∪ {e} ∪A
1
|∼h
1
, y e activa no
trivialmente A
2
, i.e., Π ∪ {e} ∪A
2
|∼h
2
, y Π ∪ {e}  h
2
.
Definición 5 Sean 〈A
1
, h
1
〉, 〈A
2
, h
2
〉 dos argumentos en P. Se dice que 〈A
2
, h
2
〉
derrota a 〈A
1
, h
1
〉 en el literal h si y sólo si existe un sub-argumento 〈A, h〉 de
〈A
1
, h
1
〉 tal que: 〈A
2
, h
2
〉 contra-argumenta a 〈A
1
, h
1
〉 en el literal h y se cumple
una de estas dos opciones:
1. 〈A
2
, h
2
〉 es estrictamente más específico que 〈A, h〉 (derrotador propio), o
2. 〈A
2
, h
2
〉 es incomparable con 〈A, h〉 (derrotador de bloqueo)
La presencia de múltiples derrotadores para un argumento produce una ramificación en líneas de argumentación, dando origen a un árbol de derrotadores
que se denominará árbol de dialéctica.
Definición 6 Sea 〈A, h〉 un argumento en P = (Π,Δ). Un árbol de dialéctica
para 〈A, h〉 a partir de P, denotado T(〈A, h〉), se construye de la siguiente forma:
1. La raíz del árbol es etiquetada con 〈A, h〉.
2. Sea N un nodo del árbol etiquetado 〈A
n
, h
n
〉, y [〈A, h〉, 〈A
1
, h
1
〉, 〈A
2
, h
2
〉,
. . ., 〈A
n
, h
n
〉] la secuencia de etiquetas desde la raíz hasta N .
Sean 〈B
1
, q
1
〉, 〈B
2
, q
2
〉, . . ., 〈B
k
, q
k
〉 todos los derrotadores de 〈A
n
, h
n
〉. Para
cada derrotador 〈B
i
, q
i
〉 con (1 ≤ i ≤ k), tal que la línea de argumentación
[〈A, h〉, 〈A
1
, h
1
〉, 〈A
2
, h
2
〉, . . ., 〈A
n
, h
n
〉, 〈B
i
, q
i
〉] es aceptable, existe un nodo
N
i
hijo de N etiquetado con 〈B
i
, q
i
〉. Si no existe ningún derrotador 〈B
i
, q
i
〉
en tales condiciones, entonces el nodo N es una hoja.
En este árbol, cada camino desde la raíz hasta una hoja corresponde a una
línea de argumentación. Una vez construido el árbol de dialéctica se realiza es
proceso de marcado del árbol para determinar la aceptabilidad o garantía de un
determinado literal h.
Definición 7 Sea Tree〈A, h〉 el árbol de dialéctica para 〈A, h〉. El árbol de dialéctica marcado, denotado T∗(〈A, h〉) se obtiene marcando cada nodo en T(〈A, h〉)
de la siguiente forma:
1. Todas las hojas de T(〈A, h〉) se marcan con “U” en T∗(〈A, h〉).
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 54
2. Sea N un nodo interno de T(〈A, h〉). El nodo N se marca con “U”si todos
sus nodo hijos están marcados con “D”, y N se marca con “D”si tiene al
menos un nodo hijo marcado con “U”.
Definición 8 Sea P = (Π,Δ) un programa lógico rebatible y h un literal. Sea
〈A, h〉 un argumento para h, y T∗(〈A, h〉) el árbol de dialéctica marcado asociado
con 〈A, h〉. El literal h está garantizado si la raíz de T∗(〈A, h〉) está marcada con
“U”.
3. DeLP con Etiquetas (-DeLP)
Es posible añadir a los elementos del programa meta-información con algún
propósito específico. Esta meta-información podría ser: probabilidad, grado de
certeza, confiabilidad de la fuente, intervalos de tiempo, etc. Para ello, dado un
dominio de etiquetas L se extiende el lenguaje de DeLP de manera tal de asociar
un elemento de L a cada uno de los elementos de un programa P y por extensión
a los argumentos que se pueden obtener del mismo. -DeLP [5] utiliza etiquetas
para mantener la meta-información extendiendo DeLP de la siguiente manera:
1. Se agrega una etiqueta de L a cada elemento del programa.
2. Se introduce una función ALS (Argument Label Synthesis) que permite determinar la etiqueta asociada a un argumento en base a las etiquetas de los
elementos que lo componen.
Dado un argumento 〈A, a〉, o bien a es un hecho en el programa y por lo tanto
A = ∅, o a se derivó utilizando una regla r con cabeza a y cuerpo b
1
, b
2
, . . . , b
n
;
en este último caso, A resulta de unir B
1
, B
2
, . . . , B
n
; donde 〈B
i
, b
i
〉 es subargumento de 〈A, a〉 para 1 ≤ i ≤ n, además de la regla r si es que r es una regla
rebatible. Así, la etiqueta asociada a 〈A, a〉 por ALS se define como, 
〈A, a〉 =
ALS ([ ], 
a
), donde 
a
es la etiqueta asociada con a si es un hecho, y 
〈A, a〉 =
ALS ([
〈B
1
, b
1
〉
, 
〈B
2
, b
2
〉
, . . . , 
〈B
n
, b
n
〉
], 
r
) en el caso general, donde 
r
y 
b
i
,
1 ≤ i ≤ n, son las etiquetas asociadas con r y b
i
, 1 ≤ i ≤ n. ALS permite
sintetizar la etiqueta asociada con un argumento a partir de las etiquetas de los
elementos que lo componen.
4. Argumentación Abstracta
Phan Minh Dung[3] desarrolló una abstracción de la argumentación rebatible mediante los frameworks de argumentación (Argumentation Framework AF ). En un AF la estructura de los argumentos permanece sin especificar y
el análisis se centra en la interacción existente entre los mismos. Un framework
de argumentación se define como un par compuesto por un conjunto de argumentos y una relación binaria que representa los ataques entre argumentos. Un
argumento es una entidad abstracta que cumple un determinado rol al estar relacionado con otros argumentos. Formalmente, un framework de argumentación
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 55
está definido como un par AF = (AR,ATTACKS), en donde AR es un conjunto de argumentos, y ATTACKS es una relación binaria en AR, es decir,
ATTACKS ⊆ AR×AR.
En primer lugar se presenta la noción de aceptabilidad. Un argumento A
es aceptable para un agente racional G, si G puede defender a A de todos los
ataques posibles, i.e., el conjunto de los argumentos aceptados por G debe ser
capaz de defenderse a sí mismo. Esta intuiciones se formalizan en las siguientes
definiciones tomadas de las presentaciones originales [3].
Definición 9 Sea AF = (AR,ATTACKS) un framework de argumentación.
- Un conjunto S ⊆ AR se denomina libre de conflictos si no existen dos
argumentos A,B ∈ S tal que A ataca a B, i.e., (A,B) 
∈ ATTACKS.
- Un argumento A ∈ AR es aceptable con respecto a S ⊆ AR si y sólo si para
cada B ∈ AR se cumple que si B ataca a A entonces B es atacado por S.
- Un conjunto libre de conflictos S ⊆ AR es admisible si y sólo si cada argumento en S es aceptable con respecto a S.
- Sea E ⊆ AR admisible, E es una extensión completa de AF si y sólo si E
contiene cada argumento que es aceptable con respecto a E.
- Sea E ⊆ AR admisible, E es una extensión grounded de AF si y solo si E
es minimal con respecto a la inclusión de conjuntos, tal que es admisible y
completa.
A continuación se presentará un ejemplo de framework de argumentación:
AF = (AR,ATTACKS)
AR = A,B,C,D,E, F,G
ATTACKS =
{(B,A), (C,B), (E,A),
(G,E), (F,G), (G,D)}
Figura 1: Framework de Argumentación
El conjunto S = {C,D,E, F} es admisible, contiene todos los argumentos
defensores de A, luego S es una extensión completa que además cumple con la
propiedades necesarias para ser una extensión grounded.
5. Argumentación Abstracta Temporal
La argumentación abstracta temporal (Timed Abstract Frameworks - TAF)
permite argumentar teniendo en cuenta el intervalo de tiempo específico en que
los argumentos están activos. En TAF cada argumento tiene asociado un conjunto de intervalos de tiempo ampliando la Definición 9, agregando un tercer
componente Av que obtiene los intervalos de tiempo correspondientes a un argumento, representándose como TAF = (AR,ATTACKS,Av). Comenzaremos
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 56
definiendo la estructura temporal, asociando la línea de tiempo con la recta real
y donde un intervalo de tiempo será un intervalo real.
Definición 10 Un intervalo de tiempo I representa un período de tiempo continuo, que se identifica por un par ordenado de puntos temporales. El punto
inicial es llamado Punto de Inicio de I, y el punto final es llamado Punto de
Fin de I. El intervalo puede ser:
1. Cerrado: define un período de tiempo en el cual están incluidos los puntos que
definen el intervalo (Punto de Inicio y Punto de Fin), denotados como [a, b].
2. Abierto: define un período de tiempo en el cual no están incluidos los puntos que
definen el intervalo (Punto de Inicio y Fin), denotados como (a, b).
3. Semi-Abierto o Semi-Cerrado: define un período de tiempo el cual incluye uno de
los puntos que define el intervalo pero no ambos. Dependiendo cual es el que es
incluido, son denotados de la siguiente forma (a, b](si está incluido el punto de
Fin) o [a, b) (si está incluido el punto de Inicio).
Definición 11 Sean I
1
, I
2
dos intervalos, su intersección es definida como: I
1

I
2
= [x, y] donde x, y ∈ I
1
y x, y ∈ I
2
, tal que, no hay w, z ∈ I
1
y w, z ∈ I
2
con
w < x o y < z.
Definición 12 Sean S
1
, S
2
dos conjuntos de intervalos, su intersección, denotada S
1
 S
2
, se define como S
1
 S
2
= {I : I = I
1
 I
2

= [ ]; ∀I
1
∈ S
1
; I
2
∈ S
2
}.
Podemos ahora completar la definición del TAF.
Definición 13 [Framework de Argumentación con Tiempo - TAF] es
una 3-tupla TAF = (AR,ATTACKS,Av) donde AR es un conjunto de argumentos, ATTACKS es una relación binaria de ataque y Av es una función
definida como Av : AR −→ I(AR) que determina los intervalos de tiempo en el
cual los argumentos se encuentran activos.
En la Definición 13, la función Av define un conjunto de intervalos de tiempo
para los cual un argumento se encuentra activo, a continuación se establece cómo
se definirá cuáles son los tipos de intervalos de tiempo que es posible obtener y
qué operaciones sobre los mismos son necesarias.
AF = (AR,ATTACKS,Av)
AR = {A,B,C,D,E, F,G}
ATTACKS =
{(B,A), (C,B), (E,A),
(G,E), (F,G), (G,D)}
Av = {A− [10, 50][80, 120]
B − [55, 75]
C − [40, 65]
D − [10, 30]
E − [20, 90]
F − [5, 30]
G− [10, 40]}
Figura 2: Argumentación Temporal
Ahora supongamos que se efectúa una consulta en la que se pregunte por
el argumento A para determinar la aceptabilidad del mismo, en un intervalo
[100, 120]. Analizando únicamente la relación ATTACKS podríamos decir que
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 57
el argumento A no se encuentra aceptado, ya que F derrota a G, por lo tanto E
se encuentra vivo y es quien derrota A. Ahora analizaremos el mismo ejemplo
pero añadiendo al análisis el nuevo componente Av que son los intervalos de
tiempo en los cuales los argumentos están activos.
Figura 3: Representación de los argumentos en una línea de tiempo
La Figura 3 muestra que en el intervalo [100, 120], el argumento A se encuentra activo y es aceptado en dicho intervalo. El ataque de E está activo en
[20, 90], y A en [10, 50] y [80, 120]. Los intervalos para los cuales el argumento
A está activo pero no es aceptado son los intervalos de tiempo [20, 30] y [80, 90]
por los ataques del argumento E hacia A.
6. Tiempo con -DeLP
En base a lo presentado en los apartados anteriores, a través de -DeLP es
posible manejar meta-información que puede estar asociada tanto a las claúsulas
que componen un argumento como al mismo argumento. Para la aplicación de
-DeLP es necesario definir 2 componentes: (1) el dominio de las etiquetas y (2)
la función ALS (Argument Label Sythesis).
Definición 14 Las claúsulas del programa tendrán asociado un conjunto de intervalos de tiempo. Los mismos se corresponderán a la Definición 10. Por otro
lado, restringiremos a que los componentes de un intervalo de tiempo X, Y ,
deberán ser con X,Y ≥ 0 y X,Y 
= ∞ .
Definición 15 la función ALS será definida como ALS([b
1
, b
2
, ..., b
n
], 
c
) =
INTER(b
1
, b
2
, ..., b
n
, 
c
). Donde INTER corresponde a la función de Intersección de la Definición 11 y Definición 12.
De acuerdo a las definiciones introducidas con anterioridad sobre Framework
de Argumentación con Tiempo y -DeLP la función Av puede definirse como:
Av(〈A, h〉) = 〈A, h〉. En otras palabras, la función Av quedará definida como la
intersección de los intervalos de tiempo asociados a las claúsulas que componen
un argumento (ya sea rebatible o estricta) determinando en qué intervalo de
tiempo dicho argumento es válido. Por ejemplo, en base al ejemplo presentado
en la Figura 2 podemos contar con el siguiente programa DeLP que permite
derivar los argumentos del conjunto ARGS = {A,B,C,D,E, F,G}.
Ejemplo 1 Se presenta un ejemplo de un programa -DeLP con Etiquetas de Tiempo:
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 58
P =
⎧
⎪
⎪
⎨
⎪
⎪
⎩
a —< s, c : [10, 60]; [80, 150] n —< c, l : [55, 100] ∼n ←− m, t : [40, 65] m : [0, 150]
s —< j, l : [10, 130] ∼s —< j, r : [0, 90] ∼f ←− j, p : [5, 30] t : [0, 150]
c —< j, k : [0, 120] r ←− l, p : [20, 130] r ←− p, t : [10, 30] p : [0, 150]
k —< m, l : [10, 50]; [70, 140] ∼r ←− j, f : [10, 60] j : [0, 150] c : [0, 150]
∼k —< j, n : [30, 75] f ←− p,m : [0, 40] l : [0, 150]
⎫
⎪
⎪
⎬
⎪
⎪
⎭
A partir de este programa en -DeLP, es posible obtener el siguiente framework de argumentación, donde estudiaremos el argumento A, por lo que se detallará la estructura de A a través de su árbol de derivación:
Figura 4: Árbol de Derivación - Framework de Argumentación
Una vez definido el árbol de derivación del argumento A, procederemos con la
aplicación de la función ALS([b
1
, b
2
, ..., b
n
], 
c
) = INTER(b
1
, b
2
, ..., b
n
, 
c
).
1. 
k
= ALS([
m
, 
l
],  k —< m, l) = INTER(m, l,  k —< m, l) =
INTER([0, 150], [0, 150], {[10, 50]; [70, 140]}) = {[10, 50]; [70, 140]}
2. 
c
= ALS([
j
, 
k
],  c —< j, k) = INTER(j , k,  c —< j, k) =
INTER([0, 150], {[10, 50]; [70, 140]}, [0, 120]) = {[10, 50]; [70, 120]}
3. 
s
= ALS([
j
, 
l
],  s —< j, l) = INTER(j , l,  s —< j, l) =
INTER([0, 150], [0, 150], [10, 130]) = {[10, 130]}
4. 
a
= ALS([
s
, 
c
],  a —< s, c) = INTER(s, c,  a —< s, c) =
INTER([10, 130], {[10, 50]; [70, 120]}, {[10, 60]; [80, 150]}) = {[10, 50]; [80, 120]}
En base al programa en -DeLP presentando anteriormente y al árbol de
derivación para el argumentoA, luego de aplicar la función ALS sobre la derivación
de A, podemos concluir que A se encuentra activo en los intervalos de tiempo {[10, 50]; [80, 120]}. Efectuando los mismos pasos para los demás árboles de
derivación, podemos obtener el grafo con etiquetas de tiempo de la Figura 2
Ahora supongamos que se efectúa una consulta q en la que se pregunte si el
literal a es aceptado en un intervalo de tiempo [100 − 120]. En la Figura 3 se
puede ver que en el intervalo [100-120] el argumento A se encuentra activo y es
aceptado, ya que no existe ningún contra-argumento en el intervalo a analizar.
Consideremos ahora el intervalo [80 − 90], el argumento A se encuentra activo,
pero en el mismo intervalo también se encuentra activo el argumento E, y además
existen literales en contradicción, entre ellos (s,∼s).
En los árboles de derivación para los argumentos A y E se observa que existe
un conflicto en s y ∼s. Por ende, estos argumentos se encuentran en desacuerdo. En base al criterio de comparación que utiliza DeLP, como se observó en la
Definición 8, el argumento preferido es E debido a que {(s —< j, r); (r —< l, p),∼s} 
CACIC 2011 - XVII CONGRESO  ARGENTINO DE CIENCIAS DE LA COMPUTACIÓN 59
Figura 5: Árboles de Derivación del Argumento A y Argumento E
{(s —< j, l), s}. Luego, el literal a no es aceptado en el intervalo de tiempo definido
para la consulta.
7. Conclusión
En este trabajo se asociaron intervalos de tiempo a los argumentos, construyendo un framework de argumentación temporal. De esta manera, es posible
obtener una representación más adecuada de la realidad, debido a que en el
entorno las aceptaciones, pre-suposiciones y percepciones pueden variar en el
tiempo. A través de la extensión existente de DeLP denominada -DeLP, se
definieron etiquetas de intervalos de tiempo para los componentes de un programa, y a través de una función denominada ALS se determinaron los intervalos
de tiempo para los cual el argumento esta activo. De esta manera, al efectuar
una consulta se analiza bajo qué intervalo de tiempo se está efectuando la misma, se determina cuáles son los argumentos que están activos en el intervalo de
tiempo definido para la consulta, determinando los contra-argumentos activos
en el intervalo y finalmente la respuesta a la consulta.
