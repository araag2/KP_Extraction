Paralelización de los procesos de búsqueda y optimización en memoria secundaria para la estructura Spaghettis
﻿Searching by similarity in metric spaces allows to retrieve similar or alike object to a given
query. Some applications, require that the search process has to be done in real—time.

Thus, in the present work shows a parallel implementation of the similarity search by using the Spaghettis
data structure but it is enhanced for secondary memory. The parallel implementation is based on a coarse
grain approach by using MP1. The experimental results show good performances of the implementation in
terms not only on distance evaluation but also in terms on execution time, speed—up and efﬁciency.
Keywords: Databases, data structures and algorithms, similarity search, parallel processing, MP1.

Resumen La b1’1squeda por similaridad en espacios métricos permite recuperar obejstos similares o
parecidos a una consulta dada. Algunas aplicaciones, requieren que dicha b1’1squeda se realice en tiempo
real.

Por tanto, en el presente trabajo muestra una implementacion paralela del algoritmos de b1’1squeda por
similaridad utilizando la estructura de datos Spaghettis pero optimizada para memoria secundaria. La
implementacion paralela esta basada en una aproximacion de grano grueso utilizando MPI. Los resultados
experimentales muestran buenas prestaciones de la implementacion en términos no solo de evaluaciones de
distancia sino también en términos de tiempo de ejecucion, speed—up y eﬁciencia.

Keywords: Estructuras de datos y algoritmos, bases de datos, b1’1squeda por similaridad, paralelismo,
MP1.

Introduccién

Antecedentes

Con la rapida evolucion de las tecnologias de la informacion han surgido nuevos depositos

no estructurados de datos tales Como texto libre, imagen, sonido y video. Realizar busquedas
exactas sobre estos datos seria poco util. Por ejemplo, si se consultase por un elemento sobre
una base de datos de imagenes, la consulta solo podria encontrar su copia digital exacta en la
base de datos. El verdadero interés reside, por ejemplo, en consultar sobre una base de datos
de fotografias una imagen que contiene un rostro, donde no necesariamente existe una copia
exacta de la misma fotografia; identiﬁcacion de individuos a través de dispositivos biométricos,
donde el dato consulta (voz, retina, etc) podria verse afectado por factores externos; encontrar
una especie mas parecida a otra en una base de datos de cadenas de ADN, etc. Este tipo de
busqueda recibe el nombre de bzisqueda por similaridad y consiste en recuperar todos los objetos

* Parcialmente ﬁnanciado por proyecto Fondecyt 1060776, Conicyt y programa de investigacion PR—F1—002IC—06,

Universidad de Magallanes, Chile.

Congreso General

1754

XIII Congreso Argentino de Ciencias de la Computacién

rnas relevantes 0 parecidos a una consulta dada.

Para manipular dichos datos, se deben generar estructuras que perrnitan almacenarlos y
realizar busquedas s0bre ell0s. Estructurar este tipo de datos es diﬁcultoso ya sea manual 0
cornputacionalrnente y restringe de anternano l0s tipos de busqueda p0sibles.

En la actualidad, la mayoria de las estructuras han sido diseﬁadas corno pr0t0tip0s y carecen de
dos caracteristicas irnportantes, dinamismo y un adecuado desernpeﬁo en memoria secundaria.
La segunda, que es la rnas escasa, deterrnina el desernpeﬁo en térrninos de accesos a disco y
espacio utilizado por la estructura. Finalrnente, la necesidad de procesar grandes Volumenes
de datos obligan a aurnentar la capacidad de procesarniento y con ell0 la paralelizacién de
algoritrnos y distribucién de la base de datos.

1 .2. Marco Teérico

La similaridad, en muchos casos, es modelada a través de un espacio métrico y la busqueda
de objetos rnas similares bajo una funcién conveniente de similaridad, a través de una busqueda
por range 0 vecinos rnas cercanos.

Deﬁnicién 1 (Espacios Métricas): Un espacio rnétrico es un conjunto X con una funcién
de distancia d : X2 —> R, tal que Vmyy, 2 E X,

1. d(.1‘,y) Z O and d(.T, y) = O 331' .1’ = y. (positividad)

2. d(x,y) = d(y,aL*). (Simetria)

3. d(x,y) -I- d(g/,2) Z (d($,z). (Desigualdad Triangular)

Deﬁnicién 2 (Consulta por Rango): Sea un espacio rnétrico (X,d), un conjunto de datos
ﬁnito Y Q X, una consulta .1‘ E X, y un rango 7" E R. La consulta de rango alrededor de x
con range 7“ es el conjunto de puntos y E Y, tal que d($,y) § 7".

El objetivo de los algoritrnos de busqueda es rninirnizar la cantidad de evaluaciones de
distancia realizadas al resolver la consulta. L0s rnétodos para buscar en espacios rnétricos
se basan principalrnente en dividir el espacio empleando la distancia a uno 0 rnas objetos
seleccionados.

Existen dos rnétodos para las construccién de estructuras rnétricas, l0s basados en Clustering

y los basados en Pivotes. El primero divide el area en particiones de V0r0n0i, donde existe un
centro p0r cada area y los dernas objetos se almacenan en el centro rnas cercano.
En el caso de los Algoritmos Basados en Pivotes, un pivote es un 0bjet0 preseleccionado y que
no necesariarnente pertenece a la base de datos. Su objetivo es ﬁltrar objetos en una consulta
a través de la utilizacién de la desigualdad triangular, sin medir realrnente la distancia entre el
0bjet0 consulta y los objetos descartados.

Una Visién abstracta de los algoritrnos basados en pivotes es la siguiente:

I Se selecciona un conjunto de k pivotes {p1,p2, . . . ,pk} E X. En tiernpo de indexarniento,
para cada 0bjet0 .1’ de la base de datos Y se calcula y almacena su distancia a 10s is pivotes
(d(.I‘,p1),. . . 

I Dada una consulta (q, 7"), p0r desigualdad triangular se tiene que d(p,,, 1’) § d(p,,, q) —I—d(q, $),
con 1’ E X, de la misma forma se tiene que d(p¢, Q) S d(P¢, $) —I—d(q,  De estas inecuaciones
se tiene que una cota inferior para la distancia entre q y .1’ es d(q, $) 2 |d(Pi, 1‘) — d(p,,q, 
Como l0s objetos .1‘ que intersectan son aquellos en donde d(q,x) § 7", entonces se pueden
excluir todos los objetos que no cumplan con la condicién de la ecuacién 

Congreso General 1755

XIII Congreso Argentino de Ciencias de la Computacién

|d(q,:m) - d(«r,p¢)| S KW =  (1)

En 0tras palabras, si para alg1’1n pivote pi se cumple que |d(q,p,,) — d(.r,p,,)| > 7”, entonces
p0r desigualdad triangular se conoce que d(q,$) > 7" y por lo tant0, no es necesario evaluar
explicitamente d(.r, q). Todos los objetos que no se puedan descartar p0r esta regla deben ser
comparados directamente con la consulta.

Existen distintas estructuras para buscar en espacios métricos, las cuales pueden ocupar
funciones discretas 0 continuas de distancia. Algunos son BKTree [3], MetricTree [10], GNAT
[2], VpTree [13], FQTree [1], MTree [5], SAT [8,9], EGNAT [11].

El presente articulo desarr0lla una paralelizacién de los algoritmos de b1'1squeda permitiendo
una una mayor eﬁciencia dada una consulta p0r rango. La estructura fue acondicionada para un
buen desempeﬁo en mem0ria secundaria en términos de accesos a disco. Para la implementacién
paralela se utilizé la libreria llamada MPI (Message—Passing Interface), la cual pr0p0rci0na
independencia de la arquitectura y ha dem0strad0 eﬁciencia en aplicaciones tales Como teXt0 y
otros.

2. Spaghettis en Memoria Secundaria

La estructura spaghettis [4] es una Variante de LAESA  La Estructura aqui presentada
Varia de su algoritmo original ya que esta optimizada para mem0ria secundaria [12]. Es una
estructura del tip0 arreglo y su algoritmo esta basado en pivotes.

2.1. Construccién de Multiples Spaghettis

I Se selecciona un conjunto de /<2 pivotes.

I Se calcula la distancia de cada 0bjet0 a todos los pivotes y se insertan en forma ordenada
en los n0d0s, este orden se hace en base a la distancia del 0bjet0 con el primer pivote. Cada
n0d0 corrrespondera a una pagina de disco.

I Al m0ment0 de tener la cantidad maxima de n0d0s s0p0rtad0s en RAM y est0s estén
t0talmente llen0s se procede a su almacenamiento en mem0ria secundaria, p0steri0rmente
se c0ntin1'1a con la construccién de un nuevo spaghettis.

I Al m0ment0 de ir guardando l0s n0d0s, un0 a uno, se utiliza una estructura que almacena
la ubicacién del primer n0d0 del conjunto almacenado, de forma de poder determinar donde
se encuentra ubicado dentro del indice el subconjunto de n0d0s formados.

En resumen, la diferencia entre la Versién original de la estructura y ésta, es que se tienen
N spaghettis 0 subspaghettis, con capacidad para max n0d0s, que corresponden al n1'1mer0 de
n0d0s que s0p0rta la RAM.

2.2. Bﬁsqueda

I Se determina la distancia entre la consulta q y cada pivote pk, 0bteniend0 asi un intervalo
p0r cada pivote de la forma:

Id(q,:0k) ’ 7”» d(q,pk) + 7”] (2)

I Se Carga en RAM n0d0 a n0d0 hasta encontrar, un Valor de distancia al primer pivote, que
satisfaga el intervalo (2) para éste pivote.

I Un 0bjet0 candidate a la consulta es aquel que se encuentra en la interseccién de 10s It
interVal0s formados.

Congreso General 1756

XIII Congreso Argentino de Ciencias de la Computacién

I Para cada objeto candidate obtenido, se calcula la distancia entre él y la consulta q. Si la
distancia obtenida esta dentro del range 7”, entonces el objeto es respuesta a la consulta
realizada. Es decir, se cumple que d(.r, q) § 7”.

I L0 anterior se realiza para cada subspaghettis.

2 4 2 11 3
4 11 3 3 5
4 1 6 3 6
8 14 8 11 2
44 P ' S h '
PIVOTE 1 PIVOTE 2 PIVOTE 3 PIVOTE 4 BASE DE DATOS mner Pag ems
8 1 2 3 4
0 1 o 7 0 4 Objeto 1 8 4 7 4 7
5 1 9 8 11 13 1
9 5 7 9 8
Objeto 3 88
Objeto 4 3 12 5 12 13
3 9 7 11 15
Objeto 5
5 12 6 10 14
objem 5 6 11 10 9 9
132 ,
Ob]-em 7 Segundo Spaghems
6 2 2 12 12
0"J'°‘° 8 9 9 1 6 11
Objew 9 11 6 11 9 16
12 2 10 3 10
Objeto 10 176
Objeto 11 4 5 1 7 22
Ob_ 12 7 7 4 8 17
’°‘° 7 6 8 8 18
10 14 7 9 11 6 19
" 220 .
14 5 01,]-em 14 Tercer Spaghettis
9 4 9 4 23
13 8 1o 13 12 7 20
12 10 15 10 Objeto16 12 13 12 9 21
16 13 16 14 Objeto 17 264
(a) Versién Original (b) Versién Multispaghettis

Figura 1. Representacién de dos versiones de spaghettis una vez ﬁnalizado el proceso de construccién y mostrando los
intervalos obtenidos para distintas bfisquedas.

Para notar la diferencia entre ambas estructuras (Ver ﬁgura 1), cabe mencionar que en la
estructura original las columnas de distancias estan ordenados segfin la distancia a cada pivote,
en la nueva Versién sélo estan ordenados segfin el primer pivote y por subspaghetti.

En la ﬁgura 1(a) se representa la forma original de la estructura spaghettis (solo para RAM).
Esta esta construida usando 4 pivotes para indexar una base de datos de 17 objetos. Sobre esta
estructura se realiza la bflsqueda Como sigue. Suponga una consulta q con distancia a 10s
pivotes {8,7,4,6} y range de bflsqueda r:2 . En la ﬁgura 1(a) se rnuestran mas oscurecidos 10s
intervalos {(6,10),(5,9),(2,4),(4,8)} sobre los cuales se realizara la bflsqueda. En la misma ﬁgura
se aprecian con distintos achurados todos los objetos que pertenecen a la interseccién de todos
los intervalos. Dichos objetos son posibles candidates a ser solucién.

La opcién implernentada en este trabajo es la explicada anteriormente (multispaghettis). La
ﬁgura 1(b) representa esta estructura una Vez ﬁnalizada la construccién, es decir, luego del
ordenamiento de los objetos en base al primer pivote (en el ejernplo, usando 23 objetos). En
esta irnplernentacién cada ﬁla representa a un objeto y cada columna de cada objeto corresponde

Congreso General 1757

XIII Congreso Argentino de Ciencias de la Computacién

a la distancia al pivote. La ultirna columna representa el identiﬁcador del objeto. En el ejemplo
se asume que una pagina de disco mide 44 bytes y que la RAM solo tiene capacidad para dos
nodos, por ello se tienen 3 spaghettis. En la ﬁgura 1(b), se rnuestra tarnbién un ejemplo de
b1'1squeda para una consulta q con d(q,p,,) = {6, 8, 3, 7} y 7" = 3. Se rnuestran oscurecidas todas
las celdas de todos los pivotes que estan dentro del intervalo. Sin embargo, en términos reales
se descarta inicialrnente en base al primer pivote.

3. Implementacién Paralela de los Procesos de Bﬂsqueda de la
Estructura Spaghettis

El objetivo principal para el presente trabajo, es reducir los tiempos de ejecucién y
evaluaciones de distancia que se realizan durante la b1'1squeda, asi corno obtener para que
pivote o pivotes la b1'1squeda se cornporta rnas eﬁciente. Esto, dado la necesidad de respuestas
rapidas en diferentes aplicaciones de tipo real, corno por ejemplo, durante la identiﬁcacion de
individuos rnediante dispositivos biornétricos.

Se considera que el sistema trabaja bajo regimen estacionario, por lo que la fase de
construcciﬁon no ha sido considerada en este trabajo para ser paralelizado. Los resultados
experirnentales rnostrados en el articulo corresponden a una estructura construida sobre un
cornputador maestro (o broker) y replicada a todos los procesadores. Las consultas fueron
distribuidas en porcentajes similares sobre el cl1’1ster de PCs, procesadas localmente y las
respuestas recuperadas fueron recopiladas por el maestro.

Para los experirnentos se utilizo un espacio de palabras en espaﬁol de 86.061 objetos, de
donde el 90 % se utilizo para construir la estructura y el restante 10 % corresponde al conjunto
de consultas que se distribuyen en el cluster.

Para medir la distancia en un espacio de palabras, se utilizo la distancia de edicién o
distancia de Levenshtem. La distancia de edicion se deﬁne como la cantidad de inserciones,
eliminaciones o modiﬁcaciones de caracteres que deben realizarse sobre una palabra para
convertirla en otra.

Las pruebas realizadas se efectuaron construyendo la estructura para 4, 8, 12, 16 y 20
pivotes. La seleccion de pivotes es aleatoria y son extraidos desde la base de datos. El tipo de
b1'1squedas fue para mngos 1, 2, 3 y 4.

Los experirnentos fueron ejecutados sobre un cl1’1ster cornpuesto por 9 procesadores (un
front—end y 8 procesadores para cornputo). Cada procesador esta compuesto por un Procesador
Intel PIV de 3.00 GHZ y 3GB de RAM. Este corre sobre el sisterna operativo Debian Linux. Para
realizar la paralelizacion se utilizo MP1 [6] (Interfaz de Paso de Mensajes) con una plataforrna
de memoria distribuida.

4. Resultados Experimentales
Los resultados obtenidos en esta irnplernentacion paralela seran evaluados en térrninos de:

I Tiempo de ejecucion: Es el tiempo que lleva solucionar el problema.

I Speed—up: Se deﬁne Como la proporcion de tiernpo que torna solucionar el problema sobre un
procesador y el tiempo requerido para solucionar el mismo problema sobre un cornputador
paralelo con p procesadores idénticos.

I Eﬁciencia: Es la medida de fraccion de tiernpo durante el cual un procesador es empleado
fitilrnente; es deﬁnido como la proporcion entre el Speed—up y el n1’1rnero de procesadores.

Congreso General 1758

XIII Congreso Argentino de Ciencias de la Computacién

En las ﬁguras 2, 3, 4 y 5 se presentan los graﬁcos de: Tiempos de Ejecucién, Speed—up,
Eﬁciencia y Evaluaciones de Distancia  respectivarnente. Los resultados corresponden a
la estructura spaghettis construida para 4, 8, 12, 16 y 20 pivotes y bflsquedas con range 1, 2,
3 y 4. Los resultados se presentan para el caso secuencial (1 procesador) y la irnplementacién
paralela (2, 4 y 8 procesadores).

Tiempos de Ejecucién para 11 = 86061 palabras , tango = 1 T iempos de Ejecucién para n = 86061 palabras ,ra.ngo = 2
450 I I 800 I I

  
   

  
   

400 pivotes 3 4 +,,+,, ' 700 p1V0[CSI4 4% —
3;, 32531225-1%  - I=-1v‘;t°s.=1§ 
’ “ pivotesilé I [X 600 5138.22 215 x *

pivotes :20 * Ar ' , pwmes :20 — A

     

Tiempo de Ejecucién (sag)
Tiempo de Ejecucién (seg)

»s.-_;._ ,_‘ N _
I V" ‘ ‘“ “ ‘* "+55
0 I I 0 I I
1 2 4 8 1 2 4 8
Nﬁmem de procesadores Nﬁmero de pmcesadores
(II) (b)
Tiempos de Ejecucién para n = 86061 palabras ,ra.ngo = 3 Tiempos de Ejecucién para 11 = 86061 palabras , tango = 4
1000 I I 1200 I I
pjvotes : 4 + E Plvmes E ‘g +
.> pwotes : 8 ..+.. 1000 . 1:_1votes_. 7 WE’ _
8009: ._ prvotes :12 ' -El -‘ * 1 P!V°155 ;1- X V
I\\. pwmes :16 , ,x I.\> pgvotes .16

pwmes :20 —A — plvotes :20 - A '

300 — 1;

400 
Tiempo de Ejecucién (sag)
Tiempo de Ejecucién (seg)
0‘

Q
o
I

200 ’

   

Nlimero de procesadores Nﬁmem de procesadores

(C) (d)

Figura 2. Graﬁcos de Tiempos de Ejecucién

5. Conclusiones

5.1. Aspectos Relevantes y Aportes

La mayor parte de las estructuras que se han desarrollado para bflsquedas p0r similaridad
estan diseﬁadas sélo Como prototipos para memoria principal. En este sentido, se considera que
el aporte mas relevante de éste articulo es la presentacién de una Versién paralelizada de la
bflsqueda sobre la estructura Spaghettis y optirnizada para memoria secundaria, lo que perrnite
contar con una estructura que puede ser preparada para aplicaciones reales.

De acuerdo con los resultados experirnentales los tiernpo de ejecucién y las evaluaciones
de distancia se han reducido notablernente para la estructura construida con cada n1'1rner0 de
pivotes y los rangos de bflsquedas utilizados para estos. En la utilizacién de 4 pivotes Versus 8
pivotes y la realizacién de bflsquedas para ranges 1 y 2 (Ver Figuras 2(a) y 2(b)) es donde mas
se acent1’1a esta disrninucién de tiernpo.

En general los costos de tiernpo de ejecucién se han reducido signiﬁcativarnente debido
al balance de consultas que existe, donde cada procesador tiene acceso al mismo n1’1rner0 de
estas. Por otra parte, la reduccién de evaluaciones de distancia, el proceso rnas costoso dentro
de la bflsqueda, inﬂuye en gran medida en la reduccién de estos tiernpos. En la Tabla 1 se

Congreso General 1759

XIII Congreso Argentino de Ciencias de la Computacién

   
 

        

   

  
 
     

   

    

Speed—up para range = 1 Speed—up para tango = 2
9 I I 9 I I
8 ’ pjvotesz 4 3 5 8 ’ pjvotesz 4 3 7'
p1Votes:8 “+“ prvotes “+“  ‘
7 — prvotesz 12 ' ‘E " 7 — pwotes: 12 "E" 
pivot 6 ' X pivotes: 16 X ' _ . - ‘
6 pivotesz 20 ’ 3 _ 6 _ pivotes: 20 ’ 3   _
Q 5 - Q‘ 5 U) U:
4 ’ 4 ’
3 - 3 2 ’ 2 ’
1 I — 1 I —
0 I I 0 I I
1 2 4 8 1 2 4 8
Nﬁmero de ptocesadote Nﬁmero de procesadores
(El) (I0)
Speed—up para range = 3 Speed—up para tango = 4
9 I I 9 I I
8 ’ pivotesz 4 3 3 8 ’ pivotesz 4 3 3
pivotesz 8 "+" pivotes 4’
7 — prvotesz 12 ' ‘E " 7 — pwotes: 12 ' ‘EI"
ivot 6 ' X pivotes: 16 X '
6 pivotesz 20 ’ 3 _ 6 pivotes: 20 ’ 3 _
Q 5 - Q‘ 5 U) U:
4 ’ 4 ’
3 - 3 2 ’ 2 ’
1 I — 1 I —
0 I I 0 I I
1 2 4 8 1 2 4 8
Nﬁmero de ptocesadote Nﬁmero de procesadores
(C) (d)
Figura 3. Graﬁcos de Speed—up
Eﬁciencia para rango = 1 Eﬂciencia para range = 2
1.04 I 1.04 I I
pjvotes :4 f pjvotes 2481 f
1Votes ' ' ' ' rvotes : ' ' ' '
1.02 ’ pfvotesz 12 ' ‘E " ’ 1.02 ’ p?votes: 12 ' ‘I3 " ’

prvotesz 16 X ' pjvotes: 16 X
prvotes : 20 ’ 3 plvotes : 20 ’ 3

     

lip

0.94 ‘ ' 0.94 ' '
1 2 4 8 1 2 4 8
Nﬁmero de procesadores Nﬁmeto de procesadores
(2!) (I0)
Eﬁciencia para rango = 3 Eﬂciencia para range = 4
1.04 I I 1.04 I I
pivotes :4 3 pivotes :4 3
pivotes : 8 4' pivotes : 8 ‘V
1.02 ’ prvotes : 12 ’ *5 ’ ’ 1.02 ’ pgvotes : 12 ’ 43 ’ ’
prvotesz 16 X ' plvotesz 16 X’
pivotes : 20 — 3 ' pivotes : 20 — 3 '

 

0.94 ‘ ' I 0.94 ' '
1 2 4 3 1 2 4 8

Nﬁmero de procesadores Nﬁmeto de procesadores

(C) (d)

Figura 4. Gréﬁcos de Eﬁciencia

Congreso General 1760

XIII Congreso Argentino de Ciencias de la Computacién

    
 
       

 
      

   

Evaluaciones de D1stancia (E.D.) para n = 86061 palabras ,ra.ngo = 1 Evaluaciones de D1stancia (E.D.) para r1 = 86061 palahras ,ra.ngo = 2
I I I I .
14000 pivotes 5 4 + a 40000 gggggg egg ..+° .. 7
1i{YO°t‘;S.'1g LEI,‘ 35000 pivotes :-12 * *5 * _
12000 P- :16 , X , — p1VOIESI15 x— —
P!‘/mes ' A lvotes '20 * 3
plvotes :20 * 30000 _ P - _
10000 25000 * *
DC DC
In In 20000 — —
15000 * *
10000A \- 05‘ _ 5000 — ‘K :_—{§F§0'_:
0 I I
8 1 2 4 8
Nﬁmero de procesadores Nﬁmero de procesadores
(II) (b)
Evaluaciones de Distancia (E.D.) para n = 86061 palabras ,ra.ngo = 3 Evaluaciones de Distancia (E.D.) para r1 = 86061 palabras ,ra.ngo = 4
' I . _ 70000 I I 60000 PIVOWS f 4 +9 pivotes : 4 *}ﬁ$]oot[e?§S"12 LLEI: 60000 - Hmites  ' ' E1‘ ' ‘
, . - 2 - 1V0 es : - * * *
50000 pwotes 316 _ 3 '_ 0;. Bgms :15 x— —
 P1V°155 --0 SOOOOZQ‘ plvotes :20 - & ' 2
40000[ \ 
D. Z \ 0 D. 40000
gj 30000 gj
30000
20000
20000
10000 10000
0 I I 0 I I
1 2 4 8 1 2 4 8
Nﬁmero de procesadores Nﬁmero de procesadores
(C) (d)

Figura 5. Graﬁcos de Evaluaciones de Distancia 

presentan 10s porcentajes de disminucién de evaluaciones de distancia de acuerdo al n1'1mer0 de
procesadores utilizado.

|11u1n. procsH4 Piv0tes|8 Piv0tesl12 Piv0tes|16 Piv0tes|20 Pivotesl

2 50.6% 50.8% 50.8% 49.8% 49.3%
4 75.7% 74.8% 76.2% 75.9% 75.4%
8 87.2% 87.4% 87% 86.7% 86.6%

Cuadro 1. Promedios de disminucién de Evaluaciones de Distancia.

Conforrne aumenta el rango de bflsqueda 10s tiempos de ejecucién para todos los pivotes es
muy similar llegando incluso a ser Casi idénticos para las bflsquedas de rango 4 (Ver Figura 2).
Esto se debe a que para consultas de mayor rango son mas 10s objetos que se recuperaran, lo
que implica recorrer en mayor medida la estructura.

Por 1’1ltim0, teniendo en cuenta la Figura 4, se puede apreciar que la estructura construida
mediante 8 pivotes es quien mejor se comporta con respecto al algoritmo secuencial. Esto para
cada n1’1mer0 de procesadores y rangos de bflsquedas utilizados.

6. Trabajos Futuros

I Emplear heuristicas para la seleccién de pivotes. Entre estas, las propuestas de elegir objetos
mas alejados entre si y la seleccién de objetos espacialmente esparcidos.

I Probar el comportamiento de la estructura con 0tr0s tipos de espacios métricos.

I Implementar métodos de eliminacién y en general modiﬁcar la estructura para que sea
dinamica.

Congreso General 1761

XIII Congreso Argentino de Ciencias de la Computacién

I Implementar distintas alternativas de distribucion de la base de datos sobre la estructura
paralela.

7. Agradecimientos

Lo autores desean dar expresos agradecimientos a los grupos RETICS (Sistemas
Concurrentes y Tiempo Real) y SIMD (Sistemas Inteligentes y Mineria de Datos) del Instituto
de Investigacion Informcitica de Albacete (I3/1) de la Universidad de Castilla La Mancha, Espaﬁa
por las facilidades otorgadas en el uso de sus instalaciones.

