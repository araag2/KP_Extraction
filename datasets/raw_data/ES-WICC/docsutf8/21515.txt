Estrategias evolutivas para la detección de contornos en imágenes digitales
﻿Estrategias Evolutivas para la Detecci¶on de
Contornos en Im¶agenes Digitales
Rom¶an Katz y Claudio Delrieux
Universidad Nacional del Sur, Alem 1253, (8000) Bah¶³a Blanca, ARGENTINA.
Voice: (54)(291)4595101 ext. 3381 | Fax: (54)(291)4595154 | e-mail: claudio@acm.org
1 Introducci¶on
La extracci¶on de contornos en im¶agenes digitales es una operaci¶on de gran inter¶es en los
procesos de segmentaci¶on e identi¯caci¶on de patrones, tanto para tareas de reconocimiento
e interpretaci¶on, como tambi¶en de clasi¯caci¶on de objetos [4]. El operador gradiente es una
herramienta ampliamente utilizada a tal efecto, detectando las variaciones en los niveles de
intensidad que pudieran corresponder a los contornos de inter¶es. Aunque esta metodolog¶³a
brinda resultados aceptables para casos t¶³picos, existe gran variedad de situaciones en las que
se requiere un esfuerzo computacional adicional que permita ampliar su rango de aplicaci¶on.
Tal es el caso de la extracci¶on de contornos en im¶agenes ruidosas o con objetos con niveles
de intensidad no uniforme, en los cuales se realiza t¶³picamente una detecci¶on de bordes
utilizando el operador gradiente, seguida por alg¶un esquema de procesamiento global. Una
de las t¶ecnicas que actualmente se est¶a investigando se denomina contornos activos [5, 8],
y consiste en utilizar curvas inicializadas por el usuario, las cuales se mueven dentro de
la imagen hasta encontrar el contorno buscado. Para ello se utilizan mecansimos diversos,
como B-Splines [1], °ujo del vector gradiente, etc. En general, los contornos activos poseen
limitaciones respecto de las concavidades de las fronteras a segmentar [9].
En este trabajo presentamos un resumen del sistema y de los resultados obtenidos en
la detecci¶on de bordes utilizando el uso combinado del operador gradiente con estrategias
evolutivas [6, 7]. La utilizaci¶on de algoritmos evolutivos [2] nos provee una herramienta de
resoluci¶on capaz de encontrar soluciones pr¶oximas a la ¶optima a este problema de formulaci¶on
matem¶atica no trivial y de gran complejidad computacional.
2 Extracci¶on de Contornos
En general las t¶ecnicas utilizadas caracterizan a los contornos de un objeto mediante la detecci¶on de sus bordes en funci¶on de discontinuidades importantes entre los niveles de intensidad
de pixels vecinos [4]. Es adecuada en este sentido la utilizaci¶on del operador gradiente para
encontrar los cambios bruscos de intensidad I(x; y) de los objetos que conforman la imagen
[3]. El mismo est¶a descripto matem¶aticamente por la de¯nici¶on siguiente:
rI(x; y) =
∙ Gx
Gy
¸
=
" @I(x;y)
@x
@I(x;y)
@y
#
(1)
En muchas ocasiones resulta conveniente discriminar el gradiente escalar r =
q
G2x + G
2
y
que abstrae la direcci¶on del gradiente propiamente dicho. De ahora en adelante, cada menci¶on
al gradiente r se re¯ere al gradiente escalar, salvo aclaraci¶on espec¶³¯ca. Los operadores Gx
y Gy representan una implementaci¶on gen¶erica de las derivadas direccionales en la imagen
digital, pudi¶endose implementar por medio de las \m¶ascaras" de Roberts, Prewitt, o Sobel.
(a) (b) (c)
(d) (e) (f)
Figura 1: Im¶agenes de entrada en (a), (b) y (c) y sus correspondientes gr¶a¯cos de r en (d),
(e) y (f) respectivamente.
En este trabajo adoptamos esta ¶ultima posibilidad porque experimentalmente es la que
brinda mejores resultados.
En la Fig. 1(d) se muestra la magnitud del gradiente r correspondiente a la imagen de
la Fig. 1(a). En esta imagen el objeto principal posee un nivel de intensidad uniforme y
se encuentra libre de ruido. Es por esto que el contorno del objeto se presenta altamente
distinguible. Sin embargo, la presencia de ruido en las im¶agenes digitales es inevitable, tanto
por los diferentes procesos intervinientes en su adquisici¶on como por los errores num¶ericos
y de cuantizaci¶on que ocurren en el almacenamiento y procesamiento digital. Cuando las
im¶agenes contienen ruido (como ocurre por ejemplo en la Fig. 1(b)) la magnitud r contin¶ua
rescatando el contorno (Fig. 1(e)), aunque se percibe su notable degradaci¶on como consecuencia de la \ampli¯caci¶on" de las pequeeñas perturbaciones locales debidas al ruido. Si
adem¶as consideramos que los objetos que componen la imagen pueden presentar niveles de
intensidad variados (Fig. 1(c)), la percepci¶on n¶³tida del contorno mediante r se di¯culta
notablemente (Fig. 1(f)), siendo esta una situaci¶on recurrente en la pr¶actica.
La segmentaci¶on de contornos por medio de t¶ecnicas de procesamiento local del operador
gradiente se ve notablemente restringida, dado que al ampli¯car pequeeñas diferencias locales
en las im¶agenes con ruido, se tiende a encontrar soluciones alejadas de la ¶optima. Si una
medida de lo adecuado de un contorno es la diferencia acumulada entre las intensidades
de sus pixels sucesivos, entonces este operador minimiza localmente esta diferencia, pero
queda \estancado" en m¶³nimos locales, mientras que el m¶³nimo global ser¶³a el contorno que
ajusta perfectamente el l¶³mite de los objetos que componen la imagen. Luego las estrategias
t¶³picas empleadas bajo estas condiciones di¯cultosas suelen combinar detecci¶on de bordes y
esquemas de procesamiento global tendientes a evitar los m¶³nimos locales. Tal es el caso de
los m¶etodos compuestos de extracci¶on de contornos mediante la detecci¶on de bordes junto
con la transformada de Hough, la b¶usqueda en grafos [3] o la programaci¶on din¶amica [4].
3 Algoritmos Evolutivos
Un algoritmo evolutivo [2] mantiene una poblaci¶on de soluciones posibles del problema y
permite que las mismas progresen a trav¶es de la transformaci¶on de la poblaci¶on en las sucesivas generaciones. Operaciones de mutaci¶on y cruzamiento son las encargadas de producir la
siguiente poblaci¶on a partir de la actual. El cruzamiento combina dos o m¶as soluciones para
generar una (o m¶as) nuevas soluciones, mientras que la mutaci¶on obtiene una nueva soluci¶on
perturbando una soluci¶on previa. En cada una de las generaciones se eval¶ua una funci¶on de
¯tness o costo para todas las soluciones, cuanti¯cando la cercan¶³a de los resultados al valor
¶optimo y efectuando una selecci¶on de las mejores para conformar la siguiente poblaci¶on. Este
proceso se repite iterativamente a partir de una poblaci¶on inicial, ya sea un cierto n¶umero de
generaciones o bien hasta alcanzar alg¶un criterio conveniente de detenci¶on. La exploraci¶on
uniforme del espacio de soluciones y el no estancamiento en m¶³nimos locales inducen a una
mejora gradual de los resultados con la progresiva evoluci¶on de las poblaciones. Finalmente
la mejor soluci¶on de la poblaci¶on resultante, o la mejor soluci¶on de todo el proceso se elige
como la soluci¶on encontrada.
3.1 Algoritmos Evolutivos en la Extracci¶on de Contornos
Luego de lo mostrado en la Secci¶on 2 resulta natural conjugar la detecci¶on de bordes mediante
el operador gradiente, con la aplicaci¶on de algoritmos evolutivos para alcanzar una soluci¶on
del contorno pr¶oxima a la ¶optima global. Es ¶esta en de¯nitiva la metodolog¶³a utilizada:
a partir de una poblaci¶on inicial de soluciones posibles del contorno, el sistema evoluciona
mediante operaciones de mutaci¶on y cruzamiento, que inducen soluciones del contorno paulatinamente mejores. La selecci¶on se realiza evaluando el ¯tness de las soluciones mediante
el operador r.
Poblaci¶on Inicial. Sin dudas el contorno ¶optimo buscado estar¶a ubicado en el l¶³mite externo del objeto de inter¶es. Luego es posible generar una poblaci¶on inicial de soluciones
adecuada para disparar nuestro algoritmo evolutivo que incluya este l¶³mite. En nuestro caso
esto se efect¶ua posicionando manualmente dos c¶³rculos conc¶entricos, aunque ser¶³a posible
determinar autom¶aticamente estos radios en muchas situaciones. Posteriormente se generan
aleatoriamente en la zona comprendida entre ambos radios una cantidad N de contornos
conformada por igual cantidad M de puntos, espaciados en ¶angulos uniformes a lo largo del
anillo y en posiciones aleatorias de forma radial. Es posible en este punto con¯gurar tanto
la cantidad de contornos a generar como la cantidad y el espaciamiento de los puntos que
determinan cada uno de ellos.
Mutaci¶on y Cruzamiento. La operaci¶on de mutaci¶on implementada realiza, para cada uno
de los contornos generados, la selecci¶on aleatoria de uno de sus puntos. Luego modi¯ca su
posici¶on, con mayor incidencia sobre componente radial para una misma ubicaci¶on angular.
De esa manera se obtiene un contorno modi¯cado a partir del original. La operaci¶on de
cruzamiento (crossover) se efect¶ua tomando los contornos de a pares. Luego se elige una
posici¶on aleatoria y se intercambian los puntos de ambas curvas desde dicho punto hasta el
¯nal del contorno, obteniendo dos nuevas curvas.
Fitness y Selecci¶on. La evaluaci¶on del ¯tness de un contorno debe cuanti¯car cu¶anto
aproxima el mismo al supuesto valor ¶optimo. Nuestro objetivo es detectar la poligonal de
\costo m¶³nimo", es decir, que minimice el costo local acumulado a lo largo de la misma.
El costo local en cada uno de los puntos disminuye cuando se encuentra en una zona de
la imagen donde localmente el gradiente es alto. Por dicha raz¶on, utilizamos la funci¶on de
costo local k(x; y) = 9¡P1i=¡1
P1
j=¡1r(x + 1; y + j) en un pixel (x; y).
De esa manera, el costo local en un punto cji del contorno Ci puede expresarse como
k(cji ). El uso de m¶ascaras de mayor tamaaño implicar¶³an un horizonte de mayor precisi¶on,
pero tambi¶en un costo computacional mayor. Para evaluar el ¯tness f(Ci) del contorno
i-¶esimo simplemente es necesario acumular el costo local de cada uno de los M puntos que
lo conforman f(Ci) =
PM
j=1 k(c
j
i ).
Figura 2: Imagen de evaluaci¶on con ruido Gaussiano y el contorno detectado.
En este trabajo, utilizamos como estrategia de selecci¶on la eliminaci¶on de los contornos
generados cuyo costo superaba un cierto umbral porcentual en el rango entre el m¶³nimo y el
m¶aximo de cada generaci¶on. Los rangos empleados exitosamente fueron elevados, manteniendo un nivel de supervivencia alto que nos permiti¶o conservar una poblaci¶on pr¶acticamente
constante, al tiempo que nos posibilit¶o descartar aquellas soluciones radicalmente alejadas
de la ¶optima.
4 Resultados Experimentales y Conclusiones
Para evaluar el desempeeño del sistema de extracci¶on de contornos mediante algoritmos evolutivos se generaron im¶agenes ruidosas sumando ruido gausiano de media 0 y distintos desv¶³os
est¶andar sobre diferentes im¶agenes de prueba. La Fig. 2 muestra una de entrada con ruido gausiano de desv¶³o est¶andar ¾=50, y el correspondiente contorno ¯nal encontrado. La
poblaci¶on de contornos utilizada en este ejemplo fue de 3000 y el n¶umero de iteraciones de
100000, siendo la convergencia razonablemente r¶apida.
En la Fig 3 se muestra un ejemplo de mayor di¯cultad, dado que se trata de un recorte de
una imagen SAR, en la cual el ruido presente no es aditivo [1]. En esta imagen se eligi¶o una
de las zonas para inicializar la poblaci¶on inicial de 3500 contornos, los cuales luego de 500000
iteraciones alcanzaron la soluci¶on ¯nal mostrada. Para alcanzar una detecci¶on de contorno
correcta en objetos de mayor tamaaño se requiri¶o en general un n¶umero de contornos m¶as
elevado como tambi¶en una mayor cantidad de iteraciones.
Los resultados alcanzados fueron en todos los casos altamente satisfactorios, detectando contornos muy aproximados a los ¶optimos, en condiciones diversas de ruido, tamaaño y
complejidad en los objetos. Para la detecci¶on en objetos de mayor tamaaño o complejidad,
el n¶umero de contornos debi¶o elevarse, como tambi¶en la cantidad de iteraciones requeridas
para alcanzar buenos resultados. Es de destacar que los mejores resultados en todas las
experiencias realizadas se obtuvieron con probabilidades de mutaci¶on baja (menores a 10%),
y que las soluciones ¯nales obtenidas y mostradas corresponden, en todos los casos, a la
mejor de todas las soluciones encontradas para cada una de las generaciones.
La estrategia propuesta facilita la posible utilizaci¶on y evaluaci¶on de otras alternativas en
los operadores de mutaci¶on y cruzamiento, como tambi¶en la posibilidad de adaptar diferentes
esquemas para efectuar el computo del ¯tness (otros operadores frecuenciales, transformaFigura 3: Imagen de evaluaci¶on con ruido no aditivo y el contorno detectado (imagen cortes¶³a
de J. Gambini).
das, etc.), manteniendo sin cambios el resto del algoritmo. La naturaleza \adaptativa" del
sistema evolutivo permite, adem¶as, la potencial extensi¶on del sistema ampliando su campo
de aplicaci¶on para soportar condiciones din¶amicas de las im¶agenes de entrada.
