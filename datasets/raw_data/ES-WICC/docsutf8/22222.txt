Una aproximación probabilística a la planificación batch distribuida
﻿
Gustavo "-m'ka. l\1aría Teresa Taranilla y Carlos Kavka 
E-mail: [gkavka.tarani.ckavka}@unsl.edu.ar 
Departamento de Informática 
llnin'rsidad Nacional de San I.uis 
Ejército de los Andes 950 - 5700 - San Luis 
Los sistemas de ejecución batch se utilizan para permitir la ejecución de procesos en redes 
de estaciones de trabajo. Permiten la utilización de estaciones de trabajo ociosas o con poca 
carga, logrando entonces un mejor aprovechamiento de los recursos. En general, no se 
provee una forma simple y adecuada para la definición de algoritmos de balance de carga 
que permitan una mejor selección de las estaciones de trabajo. En este trabajo, se presenta 
un mecanismo basado en redes bayesianas que cumple con este objetivo. 
1. Introducción 
La mayoría de las estaciones de trabajo Unix en uso hoy están conectadas en red y muchas 
tienen más de un procesador. El administrador del sistema puede, en cierto grado, controlar 
la forma en la que cada estación y cada procesador se utilizan. 
Una de los principales usos del procesamiento batch consiste en la planificación de 
procesos que serán ejecutados de noche, o utilizando estaciones de trabajo con poco o sin 
uso. De esta forma, se puede incrementar la cantidad de trabajo realizado por todo el grupo 
de estaciones y por cada una de ellas también. 
En general, en cada grupo de estaciones de trabajo existe un servidor que realiza la 
planificación de procesos determinando que estación de trabajo resulta más adecuada para 
la ejecución de determinados procesos. En muchos sistemas, los procesos son planificados 
en forma muy simple, por ejemplo en.forma FIFO, sin tener en cuenta la oferta corriente de 
procesadores ni la clase de procesos que deben ser ejecutados. 
Sistemas como NQS (Network Queuing System) proveen planificación dinámica, 
reordenando las colas de procesos para ejecuccón y reeligiendo los destinos de acuerdo a la 
carga de las distintas estaciones de trabajo. Si bien NQS representa una alternativa válida 
que permite claramente mejorar la efectividad del proceso de planificación, tiene en cuenta 
sólo la carga de los sistemas. De esta forma, cada proceso es enviado a la estación de 
trabajo menos cargada. 
Un ejemplo que muestra que esta aproximación no es siempre adecuada es el siguiente: Un 
proceso que requiere una cantidad muy grande de memoria es enviado a la estación de 
trabajo menos cargada independientemente de la cantidad de memoria disponible. Si la 
cantidad de memoria disponible es insuficiente, el uso de memoria virtual producirá una 
:--,lnrr',:;¡ .. ;" ;;,l:, "':""1", ,,,jii\.. \..'; :-.i:-.\-:Illd lk Jisc\l:-' hdci-:ndll ql!;,: j,! ",i\"l'll\..·illll dL' \(ldus l(ls 
procesos en esa estación de trahajo Si: degrade. logrando además un muy hajo porcentaje de 
uso dCCliHl del procesador, 
El planificador d-: 0:QS puede. sin cmhargo. ser modilicaJ() lal como especifican los 
autores: "Becausc lile Gencric NOS sourcc eode is frcely availahlc. lile schcduling can he 
casil)' modi1il.!J lo n1l.!cl more spccilic ñeds". Sin embargo. un análisis dd código fuente de 
NQS muestra que el proceso dista de ser lo suficientemente sencillo para lograr un rápido 
desarrollo de nuevos algoritmos de planificación. . ",:._..-, 
Una mejora interesante consiste en lograr que, conociendo el tipo de procesos que se espera 
ejecutar durante algún tiempo, se permita la generación en forma simple de algoritmos de 
planificación adecuados con el objetivo de maximizar la cantidad de procesos ejecutados en 
el sistema, minimizando la cantidad de decisiones erróneas en la planificación. 
En este trabajo, se propone la utilización de redes bayesianas para la especificación de 
algoritmos de planificación. El administrador del sistema debe determinar las variables que 
interesa:,cpnsigerar::::::..plªº,llóIt" s;:.estable.cer", su:relaciéll:--ue..-:Sea:;"posible,:::!f;;:;: 
determinar en'" forma " dinánlicaÍa adecuación 'de las estaciones de trabajo a las distintas 
clases de tareas. Las variables pueden ser de carácter general (como por ejemplo la carga, 
su evolución en el tiempo, la memoria disponible, etc.) o particulares como la 
disponibilidad de algún tipo de hardware especial (número de procesadores, aceleradores, 
etc.). 
2. NQS (Networking Queueing System) 
NQS fue seleccionado para la implementación dado que es un sistema muy utilizado 
actualmente y su código fuente está disponible. NQS es un sistema de procesamiento batch 
que permite poner procesos en colas de espera para su ejecución. Un usuario común puede 
ejecutar, terminar, modificar y controlar trabajos en modo batch. 
NQS se instala en estaciones de trabajo conectadas en red. Permite la definición de colas de 
procesos, y para cada una de ellas, la especificación de restricciones, tales como cantidad 
máxima de tiempo de CPU que los procesos pueden usar, cantidad de memoria virtual, etc. 
Se indica también cuantos procesos de cada cola se pueden ejecutar en forma simultánea, 
cuantos procesos de un mismo usuario pueden estar en una cola al mismo tiempo y sus 
prioridades. Los usuarios del sistema insertan sus procesos en las colas más convenientes, 
teniendo en cuenta, por ejemplo el tiempo éjecución estimado, la cantidad de memoria 
requerida, etc. Los procesos en las colas son ejecutados y el usuario opcionalmente recibe 
un e-mail avisando que su proceso ha sido completado y cuales han sido los resultados. 
NQS provee distintos niveles de balance de carga en las colas. En la implementación más 
simple, no hay balance de carga: si una cola tiene varios destinos, todos los requerimientos 
son enviados a uno de los destinos, ignorando a los demás, hasta que el destino favorecido 
es deshabilitado. En un segundo nivel, los destinos son seleccionados siguiendo una 
política round-robin. En un tercer nivel, los requerimiento son rechazado por el destino a 
menos que puedan ser ejecutados inmediatamente. En caso de ser rechazado.por todos los 
lk':-lilh'., ..  ,; ProLL'SII L'' 1ll;11l1enidll en espem L'!) ia ll1alJuilw iúelHl' hasla que algul1{) de los 
destinos pueda ejecutarlo, 
En el nivel más avanzado se utiliza un plánificador (schcduler). El planificador se ejecuta 
en unu estación de trahajo seleccionada para distrihuir los procesos a un conjunto de colas 
que están en otras máquinas. Los procesos son enviados a las distintas colas en hase a la 
información disponible, la cual es provista por los demonios de carga (load daemons) de las 
máquinas destino. El planifica(:i<<~, uss eSt!o información paré;l ordenar los PQsiblesdestino.s_ .. ,: 
:i:de.tós·prOceSos..; .: . ..0."_: ... ::.: .. '", •..• ::... ".'- C;.-ó:".,.: :.¡;''~~~:.;:. ..•..•.. :",.. <".... ,,:0.. . .... :,,,.,,.:.. .. -;.,:: ...  ~:...:;-' .. .:.:,<.:::::;:-"..;;;.;..:;;;;:: 
3. Redes Bayesianas 
Las redes bayesianas son un formalismo que en forma gráfica permiten especificar la 
relación entre determinados eventos. Permiten especificar la certeza de que determinados 
eventos son causales de otros y la independencia de ciertos eventos. Un proceso de 
razonamiento permite calcular la certidumbre de algunos eventos cuando cambia la 
información que conocemos sobre otros. La información previa puede ser almacenada a 
, dL Id'  'd'" .. • . .. .. . d' . 
. ,,!.Si .. "':. \,,!!! ...,"tAD'U'VVJzv.lO."iM¡mE"11¡ PIP.. tII __ ,f •. .IR .. ".',' 
subjetivos y son fáciles de establecer. Un proceso de aprendizaje permite adaptar los 
valores definidos inicialmente. 
Siguiendo nuestra propuesta, el administrador de sistemas puede definir en forma gráfica, la 
relación que define la adecuación de una estación de trabajo en base a las variables de 
interés. Por ejemplo, puede establecer que la adecuación depende de la carga actual y de la 
cantidad de memoria disponible. De esta forma obtiene una red bayesiana como la que se 
muestra en la figura 1: 
Figura 1: Red bayesiana que define la adecuación 
Uso CPU hace referencia a la carga del sistema, Uso MEM a la cantidad de memoria 
disponible y Adecuación a la adecuación de la estación de trabajo. La red establece la 
relación entre las' variables de interés. Además se requiere 'la especificación de las 
;':\':))lh¡¡II.Lkks suhjeti\\lll que las \·illeulall. i'n  :Stl' ':;h,) ss· lúluicre la L'SPL'citical'il'1l1 d,: lre> 
tahlas. Dos tablas con las probabilidadcs a priori dI: L"so (PL' Y Uso MEM y una qUI: 
relaciona la carga y d LISO dI: ml:moria COI1 la aJl:cuación. I:S decir. la tabla dc prohahilidad 
condicional de la adecuación dada la carga y el uso de mcmoria. Por ejl:mplo. d valor de 
probahilidad que espccifica que la estación de trahajo I:S adecuada cuando cl uso dc CPl J cs 
ha.jo y el uso de memoria es bajo P( Adecuación = bucnallJso CPlJ=hajo. Uso Mem=hajo) 
Jebe ser un valor alto. 
Uso ePI; {P(CPlI)1 
Alto 0,33 
Medio 0.34 Tabla ADECUACION {p,:Adecuación I Lso Cpu. lIso MIIm)1 
Bajo 0.33 UUO Mem Alto Medio Bajo 
uu() CPU Alto MedIO Bajo Alfo Medio Bajo AlfO Medio Bajo 
liso Mem {p(Mem)1 
Buena 0.01 0.2 0.4 0,2 0.5 0.8 0.4 0,7 0.99 
Alto 0.33 
Mala 0.99 0.8 0.6 0.8 0.5 0,2 0.6 0.3 0.01 
Medio 0.34 
La red bayesiana es capaz de obtener la distribución de probabilidad conjunta y además 
proveer resultados aunque alguno de los eventos no sea conocido. Esto quiere decir que la 
red es capaz de proveer un valor de adecuación aunque no se pueda establecer alguna de las 
variables, por ejemplo, porque su valor está en etapa de cálculo, lo que podría ocurrir con el 
evento: demora en red para alcanzar un cierto destino. 
Una vez que la red bayesiana es definida en forma gráfica por el administrador del sistema, 
es compilada e insertada dentro del sistema batch distribuido. El proceso de compilación 
implica la generación de un junction tree y sus tablas. En este caso es única y contiene 18 
valores y corresponde a un único cliqué de tres elementos: 
Tabla (p(Adeeuación. USII Cpu. liso Mem)) 
UU() l\km Alto Medio Bajo 
Uso CPU Alto Medio Bajo Alto Medio Bajo Alto Medio Bajo 
Buena 0.0011 0.0224 0.0436 0.0224 0.0578 0.0898 0,0436 0.0785 O,1077 
Mala 0.1078 0.0898 0.0653 0.0898 0,0578 0,0224 0,0653 0.0337 0,0011 
En este punto se puede introducir evidencia en la red y obtener resultados. Por ejemplo, se 
puede introducir información (evidencia) sobre la carga de sistema y uso de memoria de las 
estaciones de trabajo: 
Evidencia = {Uso CPU = alto, Uso Mem = alto} 
Uso CPU  ",,,>.A "' 
Alto 1 
Medio O 
Bajo O 
Uso ·Mem·· ',' .. - ., .. ,-.. ..... 
Alto 
Medio O 
Bajo o 
Adecuaci6n 
Buena 
Mala 
. .... ". 
.' . 
I 0.01 
I 0.99 
Los valores para la adecuación se pueden calcular sin tener infórmación sohn.' alguna dl' las 
variables. Por ejemplo. si sólo se conoce que el uso de CPU es alto: 
Evidencia = : Uso CPU = alto J 
Bajo o 
4. Implementación 
El sistema se encuentra en estado de implementación, habiéndose obtenido resultados 
preliminares alentadores. La implementación se está realizando en un grupo de estaciones 

~f!¡¡III'uu:::1tii~::-tt:::lii~~~t:::::~··:!:;;':;;~~~: 
planificadores sin recompilar o detener el funcionamiento del sistema. 
El siguiente es un ejemplo de resultados obtenidos en una red de tres computadoras, en las 
que una de ellas actúa como planificador. Los resultados se presentan a través de tablas que 
permiten comparar los tiempos de ejecución obtenidos utilizando el planificador descripto 
anteriormente y el estándar provisto por NQS. 
Se definen tres procesos con las siguientes características: 
ID. Req. Tiempo de CPU Uso de Memoria Tiempo de arribo 
A 3 3Mb. O 
B 4 4Mb. 1 
e 3 5Mb. 2 
La situación inicial de los dos destinos es la siguiente: 
ID. Destino Carra (%) Memoria Memoria libre 
Desl1 60% 8Mb. 7Mb. 
Dest2 10% 8Mb. 3Mb. 
El planificador estándar de NQS produce la siguiente planificación: 
ID. Req. Tiempo Trashing Carga Dest. Tiempo Total 
A 7 40% 10% Desl2 10,5 
B 9 40% 10% Desl2 13.5 
e 7 20% 10% Dest2 9.1 
r-----.. -.-- .. ------. -. -----'-.-:: -- .. _-._. -"'"T-----;-:----. -· .. --r-;-------..------r ...-----.-,-.-, 
: __ 1  ).._(!!~ __ ._ 1ll'!11po l..<!::___~ __ J_( .. t!ga__I)-cst:- f lCmpC,!!!t__,_! __ j 
f---- __ .._l._ .. _ ____·i _ ________ () % __ l)J)_?;'_L!JJ'-I] ;_3:.-i .. ______ i 
! n : (J I!'í, I ()(J i}}; t ¡)eS! I : ! / _ :: i 
[ __ o. (- -: .- -r--'---(j '!;'_-.-_-T-{'¡¡;;7,-T"ñ;__:i-1 -; .-- -",'-' -'-1 
Se puede apreciar en los resultados que la planiiil:ación obtenida por el 
planificador basado en redes bayesianas es claramente superior. En promedio, 
cada proceso demora 2,18 veces más del tiempo que demorarían en un sistema 
dedicado, mientras que con el planificador de NQS demoran en promedio 3,3 
veces más. 
Conclusiones 
Las redes bayesianas constituyen un fonnalismo a través del cual se puede 
especificar la relación entre distintas variables. Realizando el -cálculo del 
ii~tii!l •. ll~~~,,,eqMtt~>,,~JJ~~~.2..!!!J;ts'&''Ul--(ll!P.,.-gg~o.PeI:1lll~~~o.99Co**J¡¡~ probabilidades de intéres.· . ... ". - .. - o.. .0. . . 
En este trabajo se propone la utilización de redes bayesianas para definir 
algoritmos de balance de carga en sistemas de ejecución batch. El proceso es 
mucho más simple que la definición del algoritmo en un lenguaje de 
programación, y puede ser realizado por el administrador del sistema. 
La implementación parcial de este modelo en NQS muestra que es posible 
utilizar esta herramienta para obtener planificadores más adecuados, los que se 
comparan favorablemente en cuanto a performance con los provistos en forma 
estándar por el sistema. 
