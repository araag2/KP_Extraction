Es posible la integración de servicios en la Web con NET
﻿ón del lenguaje, como integrar servicios sobre la Web con las 
características mencionadas. 
 La investigación sobre estos conceptos parte de la bibliografía que se anexa a este artículo.  
Estructura del trabajo 
 
En el artículo citado al pie1, Ethan Cerami, autor de Web Services Essentials, se basa en 10 
preguntas para guiar al lector en la comprensión del concepto de Web Services y links relacionados. 
Esas preguntas son las siguientes: 
 
1. What is a Web service? 
2. What is new about Web services? 
3. I keep reading about Web services, but I have never actually seen one. Can you show me a 
real Web service in action? 
4. What is the Web service protocol stack? 
5. What is XML-RPC? 
6. What is SOAP? 
7. What is WSDL? 
8. What is UDDI? 
9. How do I get started with Web Services? 
10. Does the W3C support any Web service standards? 
 
Estas 10 preguntas, acertadamente escogidas, son una guía para analizar los conceptos 
relacionados con el tema. En este trabajo, parto de ellas para desarrollar los conceptos asociados 
con la integración de servicios,  en la primer parte del trabajo, y para analizar, en la segunda parte, 
                                              
1 Top Ten FAQs for Web Services, By Ethan Cerami. 
http://webservices.xml.com/pub/a/ws/2002/02/12/webservicefaqs.html 
página 2 
si .NET ofrece la arquitectura y funcionalidad para implementar la integración de servicios a través 
de la Red. 
Web Services ha cambiado no sólo la forma de concebir el desarrollo de aplicaciones, sino 
las aplicaciones en sí. Para poder entrar en el mundo de los Web Services se hace necesario aclarar, 
redefinir y definir algunos conceptos. Gran parte de este trabajo trata sobre la introducción a los 
Web Services. 
 
Palabras claves citadas en la primer parte del trabajo: heterogeneidad, interoperabilidad, 
extensibilidad, escalabilidad, tratamiento de fallos (detección de fallos, enmascaramiento, 
tolerancia, recuperación y redundancia), transparencia, cliente, servidor y servicios remotos, el 
modelo distribuido, el modelo P2P (peer to peer), middleware, ubiquitous connectivity, pervasive 
computing, aplicaciones: Net Centric, web based, web enabled, three-tier. Business logic, 
componentes distribuidas, shared context.  
 
 
La segunda parte del trabajo describe el modelo .NET de Microsoft y lo analiza para la 
implementación de Web Services. 
 
Web Services 
Conceptos y arquitectura 
El trabajo se inicia con un análisis rápido sobre la evolución desde la arquitectura de los 
sistemas de cómputo hasta llegar al modelo distribuido. 
Se analiza el cambio en el modelo de accesibilidad y la forma de desarrollar las aplicaciones, 
comenzando a introducir el concepto de interoperabilidad y la tendencia orientada al modelo 
distribuido sobre la red. 
Con el objetivo de desarrollar aplicación distribuidas altamente integradas que interactúen 
por XML2 entre múltiples servicios WEB, se le dá un lugar relevante a XML y se involucra el 
concepto de business logic (ver Bibliografía, Sobre business logic) para demostrar una completa 
integración de los servicios a nivel de todas las capas. 
En la bibliografía se citan las referencias a los artículos consultados (Sobre Web Services). 
Protocolos  
En las preguntas de Ethan Cerami, se hace referencia a los protocolos standards más citados 
en la filosofía Web Services, como XML, WSDL3, UDDI4, SOAP5. 
No obstante, hay definiciones, entre ellas la avalada por W3C en el Working Draft que se 
cita al pie6, donde “Web Service es un sistema de software identificado por una URI, cuyas 
interfases y enlaces (bindings)  son definidos y descriptos usando XML. Este sistema puede ser 
“descubierto” y usado por otros sistemas de software. Esa interacción debe darse según la 
manera descripta en la definición, usando mensajes de acuerdo a protoclos de Internet”. 
                                              
2 XML, eXtensible Markup Language 
3 WDSL, Web Service Description Language  
4 UDDI, Universal Discovery Description & Integration 
5 SOAP, Simple Object Access Protocol 
6 Web Services Architecture. W3C Working Draft, 14 Novembre 2002. Editors: Champion (Software AG), Ferris 
(IBM), Newcomer (Iona), Orchard (BEA Systems) 
 
página 3 
En esta definición no se nombra SOAP ni WSDL. No obstante, WSA (Web Service 
Architecture, de W3C) acuerda lo conveniente de basarse en una base comú n para messaging y 
descripción (lo define como “una necesidad práctica”. 
En la bibliografía se citan las referencias a los atículos consultados (Sobre Protocolos). 
 
El Modelo .NET 
 
.NET es un conjunto de tecnologías de Microsoft. Podemos pensarlo como un sello que 
Microsoft puso a un conjunto de distintas tecnologías.  
Sobre esta tecnología se enuncia que pueden construirse aplicaciones y servicios que 
funcionan independientemente de la plataforma. Permite la comunicación entre aplicaciones, 
desarrolladas en distintos lenguajes, en diversas plataformas, integrando distintos dispositivos 
cliente. Algunos autores, incluso, comparan a .NET como una forma de sistema operativos 
distribuido a través de Internet, con un soporte optimizado a aplicaciones y servicios. 
A través de las experiencia de los usuarios, se ve la necesidad de integrar datos y las 
preferencias del usuario en una sola aplicación. A través de XML, HTTP y SOAP se logra una 
solución integrada. 
En la bibliografía se citan las referencias a los atículos consultados (Sobre .NET). 
Arquitectura .NET 
 
Considerando la arquitectura de los Web services como identificación de sus componentes y 
la interrelación entre ellas, se describen los componentes de .NET y como se relacionan para lograr 
la integración de servicios que se quiere obtener. 
 
.NET está compuesto por: 
· Un framework 
· Visual Studio .NET 
· .NET My Services 
· .NET Enterprises Services 
 
 
En la Arquitectura de los Web services, se definen roles que cumplen agentes de 
software(client service, provider service, discovery agency) y operaciones (find, publish, interact). 
El artículo se involucra con la arquitectura de .NET con el objetivo de asimilarla a la arquitectura 
necesaria para la implementación de Web Services. 
 
El framework 
El artículo analiza el .NET framework como infraestructura donde los servicios WEB 
puedan brindarse dentro de las pautas que estuvimos analizando.  De esta manera, los 
programadores pueden enfocarse en la lógica de negocio, más que en la infraestructura de la 
programación. 
 
Se describe la constitución del framework (CRL y class library). Algunos autores citan 
ASP.NET como la tercer componente del framework; otros, lo incluyen al  hablar de la class 
library. 
 
página 4 
Este análisis se orienta a establecer si se cumplen las pautas de interoperabilidad esperada 
en la filosofía Web Service. 
 
CRL (Common Language Routine) 
 
El análisis de la CRL (Common Language routine), por otra parte, está enfocada en verificar 
si realmente el programador logra un nivel de abstracción como el enuncaido con respecto a manejo 
de memoria y threads. Esta forma de trabajar establece un cambio por ejemplo, en la forma de 
enseñar Sistema Operativos, area de mi interés en la docencia.  
 
A través de CRL, se puede indagar la característica language free anunciada. 
 
Framework class library 
En cuanto a la librería de clases (.NET framework class library), considerando que sirve para 
la implementación standard de servicios que se basan en aplicaciones CRL, se analizará en cuanto a 
su utilidad en la implementación de Web services. 
Para implementar esta capacidad multilenguaje, el codigo fuente es llevado a un código 
intermedio MSIL (Microsoft Intermediate Language), también llamado IL. En el trabajo se analiza 
este código, junto con los conceptos de JIT compiler (just in time compiler). 
 
Se realizan también comparaciones de .NET con J2EE. 
 
La integración de servicios 
 
El uso de componentes distribuidas es otro ingrediente en el objetivo Web Services. 
Los Building Blocks Services, también llamados Foundation services, son componentes 
basados en Internet que ofrecen funcionalidad de una forma reutilizable y programable. 
Estas componentes a las que puede recurrir el desarrollador para “armar” su aplicación, 
pueden combinarse con otras componentes. Ejemplo de estos building blocks services, es Microsoft 
Passport. 
 
.NET utiliza WSDL y XML para la implementación de Web services. 
 
.NET My Services 
.NET My Services es un conjunto de web services provistos por Microsoft, accesibles por 
SOAP. Todos estos servicios, pueden accederse por Internet tanto por parte de usuarios como de 
aplicaciones.  
Incluye un servicio de autenticación, que asegura que sólo los usuarios autorizados pueden 
acceder a la información que contiene .NET My services (calendarios, inbox, almacenamiento de 
documentos, profile, etc). 
 
 
 
página 5 
