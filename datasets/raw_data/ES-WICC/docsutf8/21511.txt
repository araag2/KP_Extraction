Comparación de métricas para función de fitness en estrategias evolutivas aplicadas al problema inverso de los IFS
﻿Comparaci¶on de M¶etricas para Funci¶on de Fitness en
Estrategias Evolutivas Aplicadas al Problema Inverso de
los IFS
Paula Millado1, Mar¶³a Laura Ivanissevich1 y Claudio Delrieux2
1Universidad Nacional de la Patagonia Austral - L. de la Torre 860 - R¶³o Gallegos - ARGENTINA
2Universidad Nacional del Sur - Av. Alem 1253 - Bah¶³a Blanca - ARGENTINA
e-mail:mivanissevich@uarg.unpa.edu.ar - claudio@acm.org
1 Introducci¶on
Los sistemas de funciones iteradas (IFS) constituyen una manera econ¶omica y vers¶atil de
representar im¶agenes por medio de conjuntos fractales. Una imagen cualquiera puede ser
arbitrariamente aproximada por un atractor fractal adecuadamente representado por un IFS.
La b¶usqueda de dicho conjunto constituye el problema inverso del IFS. Lamentablemente
por fuerza bruta esta b¶usqueda es inabordable. Las estrategias hasta ahora propuestas para
solucionar esta di¯cultad son dos. Por un lado, es posible restringir el espacio de b¶usqueda
a un subconjunto de las transformaciones a¯nes, como se propone en la compresi¶on fractal
en bloques (CFB) [3, 6]. Los resultados obtenidos con la CFB poseen una buena relaci¶on de
compromiso entre tiempo de c¶omputo, compresi¶on resultante, y calidad ¯nal, aunque est¶an
evidentemente lejos de las posibilidades te¶oricas [4].
La otra posibilidad, explorada en nuestra l¶³nea de trabajo, es utilizar un mecanismo de
b¶usqueda adaptativo, que tenga cierta inteligencia como para guiarse dentro del un subconjunto del espacio de b¶usqueda en el cual los resultados se acercan a la soluci¶on buscada. Este
es el tipo de estrategia buscada con la programaci¶on evolutiva (PE) [11] y con la programaci¶on gen¶etica (PG) [8]. El uso de PE y PG para la soluci¶on del problema inverso ha sido
mucho menos estudiado, pese a que permitir¶³a obtener mejores compresiones, tal vez con
mayores tiempos de c¶omputo, que la CFB. Sin embargo, dada la naturaleza asim¶etrica de
la compresi¶on fractal, y el hecho de que una imagen comprimida es utilizada innumerables
veces, este tiempo adicional representa un costo menor frente a la ventaja de tener im¶agenes
mejor comprimidas.
En este trabajo se muestra la perfomance de las dos m¶etricas seleccionadas tras un
proceso de evaluaci¶on sobre un conjunto de m¶etricas aplicables a nuestro problema espec¶³¯co
[5]. Es importante notar que el problema inverso representa un caso interesante de estudio
para proponer y comparar diversas estrategias evolutivas y gen¶eticas, diferentes funciones
de adaptaci¶on y selecci¶on, etc. Para obtener y visualizar estos resultados se implement¶o
un ambiente gr¶a¯co que permite testear y comparar los resultados y evaluar num¶erica y
visualmente los resultados que se van produciendo a lo largo de las generaciones.
2 Programaci¶on evolutiva aplicada al problema inverso
de los IFS
Un sistema de funciones iteradas (IFS) consiste en una colecci¶on de transformaciones a¯nes
contractivas que mapea al plano <2 sobre s¶³ mismo. Esta colecci¶on de transformaciones de¯ne un mapa W (¢) = Sni=1 wi(¢). Estas tienen la importante caracter¶³stica de que cuando son
aplicadas repetidamente, convergen a un punto ¯jo. Dado un conjunto inicial S (colecci¶on
de puntos del plano), podemos calcular wi(S) para cada i, tomar la uni¶on de estos conjuntos
y obtener un nuevo conjunto W (S). Seg¶un el teorema de Hutchinson [1], cuando las transformaciones wi son contractivas, entonces W es contractiva en el espacio (cerrado y acotado)
de subconjuntos del plano, y la iteraci¶on de un IFS converge a un ¶unico subconjunto del
plano, el cual es un punto ¯jo del mapa W , denominado atractor A del IFS.
La obtenci¶on del c¶odigo IFS de una ¯gura I arbitraria, se realiza partiendo de una
representaci¶on inicial aproximada de la silueta S del objeto que se desea modelar. La idea
del m¶etodo es buscar un grupo de mosaicos |copias transformadas de S| que en conjunto
cubran la silueta original (Teorema del Collage [2]). Si por d(I; J) denotamos la distancia de
Hausdorf entre subconjuntos I y J del plano en una m¶etrica adecuada, y r es la contractividad
global de W , entonces el teorema del collage permite a¯rmar la desigualdad
d(A; I) ∙ 11¡ rd(I;
[
wi(I));
lo cual signi¯ca que la distancia entre la ¯gura I y el atractor A del IFS est¶a acotada por
la distancia entre I y el cubrimento determinado por W . A mejores cubrimientos, mejor
aproximaci¶on a la imagen ¯nal. En otras palabras, para lograr la codi¯caci¶on se deben
determinar un conjunto de transformaciones a¯nes contractivas fw1; w2; : : : ; wng con la siguiente propiedad: La silueta original S y el conjunto  S = SNn=1 wn(S) deben ser visualmente
cercanos, siendo el n¶umero de transformaciones el menor posible. wn(S) es llamado el n¶esimo mosaico del collage. Este cubrimiento hasta ahora no ha podido implementarse en
forma autom¶atica, debi¶endose trabajar con asistencia humana. En este trabajo proponemos
el uso de Programaci¶on Evolutiva (PE) y Programaci¶on Gen¶etica (PG) como mencanismo
para resolver el problema inverso de los IFS.
La (PE) y la (PG) son t¶ecnicas bien conocidas que surgen de imitar lo que conocemos
de la evoluci¶on natural. Las ideas principales provienen de una met¶afora de la evoluci¶on
natural, en la cual existen individuos (fenotipos) que expresan una informaci¶on gen¶etica
(genotipo), y adem¶as est¶an sujetos a la presi¶on evolutiva del medio (¯tness). Los individuos
m¶as exitosos (con mejor ¯tness) ven aumentadas sus posibilidades reproductivas, generando
nuevos individuos con su mismo genotipo. Sin embargo, en el proceso reproductivo ocurre el
fen¶omeno distintivo de la evoluci¶on natural: la aparici¶on de mutaciones al azar. Este mismo
esquema din¶amico, con un sinn¶umero de variaciones, en especial para resolver problemas que
con los m¶etodos de Inteligencia Arti¯cial de alto nivel tradicionales (b¶usqueda heur¶³stica,
l¶ogica, etc.) son o bien intratables o bien impr¶acticos.
Supongamos la existencia de una poblaci¶on con ¹ ancestros, cuyo genotipo ¹gi se encuentra codi¯cado con n¶umeros. Entonces se crea un conjunto ¸ de descendientes siguiendo el
esquema
¹pi = (¹gi; ¹¾i) mut! (¹gi + n0( ¹¾i); ®( ¹¾i));
donde n0( ¹¾i) denota la elecci¶on de un n¶umero de una aleatoria normal con media cero y
variancia ¾i. ® de¯ne una funci¶on de adaptaci¶on, la cual puede ser la distancia de Hamming
o la distancia de Hausdor® entre el atractor A del IFS resultante y la imagen I de entrada. En
nuestro caso, ¹gi representa los par¶ametros de la IFS W que estamos tratando de encontrar.
Cada mapa wk requiere seis reales para su objetivo:
wk(x; y) =
Ã
ak bk
ck dk
!Ã
x
y
!
+
Ã
ek
fk
!
(1)
=
Ã
r1k cos(µ1k) ¡r2k sin(µ1k)
r1k sin(µ2k) r2k cos(µ2k)
!Ã
x
y
!
+
Ã
ek
fk
!
(2)
En general, la expresi¶on 2 es preferible a la 1 por tener un signi¯cado geom¶etrico m¶as
intuitivo. Por lo tanto, ¹gi representar¶a las n s¶extuplas (r1k; r2k; µ1k; µ2k; ek; fk); k 2 [1::n] en
un determinado individuo de una generaci¶on. Como estrategia h¶³brida se puede introducir,
adem¶as de la mutaci¶on, el crossover o cruzamiento entre el genotipo de dos ancestros para
obtener el genotipo del sucesor. Para evitar los m¶³nimos locales, y quedar atrapado en un
\nicho ecol¶ogico", la estrategia mantiene una diversidad genot¶³pica seleccionando un grupo
numeroso de individuos con la mejor adaptaci¶on. Entre estas t¶ecnicas de niching podemos
contar el ¯tness sharing (escalar el ¯tness en un entorno de cada individuo), el crowding
(reemplazar al padre m¶as cercano del individuo recientemente creado), y el clustering o
agrupamiento, la cual resulta ser la m¶as e¯ciente en la pr¶actica.
En trabajos anteriores se implement¶o la funci¶on de adaptaci¶on por medio de la funci¶on
de Hamming [9, 7]. En este trabajo veremos que el uso de la funci¶on de Hausdor®, si bien
computacionalmente m¶as compleja, produce resultados geom¶etricamente m¶as adecuados.
La distancia de Hausdor® es una m¶etrica bien conocida para el espacio de los compactos de
R2 [2]. Se obtiene el espacio m¶etrico completo de los compactos, (H(R2); h) de¯niendo la
distancia forward y la distancia backward del siguiente modo:
df(A;B) =
_
a2A
^
b2B
d(a; b)
db(A;B) =
_
b2B
^
a2A
d(a; b)
Para obtener una funci¶on sim¶etrica se de¯ne la distancia de Hausdor® como:
h(A;B) = df(A;B)
_
db(A;B) (3)
La m¶etrica de Hausdor® puede ser usada como medida de la "cercan¶³a" de dos im¶agenes
apropiadamente con¯guradas computacionalmente. La expresi¶on 3 es topol¶ogicamente equivalente a la expresi¶on:
h0(A;B) = df(A;B) + db(A;B) (4)
El algoritmo implementado es de tiempo lineal y consiste en computar las matrices binarias
de las dos im¶agenes, una de ellas la imagen objetivo, Iobj, y la otra la aproximaci¶on que se
va generando en el sistema evolutivo, Iaprox, atrav¶es de la construcci¶on de una matriz de
distancias, Db,( y la Df), conteniendo la informaci¶on de la distancia Manhattan que permite
obtener el dato Wa2A
V
b2B d(a; b) (y el an¶alogo, ver [10].
db(Iobj ; Iaprox) = maxfDb[i; j] : Iaprox[i; j] = 1
df(Iobj ; Iaprox) = maxfDf [i; j] : Iobj[i; j] = 1
h(Iobj ; Iaprox) = db(Iobj ; Iaprox) + df(Iobj; Iaprox)
Figura 1: (a) La interfase del sistema, mostrando la convergencia evolutiva de un conjunto
de transformaciones al atractor de la imagen inicial, y (b) la representaci¶on simult¶anea de
las funciones de ¯tness con diferentes medidas.
3 Resultados obtenidos
Para contar con una implementaci¶on adecuada en velocidad y capacidad de c¶omputo, el
programa fue implementado en el leguaje Delphi, construy¶endose un ambiente gr¶a¯co para
testear y evaluar las diferentes estrategias y funciones. En la Fig. 1(a) es posible observar
la interfase gr¶a¯ca del sistema. Abajo a la izquierda se muestra el atractor resultante, y
abajo a la derecha, la curva que representa la evoluci¶on del ¯tness del atractor encontrado a
lo largo de las generaciones. Los controles de la parte superior izquierda permiten elegir un
conjunto de im¶agenes de entrada, para testear el correcto funcionamiento en varios casos,
mientras que los controles a la derecha permiten controlar la ejecuci¶on del sistema, modi¯car
los par¶ametros, las diversas estrategias, la funci¶on de ¯tness, etc. Para poder comparar
los resultados de convergencia con las distintas m¶etricas, el programa permite visualizar
simult¶aneamente ambas funciones de ¯tness (ver Fig. 1(b)).
En la Fig. 2 se muestran los resultados obtenidos al utilizar la distancia de Hausdor® como
funci¶on de ¯tness. Aunque el costo en tiempo de computaci¶on llega casi a triplicarse, los
resultados obtenidos son mucho m¶as adecuados en la convergencia hacia la imagen buscada.
Teniendo en cuenta que la decodi¯caci¶on de im¶agenes por IFS de una u otra calidad insume
el mismo tiempo, y que la codi¯caci¶on se hace una sola vez para muchos usos, es entonces
importante poder codi¯car las im¶agenes con mayor calidad, aunque el tiempo sea mayor.
