Hacia la solución del problema de chequeo de instancia en ontologías inconsistentes usando argumentación rebatible
﻿
La Web Semántica es una visión futura de la Web en la cual la información tiene un significado
exacto definido en términos de ontologías. Esto permitirá que agentes inteligentes procesen el
contenido de los recursos web. Las definiciones de ontologías se realizan en el lenguaje OWL, el
cual es una notación XML para sentencias expresadas en Lógicas para la Descripción. Cuando
una ontología es inconsistente, los razonadores actuales no son capaces de obtener conclusiones a
partir la misma.
En esta línea de investigación, exploramos la utilización de la argumentación rebatible para
obtener respuestas significativas al problema de la determinación de la pertenencia de individuos a
una clase en presencia de ontologías inconsistentes en el marco de laWeb Semántica. La propuesta
de trabajo consiste en transformar una ontología expresada en una Lógica para la Descripción
en un Programa Lógico Rebatible. Bajo ciertas condiciones, en el caso en que la ontología sea
inconsistente, se podrá determinar la pertenencia de un cierto individuo a una clase particular
utilizando un análisis dialéctico que considerará las razones a favor y en contra de la pertenencia
de dicho individuo a esa clase. En este artículo comentamos brevemente los resultados que hemos
obtenido en la solución de dicho problema y discutimos los problemas que restan resolverse.
Palabras clave: Inteligencia Artificial, Razonamiento no-monótono, Argumentación rebatible, Web
Semántica, Ontologías, Lógicas para la Descripción, Agentes inteligentes
1. Introducción y motivaciones
La Web Semántica [2] es una visión futura de la Web en la cual la información tiene un significado
exacto; permitiendo así que las computadoras entiendan y razonen en base a la información encontrada
en la Web. En la Web Semántica se propone resolver el problema de la asignación de semántica a los
recursos web por medio de definiciones de ontologías.
Las definiciones de ontologías se realizan en el lenguaje OWL (por Ontology Web Language) [9],
el cual está basado en las Lógicas para la Descripción (DL) [1]. Las ontologías expresadas en las DL
son definidas en términos de un conjunto de axiomas terminológicos (TBox) conteniendo información
de clases y un conjunto de axiomas asercionales (ABox) conteniendo información sobre individuos
perteneciendo a las clases definidas en la Tbox. Si bien las ontologías consistentes expresadas en DL
pueden ser manipuladas por razonadores DL (e.g., Racer [8]), debido a que las ontologías son entes
complejos, creados por uno o varios ingenieros de conocimiento, surgen inconsistencias. Una manera
posible de trabajo consiste en reparar la ontología inconsistente para que los razonadores DL puedan
1LIDIA es un miembro del IICyTI (Instituto de Investigación en Ciencia y Tecnología Informática).
trabajar con ellas. Otro enfoque consiste en aceptar inconsistencias y lidiar con ellas por medio de un
formalismo de razonamiento no monótono.
En particular, la Programación en Lógica Rebatible (DeLP) [4] provee un lenguaje para la representación de conocimiento y el razonamiento que utiliza la argumentación rebatible [3, 10, 11]
para decidir entre conclusiones contradictorias a través de un análisis dialéctico. La codificación de
conocimiento por medio de un programa DeLP provee un buen balance entre expresividad e implementabilidad, que permite lidiar con información incompleta y potencialmente contradictoria.
En esta línea de investigación, exploramos la utilización de la argumentación rebatible para obtener respuestas significativas al problema de la determinación de la pertenencia de individuos a una
clase en presencia de ontologías inconsistentes en el marco de la Web Semántica. La propuesta de
trabajo consiste en transformar una ontología expresada en una Lógica para la Descripción en un
Programa Lógico Rebatible. Bajo ciertas condiciones, en el caso en que la ontología sea inconsistente,
se podrá determinar la pertenencia de un cierto individuo a una clase particular utilizando un análisis
dialéctico que considerará las razones a favor y en contra de la pertenencia de dicho individuo a esa
clase. En este artículo comentamos brevemente los resultados que hemos obtenido en la solución de
dicho problema y discutimos los problemas que restan resolverse.
El resto de artículo está estructurado de la siguiente manera. En la Sección 2 se introducen los
fundamentos de las Lógicas para la Descripción y la Programación en Lógica Rebatible. En la Sección 3 se repasan brevemente los resultados obtenidos hasta el momento. Finalmente, en la Sección 4
se discuten los problemas abiertos y las soluciones factibles.
2. Marco de trabajo
2.1. Lógicas para la Descripción
Las Lógicas para la Descripción (DL) [1] son una familia de formalismos de representación de
conocimiento basados en las nociones de conceptos (predicados unarios, clases) y roles (relaciones
binarias), y están principalmente caracterizados por constructores que permiten describir conceptos
complejos y roles a partir de otros atómicos usando conjunción (CuD), disyunción (CunionsqD), negación
(¬C), restricción existencial (∃R.C), y restricción de valor (∀R.C).
Una ontología O = (T,A) consiste de dos conjuntos finitos y mutuamente disjuntos. El conjunto
T (Tbox) introduce la terminología y el conjunto A (Abox) contiene aserciones acerca de objetos particulares en el dominio de aplicación. Las sentencias de la Tbox son de la forma C v D (inclusiones)
y C ≡ D (igualdades), donde C y D son descripciones de conceptos (posiblemente complejas).
Es posible dar una semántica a las ontologías al considerar la correspondencia existente entre las
DL y la Lógica de Primer Orden (FOL) [1]. Básicamente, los conceptos (roles) DL se corresponden
con predicados unarios (binarios, resp.) y los operadores ¬, u, unionsq con negaciones, conjunciones y
disyunciones lógicas clausuradas universalmente. Las expresiones de la forma ∃R.C se entienden
como expresiones FOL de la forma (∀x)(∃y)(R(x, y)→ C(y)). Por otro lado, las inclusiones C v D
se corresponden con expresiones de la forma (∀x)(C(x) → D(x)) y las igualdades C ≡ D son una
abreviación de dos inclusiones de la forma C v D y D v C.
2.2. Argumentación rebatible
En un programa lógico rebatible P = (Π,∆), se pueden distinguir un conjunto ∆ de reglas
rebatibles P −≺ Q1, . . . , Qn, y un conjunto Π de reglas estrictas P ← Q1, . . . , Qn. La derivación de
literales en DeLP resulta en la construcción de argumentos. Un argumento 〈A, H〉 es un conjunto no
contradictorio y minimal de claúsulas fijas A de ∆ que permite derivar un literal fijo H posiblemente
usando reglas fijas de Π.
Debido a que los argumentos pueden estar en conflicto (concepto capturado en términos de una
contradicción lógica) puede definirse una relación de ataque entre argumentos. Usualmente se define
un criterio para decidir entre dos argumentos en conflicto. Si el argumento atacante es estrictamente
preferido sobre el argumento atacado, entonces éste es llamado un derrotador propio; en cambio, si
no hay comparación posible, entonces éste es llamado un derrotador por bloqueo.
Para determinar si un argumento dado A es considerado finalmente no derrotado (o garantizado),
se lleva a cabo un proceso dialéctico recursivo, en el cual son tomados en cuenta los derrotadores para
A, los derrotadores de éstos y así sucesivamente. Dado un programa DeLP P y una consulta H , la
respuesta final a H con respecto a P toma en cuenta tal análisis dialéctico. La respuesta a una consulta
puede ser: SÍ, NO, INDECISO, o DESCONOCIDO.
3. Resultados obtenidos
En trabajos previos [5, 6], mostramos cómo una ontología definida en Lógicas para la Descripción
puede ser expresada como un programa DeLP. Dada una ontología O = (T,A), ésta es expresada
como un programa rebatible P = (Π,∆). El conjunto de axiomas de la terminología T es expresado
como un conjunto de reglas rebatibles ∆. El conjunto de aserciones sobre individuos es codificado
como un conjunto de hechos Π.
Explicaremos brevemente la idea detrás de la traducción de Lógicas para la Descripción a DeLP.
Sea LDL el lenguaje de las DL y sea LDeLP el lenguaje de los programas DeLP. La función de
traducción T : LDL → LDeLP toma sentencias de la Abox y por cada una retorna un hecho; por
cada aserción de inclusión de la Tbox de la forma C v D retorna una regla rebatible de la forma
D(X) −≺ C(X). Esta función se basa en la estudiada por Grosof et. al. [7] y se fundamenta en el
hecho de que las sentencias Tbox de inclusión C v D pueden ser identificadas con fórmulas de
lógica de primer orden de la forma (∀x)(C(x)→ D(x)). Así, debido a que estas fórmulas en realidad
pueden ser de complejidad arbitraria, bajo ciertas condiciones pueden ser reescritas como programas
lógicos. A continuación mostramos un breve ejemplo.
Ejemplo 3.1 Consideremos la siguiente ontología O = (T,A) tal que:
T =



boxer v violent
boxer u animal lover v ¬violent
∃loves.airedale v animal lover
∃kicks.poodle v ¬animal lover



, y A =



boxer(john)
loves(john, lola)
airedale(lola)
kicks(john, tina)
poodle(tina)



La Tbox T expresa que: los boxeadores son violentos; un boxeador que es amante de los animales
no es violento; si alguien ama a un perro de raza Airedale Terrier es un amante de los animales, y,
si alguien es capaz de patear a un Poodle, entonces no es un amante de los animales. La Abox A
expresa que: John es boxeador y ama a Lola; Lola es un Airedale Terrier; John patea a Tina y Tina
es un Poodle.
La ontología presentada en el ejemplo anterior es claramente inconsistente ya que desde el punto
de los razonadores DL estándar la clase de los boxeadores debería ser vacía. Esto se debe a que
es posible demostrar que un boxeador es violento y no violento al mismo tiempo (i.e., boxer v
violent u ¬violent = ⊥), y por otro lado se conoce un boxeador llamado John (i.e., boxer(john)).
Nuestra propuesta de trabajo consiste en expresar la ontología original O = (T,A) como un
programa DeLP P = (Π,∆) donde Π = T (A) y ∆ = T (T ). Una vez hecho, la pertenencia de un
individuo a a una clase C se resuelve realizando un análisis dialéctico para determinar si existe un
argumento garantizado para 〈A, C(a)〉 (a pertenece a C) o para 〈B,∼C(a)〉 (a no pertenece a C).
Ejemplo 3.2 (Continúa el Ejemplo 3.1) Consideremos el programa P = (Π,∆) que se obtiene al
traducir a DeLP a la ontología O = (T,A):
Π =



boxer(john)
loves(john, lola)
airedale(lola)
kicks(john, tina)
poodle(tina)



, y
∆ =



violent(X) −≺ boxer(X)
∼violent(X) −≺ boxer(X), animal lover(X)
animal lover(X) −≺ loves(X,Y ), airedale(Y )
∼animal lover(X) −≺ kicks(X,Y ), poodle(Y )



Para determinar si John pertenece la clase de los violentos, es necesario determinar si existe un
argumento garantizado a favor del literal violent(john).
Así, encontramos un argumento 〈A1, violent(john)〉 a favor de que John es violento, donde:
A1 =
{
violent(john) −≺ boxer(john)
}
Pero hay otro argumento que derrota al primero, indicando que John no es violento: 〈A2,∼
violent(john)〉, con:
A2 =
{
∼violent(john) −≺ boxer(john), animal lover(john);
animal lover(john) −≺ loves(john, lola), airedale(lola)
}
Finalmente, aparece un tercer argumento 〈A3,∼animal lover(john)〉 socavando la conclusión
anterior en el punto de ataque animal lover(john), y reinstaurando al primero:
A3 =
{
∼animal lover(john) −≺ kicks(john, tina), poodle(tina)
}
Así, como el resultado a las consultas violent(john) es SI y∼violent(john) es NO, concluimos que
John pertenece a la clase de los violentos.
4. Trabajo en progreso
Se debe notar que en el acercamiento presentado en la sección anterior, todas las sentencias de
la Tbox original son expresadas como reglas rebatibles en el programa DeLP resultante de la transformación. Esto se puede interpretar como que todas las inclusiones de conjuntos expresadas por la
Tbox son consideradas como reglas default.
En ciertas aplicaciones, es interesante que ciertas sentencias de la Tbox sean interpretadas como
reglas estrictas y otras como reglas rebatibles. Formalmente, dada una ontología O = (T,A), nos
interesará particionar al conjunto T en un conjunto de sentencias estrictas TS y otro conjunto de
sentencias rebatibles TD, tal que TS ∪ TD = T y TS ∩ TD = ∅. Así, el programa DeLP obtenido
aplicando la transformación sería de la forma: P = (T (TS) ∪ T (A), T (TD)).
Además, una vez que tenemos información estricta es necesario considerar la deducción de información negativa. Por ejemplo, la sentencia de inclusión C v D (todos los C’s son D’s) es traducida como la regla estricta D(X) ← C(X). Claramente, a partir de C(a) (a pertenece al concepto C) podemos deducir D(a) (a pertenece al concepto D). Sin embargo, en presencia de ∼D(a)
(a no pertenece a D) no es posible deducir ∼ C(a) (a no pertenece a C). En virtud de ello, dada
una sentencia DL C1 u C2 u . . . u Cn−1 u Cn v D, en lugar de sólo incluir la única regla estricta
D(X) ← C1(X), C2(X), . . . , Cn−1(X), Cn(X) en el programa DeLP derivado de la ontología, una
solución que se presenta prometedora consiste en incluir a todas las transpuestas de dicha regla, i.e.:
D(X) ← C1(X), C2(X), . . . , Cn−1, Cn(X)
∼C1(X) ← ∼D(X), C2(X), . . . , Cn−1, Cn(X)
∼C2(X) ← ∼D(X), C1(X), . . . , Cn−1, Cn(X)
. . .
∼Cn−1(X) ← ∼D(X), C1(X), C2(X), . . . , Cn(X)
∼Cn(X) ← ∼D(X), C1(X), C2(X), . . . , Cn−1(X)
Nuestro trabajo de investigación actual está orientado a la formalización de las soluciones a los
problemas planteados en esta sección así como a realizar una caracterización teórica del proceso.
Agradecimientos
Esta investigación está fundada por Agencia Nacional de Promoción Científica y Tecnológica
(PICT 2002 No. 13.096, PICT 2003 No. 15.043, PAV 2004 076), por CONICET (Argentina), por
Proyecto TIN2006-15662-C02-02.
