Grupo de procesadores de lenguajes
﻿
El temprano desarrollo de la teoría de Lenguajes Formales y Autómatas dentro de las Ciencias de
Computación hizo que su cuerpo de conocimientos y algoritmos se conformara antes de que se contara
con métodos de diseño que garanticen corrección, que permitan derivar algoritmos a partir de
especificaciones o verificarlos usando técnicas especiales para ello. Como consecuencia el enfoque usual
de la bibliografía consiste en presentar los algoritmos o autómatas y luego demostrar que satisfacen el
problema a resolver. En esta línea de trabajo se pretende reformular la presentación de los resultados
usando métodos de diseño que garanticen la corrección. Un resultado  de ésta línea ya obtenido es un
método para la construcción de autómatas finitos a partir del predicado que define su conjunto de
aceptación. Dicho método garantiza la corrección de los autómatas construidos, que ha sido usado tanto
para rehacer todas las construcciones de autómatas finitos requeridos en el cuerpo de la teoría de
Lenguajes Formales, incluyendo el teorema fundamental del análisis LR como para probar su aplicación a
la construcción de diversos casos de estudio con objetivos prácticos.
1. Introducción
Las Ciencias de la Computación brindan métodos formales o semi-formales para la
construcción de algoritmos correctos, basándose en la metodología de Hoare, E.
Dijkstra y D. Gries [5][6][7] y muchas carreras universitarias introducen a sus alumnos
en la programación utilizándolos. Sin embargo en la Teoría Lenguajes Formales se
presentan algoritmos cuya concepción es difícil de imaginar y luego se da la
demostración de la corrección de los mismos generalmente usando inducción. Este es el
estilo que es usado en la bibliografía clásica que se ocupa de demostrar la corrección de
las construcciones – tal el caso de los textos de Hopcroft [1] , Aho y Ullman [2],
Brookshear [9], Tremblay [10], Waite [11]-, mientras que otros textos sólo presentan los
algoritmos, sin ocuparse de su corrección – como los de ººFraser [12], Morgan [13],
Isasi [14] y Appel [16]-.
El enfoque de presentar algoritmos y luego dar la demostración de su corrección no
aporta  ideas que puedan usarse en problemas de similar estructura y  tiene las
siguientes desventajas didácticas:
• No se afianzan en el alumno las prácticas y metodologías adquiridas en las
asignaturas de construcción de algoritmos.
• No se desarrolla su capacidad para resolver problemas y diseñar soluciones.
• Se oscurece la comprensión de los algoritmos y generalmente se induce a la
memorización de las demostraciones.
Por estas razones los autores creen que se debe introducir el uso de métodos de
construcción que garantizan la corrección en todos los contextos en que sea posible,
particularmente en la  de la Teoría de Lenguajes y Autómatas, sumamente rica en
construcciones algorítmicas de distintos tipos. Consideramos que este enfoque elimina
las desventajas señaladas y permite recrear la construcción de los algoritmos, los que
pierden así que su apariencia de elementos revelados.
Cuando los objetos construidos son autómatas en lugar de algoritmos también lo usual
es presentar el autómata buscado primero y luego dar una demostración recursiva de su
corrección. En este último caso no se pueden aplicar las  metodologías antes
mencionadas y si se quiere evitar la presentación apriorística de la solución debería
realizarse el doble trabajo de inducir su construcción intuitivamente primero y luego
demostrar su corrección formalmente. Esto puede evitarse usando un método,
desarrollado previamente por los autores [15], que da una heurística para la derivación
de Autómatas Finitos a partir de su especificación, dada mediante predicados de primer
orden.
El método mencionado brinda una estrategia que facilita la obtención de soluciones,
acercando la posibilidad de que sean recreadas por el alumno y garantizando la solución
obtenida, no haciendo falta; no siendo necesaria ninguna demostración adicional.
El método se basa en la noción de invariante de estado y particularmente en la de
conjunto de invariantes fuerte (cief), que se esquematiza posteriormente. Parte de la
especificación del lenguaje de aceptación del autómata finito buscado mediante un
predicado de primer orden. Luego aplicando transformaciones según una cierta
heurística, construye conjuntamente: 1) los estados finales del autómata y sus
invariantes, 2) los estados intermedios conjuntamente con sus invariantes y la función
de transición, 3) el estado inicial y sus transiciones. La mencionada construcción se
realiza de atrás hacia delante sobre prefijos del lenguaje. Este enfoque backward en el
diseño de autómatas coincide con el principio expresado por Gries [8] para el diseño de
programas: la programación es una actividad dirigida por metas.
La necesidad de obtener implementaciones de máxima eficiencia temporal y espacial de
problemas modelables con lenguajes regulares aparece en numerosas aplicaciones
prácticas. Para ello basta lograr representarlos con cualquiera de los formalismos de la
teoría de lenguajes y muchas veces los Autómatas Finitos son los más faciles de
obtener. Cuando se ha logrado modelar un problema mediante un Autómata Finito, los
resultados de la teoría de Autómatas permiten obtener mecánicamente la solución
óptima, por lo cual no es necesario tener en cuenta ninguna consideración de eficiencia
en el proceso de diseño del autómata inicial. En otros casos, tales como el
reconocimiento de patrones léxicos, la tarea de construcción de autómatas se realiza de
la forma más clara y natural mediante la especificación previa del problema mediante
expresiones regulares. Una vez que se ha obtenido esta especificación se puede obtener
el Autómata deseado mecánicamente para lo cual se cuenta con diversas herramientas
de software como lex, flex [3][4] y Jlex [16]. No obstante la construcción de un
autómata que solucione un determinado problema no siempre resulta tarea fácil;
tampoco suele serlo la demostración inductiva de su corrección. La experiencia en la
docencia universitaria convalida la afirmación anterior, dado que alumnos, próximos a
terminar su ciclo de grado en carreras de Ciencias de Computación e Ingeniería, no son
capaces de encontrar soluciones correctas para muchos problemas prácticos.
2. Resultados obtenidos
2.1 En la construcción de Autómatas
 Se ha estudiado el uso de invariantes de estado, definéndose los conjuntos de
invariantes de estado fuertes (cief) como sigue
dado M=<K,∑, δ,q0, F>:AF ( Autómata Finito ), con K={q0, . . ,qn},
un conjunto de predicados {Pi: ∑* → Bool / 0 ≤ i ≤ n } es un conjunto de invariantes de
estado fuerte para M  – donde Pi es el invariante de qi                           ∀ α ∈ ∑* ((q0,α) 
