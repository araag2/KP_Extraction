Técnicas de mantenimiento de diversidad aplicadas a optimización evolutiva en una clase de ambientes dinámicos
﻿
En problemas de optimización dinámicos la función objetivo cambia durante la evolución de la
población, por ello es deseable contar con algoritmos que puedan adaptarse a ambientes cambiantes
reusando información obtenida en el pasado en vez de tratar a cada cambio como un nuevo
problema a optimizar. El algoritmo propuesto en este trabajo incluye 2 técnicas de mantenimiento
de diversidad en la población: el operador de recrudescencia y la inclusión dentro de la población de
inmigrantes aleatorios. El algoritmo se testeó con un conjunto de funciones de prueba generadas
con el generador de funciones de prueba DF1, se reportan los resultados obtenidos, conclusiones
preliminares y trabajo actual futuro.
1. Introducción
Los problemas del mundo real están, por lo general, asociados con grandes espacios de búsqueda,
no lineales, funciones de evaluación multimodales y, en muchos casos, no existen métodos
matemáticos para encontrar sus soluciones y, aun cuando existan, a menudo son
computacionalmente intensivos para resultar prácticos. Su complejidad computacional aumenta tan
rápidamente que cuando se trata de utilizarlos en problemas  no  sencillos resultan prácticamente
inaplicables.
La situación es peor,  porque en el proceso de resolución de problemas del mundo real no es
suficiente con solucionar el problema. El problema debe ser solucionado, una y otra vez, en función
de que el mundo está en permanente cambio.
Los métodos clásicos que generan soluciones para problemas combinatorios son matemáticos. Ellos
computan sólo una solución y cuando las condiciones del problema cambian, la nueva mejor
solución debe determinarse a partir de cero, es decir, el trabajo realizado hasta el momento, para
resolver el problema, se pierde.
Por el contrario, los métodos que buscan soluciones en vez de computarlas, entre ellos los que
pertenecen al paradigma de la computación evolutiva, parecen más convenientes para adaptarse a
circunstancias cambiantes.
Un cambio en el landscape se presenta cuando la función de fitness se modifica, esto es totalmente
posible si se considera que la definición de dicha función es  subjetiva, que expresa lo que se desea
lograr (y, por ende, lo que debe ser evitado). Las restricciones de la región factible pueden
considerarse relacionadas con los recursos del problema y esta relación cambia acorde con la
disponibilidad de los mismos, y también cuando cambian los propósitos o condiciones del
problema, cambian el landscape y las restricciones.
                                                                       
1
 El LIDIC es financiado por la Universidad Nacional de San Luis y por la ANPCyT (Agencia Nacional para promover la Ciencia y Tecnología)
Por otro lado, no todos los cambios son pequeños o suaves y cuando cambios muy grandes se
producen la similitud entre soluciones previamente encontradas y las nuevas pueden ser de poco o
ningún valor. Independientemente de esta situación, la computación evolutiva provee varias
ventajas sobre otras heurísticas cuando trata de solucionar problemas no estacionarios.
La ventaja principal es que los algoritmos evolutivos mantienen una población de soluciones y, en
consecuencia, permiten moverse de una solución a otra, dentro de la población, para determinar si
alguna  de ellas aun sigue siendo interesante y, ante el cambio, continuar la búsqueda desde
soluciones ya encontradas y no desde cero [1].
El principal problema de los AE’s tradicionales es que en general ellos convergen a un óptimo y, en
consecuencia, pierden la diversidad necesaria para explorar eficientemente el espacio de búsqueda.
Por lo tanto, una vez que la población de soluciones de un algoritmo evolutivo ha convergido
también ha perdido su habilidad para adaptarse a los cambios del ambiente, cuando los cambios
ocurren. De allí la necesidad de la inclusión, en los AE’s no estacionarios, de técnicas que
mantengan la diversidad genética en la población.
2. Algoritmo Evolutivo Propuesto
La población evolutiva está compuesta por un número constante de individuos (N) de alguna
especie hipotética. Cada individuo en la población está representado por un vector de valores reales
en el rango [-1.0,1.0]. Todos los individuos constan de un único cromosoma, el cual es directamente
el vector de fenes, es decir, en este algoritmo no se considera el nivel genotípico, solo el fenotípico.
Cada cromosoma posee n fenes, donde n es la cantidad de argumentos de la función de fitness.
Operadores Genéticos
Los operadores implementados se describen a continuación.
Selección: sólo se aplica  selección para  la reproducción de los individuos. El algoritmo
implementa la selección por torneo binario.
Recombinación: opera sobre los cromosomas. El algoritmo propuesto aplica el operador de
crossover en un punto.
Mutación: opera sobre los fenes de un cromosoma, este operador modifica aleatoriamente el valor
de un fen reemplazándolo por un valor aleatorio con una distribución uniforme escogido dentro del
rango permitido para dicho fen. Cada fen muta en forma independientemente con una probabilidad
pmut.
Técnicas de Mantenimiento de Diversidad
Recrudescencia: incrementa las probabilidades de recombinación y  mutación de una porción de la
población. Este operador se aplica en cada generación con una probabilidad precru y produce una
reorganización radical fenotípica de los individuos a los cuales se les aplica. Los individuos para
recrudescencia se seleccionan aleatoriamente con una probabilidad uniforme.
Random Inmigrantes [2]: reemplaza un porcentaje de la población con individuos generados
aleatoriamente. Este operador se aplica luego de detectar un cambio en el ambiente.
Una vez que se inicializa la población, en forma aleatoria, y se genera la función de fitness, la
población se evalúa. El criterio de terminación se determina en base a la cantidad de cambios
provocados junto con el intervalo de generaciones entre ellos.
Luego se ingresa en una iteración donde las acciones a seguir son las siguientes: incrementar el
número de generaciones, generar la nueva población empleando para ello los operadores de
selección recombinación y mutación. Una vez que se generó la nueva población, ésta se evalúa, se
calculan las estadísticas correspondientes y se aplica una estrategia de elitismo.
El algoritmo consta de una función denominada cambia_función, la cual deternima si el ambiente
deber ser modificado. Si esto debe ocurrir entonces se mantienen las estadísticas correspondientes y
luego se invocan a las rutinas que implementan cambios en la función de fitness, empleando para
ello el generador de funciones de prueba DF1, que se describe en la Sección 3.
Otra función es  ocurrió_cambio, ésta es la encargada de determinar  si se produjo el cambio. Al
sistema se le notifica la ocurrencia de un cambio en el ambiente. Cuando la función cambia se
evalúa a la población con la nueva función, dado que los individuos mantienen un valor objetivo
que ya no se corresponde con la función actual a optimizar. Se calculan estadísticas y se aplica una
estrategia elitista, se insertan los random inmigrantes en la población, se evalúa a la población, se
calculan estadísticas y se aplica una estrategia elitista nuevamente. Por último se reemplaza la
nueva población con la vieja y cuando la iteración finaliza se toman las estadísticas pertinentes.
3. Funciones de Prueba
El algoritmo está siendo testeado con el Generador de Problemas de Prueba DF1 propuesto por
Ronald Morrison y Kenneth De Jong [4], éste tiene las siguientes características:
La función de fitness utilizada para evaluar a la población se define como:
donde:  (x1,..xn) son los fenes de un individuo.
              N especifica el número de conos en el ambiente.
              (x1i,..xni) son las coordenadas del cono i, xki ∈[-1,1] con k = 1,..,n.
              Hi  es la altura del cono i, con Hi ∈ [ Hbase, Hbase + Hrango ].
              Ri es la pendiente del cono i, con Ri ∈ [ Rbase, Rbase + Rrango ].
Cada cono se especifica independientemente por su ubicación  (x1i,..xni), su altura Hi y su pendiente
Ri. La función max es la encargada de combinar a todos estos conos.
Cada vez que se invoca al generador éste produce una morfología generada aleatoriamente del tipo
descripto, en la cual los valores para cada cono se asignan basándose en dos rangos especificados
por el usuario:
                                              Hi ∈ [ Hbase, Hbase + Hrango ]
                                              Ri ∈ [ Rbase, Rbase + Rrango ]
Los tipos de cambios que permite producir el generador son:
• Cambios en la Altura de los Picos de la función Fitness
• Cambios en la Forma de los Picos de la función Fitness
• Cambios en la Ubicación de los Picos de la función Fitness
• Cada cambio puede producirse en pasos pequeños, largos o caóticos.
Para poder generar una variedad de dinámicas, se utiliza la función logística Y que es una función
no-lineal, unidimensional que genera bifurcaciones progresivamente más complejas. La función Y
se define como:
Yi = A* Y(i-1) * (1- Y(i-1))
f(x1,..xn) = maxi=1,N [ Hi – Ri * √ (x1- x1i)2 + (x2- x2i)2 + ...+ (xn- xni)2 ]
donde A es una constante e Yi es el valor de la función en la iteración i. Los valores
producidos por Y se usan en cada iteración para seleccionar el tamaño de paso para la porción
dinámica del ambiente. Se liga a la función un valor específico de A para cada entidad dinámica. Lo
que resta es transformar el rango de valores producido por Y a un tamaño de pasos escalado
apropiado para la característica dinámica particular.
La función objetivo y la función de fitness son las mismas, por ello nombrar alguna u otra es
indistinto. El algoritmo se testeó con un conjunto de funciones generadas con DF1, estas funciones
y los cambios provocados en las mismas se corresponden a las utilizadas por [5]. Ellos son:
 Caso 1: Función 2 dimensiones con 5 conos – Tamaño del Paso de la Dinámica Pequeño –
Característica Dinámica Ubicación del cono que contiene al valor óptimo,
 Caso 2: Función 2 dimensiones con 14 conos – Tamaño del Paso de la Dinámica Caótico –
Característica Dinámica Ubicación de todos los conos,
 Caso 3: Función 5 dimensiones con 5 conos – Tamaño del Paso de la Dinámica Pequeño –
Característica Dinámica Ubicación de todos los conos,
 Caso 4: Función 5 dimensiones con 5 conos – Tamaño del Paso de la Dinámica Largo –
Característica Dinámica Ubicación de todos los conos,
 Caso 5: Función 10 dimensiones con 14 conos – Tamaño del Paso de la Dinámica Caótico –
Característica Dinámica Ubicación de todos los conos,
4. Métricas de Performance
Se consideró la siguiente métrica para evaluar el grado de evolución:
Precisión [7]: Es una métrica desarrollada específicamente para ambientes dinámicos. Calcula la
diferencia entre el valor del mejor individuo de la población en la generación “justo antes del
cambio” y el valor óptimo promediado sobre la cantidad de cambios. Esta función está definida por:
                                                                                                                               K-1
Precisión = 1/K  ∑ (opt – mi)
                                                                        
i=0
donde opt  -  promedio de los valores óptimos (obtenidos en cada cambio),
           mi -  mejor valor encontrado antes del cambio i, (i ∈ [0, K-1]),
           K – cantidad de cambios de la función de evaluación.
Valores más pequeños para la métrica de precisión indican mejores resultados. En particular, un
valor de precisión 0 significa que el mejor individuo de la población se encuentra en el óptimo
global en todas las generaciones (es decir, el algoritmo nunca perdió al valor óptimo).
5. Experimentos y Resultados Preliminares
Cada caso de prueba se testeó con distintos intervalos de generaciones entre cambios producidos en
la función de fitness, éstos fueron 10, 20, 30, 40 y 50 generaciones para los casos donde la función
consta de 2 y 5 dimensiones y 30, 60, y 90 generaciones para la función de 10 dimensiones. Para
todos los casos de prueba el porcentaje de random inmigrantes varió entre un 10% a un 50% del
tamaño de la  población. Los tamaños de las poblaciones fueron 50, 150 y 200 individuos para las
funciones de 2, 5 y 10 dimensiones respectivamente. Las probabilidades de aplicación de los
operadores fueron pcross 0.25, pmut 0.5 precru 0.2, las probabilidades incremetadas para recombinación
y mutación fueron 0.5 y 0.8 respectivamente. Cada experimento consta de 20 cambios y cada
experimento se repitió 30 veces con distintas poblaciones iniciales, éstas se inicializan en forma
aleatoria.
Los resultados preliminares obtenidos son para el Caso 1 y 2 el algoritmo no tuvo ningún
inconveniente en adaptarse a todos los cambios realizados para las 30 corridas con un error de
precisión   que oscila entre 1.27 a 3.39 y 0.27 a 0.78 para cada caso respectivamente. Para el Caso 3,
de las 750 corridas realizadas en 737 de ellas el algoritmo se adaptó a todos los cambios y en las 13
restantes se adaptó al 90% de los cambios, con un error de precisión que oscila entre 15.0 a 23.8.
Para el Caso 4 de las 750 corridas realizadas en 711 de ellas el algoritmo se adaptó a todos los
cambios, 37 se adaptó al 90% de los cambios y 2 se adaptó al 80% de los cambios con un error de
precisión que oscila entre 15.1 a 24.0. Para el Caso 5, el comportamiento del algoritmo no fue
satisfactorio dado que no logró alcanzar el 50% de los cambios realizados en ninguna de las 750
corridas.
6. Conclusiones y Trabajo Futuro
El presente trabajo explora las capacidades adaptativas del algoritmo propuesto para ambientes
dinámicos. Una conclusión preliminar es que este algoritmo es capaz de adaptarse a cambios
provocados en funciones de baja dimensinalidad, pero para la función de 10 dimensiones ésto no
fue posible. Los errores de precisión obtenidos indican que, conforme aumenta la complejidad de
las funciones las soluciones encontradas se alejan de las soluciones óptimas pero aún se consideran
soluciones valiosas dado que se encuentran ubicadas en el cono que contiene al valor óptimo. En la
actualidad se trabaja en dos direcciones: 1) el estudio de técnicas de mantenimiento de diversidad
más sofisticadas orientadas a ayudar al algoritmo a adaptarse a los cambios producidos en funciones
de alta dimensionalidad. Estas técnicas son: la selección como mecanismo de diversidad [5, 6] y los
métodos de niching [3] y 2) la implementación de una técnica para detectar cambios en el ambiente
en forma automática.
