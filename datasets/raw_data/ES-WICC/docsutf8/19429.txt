System Calls no bloqueantes para threads a nivel de usuario versus Scheduler Activations en un Sistema Operativo Didáctico
﻿
El Sistema Operativo SODIUM tiene como 
uno de sus objetivos de desarrollo permitir  a 
los alumnos de las materias de  sistemas 
operativos observar y sacar conclusiones del 
funcionamiento de los distintos algoritmos 
que componen un sistema operativo,  uno de 
estos análisis está enfocado hacia la ejecución 
de procesos pesados y livianos. En una 
primera etapa se desarrollaron las funciones 
para la gestión y administración de procesos 
pesados. Luego en segunda instancia nuestro 
objetivo se centró en el desarrollo de threads 
o hilos de ejecución, comenzando 
primeramente con los hilos a nivel de usuario. 
Para ello se programó una biblioteca de hilos 
de usuario STL (SODIUM Thread Library) 
con las funciones mínimas para la gestión y 
administración de hilos que ejecuta en el nivel 
de usuario. Para poder aprovechar las ventajas 
de los hilos de usuario se inició un análisis de 
las distintas implementaciones propuesta para 
System Calls no bloqueantes. 
De tal manera que el  Sistema Operativo 
pueda mostrar la ejecución del proceso y 
dentro del proceso la ejecución de los hilos, 
permitiendo diferenciar a los alumnos 
planificación y estado de proceso vs 
planificación y estado de hilos de usuarios 
mediante los mecanismos que posee el 
SODIUM para mostrar el estado del sistema y 
guardar un archivo histórico para su análisis 
posterior. 
RESUMEN 
La necesidad de dotar al sistema operativo 
SODIUM de elementos comparativos, como 
los realizados con los diferentes algoritmos de 
planificación y los diferentes administradores 
de memoria, nos obligó a montar más de una 
biblioteca de hilos. Estás fueron en principio 
las correspondientes a POSIX Pth, 
utilizándose una codificación similar a la 
realizada para Linux y agregar una biblioteca 
de hilos definida como es la Scheduler 
Activations de la Universidad de Washington. 
De ésta no se tienen los programas fuentes, 
pero elabora conceptos que debieron ser 
actualizados pero que tiene un buen 
fundamento. Esta nueva biblioteca es 
programada por los alumnos de la 
Universidad de la Matanza y es el primer 
elemento para comparar comportamientos. 
Palabras Claves:  
Blocking, Upcall, Downcall, STL, Scheduler 
Activations – Psyche    
 
1.- INTRODUCCIÓN 
Se consideró que un sistema operativo 
didáctico debe poseer más de de un tipo de 
Hilos de Ejecución, ya que le permite al 
alumno aprender a evaluar cual sería su mejor 
opción ante un tipo de necesidad especifica en 
la ejecución de un sistema. Para esto el 
sistema operativo SODIUM debe poseer por 
lo menos dos tipos de implementaciones de 
hilos de ejecución. Para poder realizar un 
paralelismo entre las diferentes bibliotecas, en 
                      22WICC 2010 - XII Workshop de Investigadores en Ciencias de la Computación
las mismas
dos tipos d
proceso cu
bloqueante
técnica pa
que el hilo
hilo del m
que esta S
permitiend
hilo y p
propuesta 
entre  los 
(tales com
trata  de ge
procesos t
Sistemas 
planificado
administra
parametriz
procesos, 
encontrar 
bloqueo d
System C
estudiamos
sistemas o
nivel de u
implement
efectos did
la perfom
cuenta siem
sistema op
 
2. LINEA
Cuando un
existencia 
operativo y
de recurs
contexto y
ninguna lla
sus propio
sistema op
servicios, 
proceso y 
estas estru
las func
funcionam
las funcio
threads a n
Pth [06] 
 condicion
e System C
ando se so
 y las qu
ra salvar e
 que se blo
ismo proce
ystem Call
o a la bibl
asar otro 
posee una 
sistemas op
o  Linux o 
nerar estru
al como ap
Operativo
res de
dores de m
ación, aho
hilos de u
algún sis
e los proc
alls bloq
 las pro
perativos  
suario, para
ación efec
ácticos, sin
ance de e
pre el ob
erativo.  
S DE IN
DESAR
 proceso cr
no es rec
a que para 
os, planif
 eliminació
mada al si
s recursos
erativo cua
éste la ve
lo bloque
cturas de b
iones el
iento toman
nalidades 
ivel de usu
ya que 
es, estos hi
alls: las qu
licita una 
e impleme
ste bloque
quee mien
so pase a 
 no bloque
ioteca STH
a ejecuci
 diferencia 
erativos de
Windows )
cturas senc
arecen en 
s interca
l proc
emoria   m
ra agrega
suario, pe
tema que
esos por 
ueantes,  
puestas d
y bibliotec
 intentar e
tiva y se
 importar 
jecución, 
jetivo didá
VESTIG
ROLLO
ea hilos de
onocida po
su creación
icación, 
n no realiz
stema, todo
. Por lo t
ndo hay un
 como un
a si es ne
iblioteca s
ementales 
do en part
de la  b
ario del pr
esta posee
los necesita
e bloquean 
System Ca
ntan algun
o y permit
tras que ot
ejecución y
a al proce
 bloquear 
ón. Nuest
fundament
 uso gener
  ya que es
illas para l
los libros d
mbiar l
esador 
ediante un
mos a l
ro debem
 impida 
parte de l
para es
e diferent
as threads 
ncontrar un
ncilla a l
la mejora d
teniendo e
ctico de es
ACION  
. 
 usuario, 
r el sistem
,  asignació
cambios d
a el proce
 lo hace co
anto para 
a solicitud d
 pedido d
cesario. Pa
e definiero
para 
e como ba
iblioteca d
oyecto GN
 una gra
n 
el 
ll 
a 
ir 
ro 
a 
so 
al 
ra 
al 
al 
te 
os 
e 
os 
y   
a 
os 
os 
el 
os 
to 
es 
a 
a 
os 
e 
n 
te 
y 
su 
a 
n 
e 
so  
n 
el 
e 
el 
ra 
n 
su 
se 
e 
U 
n 
do
bi
li
 
C
A
S
C
d
C
in
U
no
se
co
se
re
d
im
in
su
se
es
re
si
p
d
nu
un
hi
d
si
ej
pr
re
u
pr
es
es
in
u
cumentaci
blioteca SL
mitada. 
iclo de Vid
nálisis de d
ystem Call
uando una
el kernel, 
all. Las 
terface ent
suario y 
rmalmente
rvicio del h
mo una E
rvicios del
torna un 
efinición d
posible pa
mediatame
byacente n
rvicio requ
tos casos 
moviéndol
rviendo ot
etición es r
esbloquead
evamente.
 sistema e
los de kern
e procesado
tuación en 
ecutando s
ocesadores
cursos ind
suario que 
ocesadores
peran para
 una con
habilidad d
suario y la c
ón  y gene
T con una 
a de losTh
iferentes t
 Bloqueant
 aplicación
lo realiza m
System C
re las apli
el Kern
 cuando la 
ardware su
/S o una 
 Sistema op
resultado 
e la Syste
ra el kerne
nte debido
o está listo
erido en f
el kernel 
o de la c
ros proces
ealizada, en
o y puesto
 En cualqu
n el que el 
el sea el m
res del sist
que el núm
ea menor 
 disponible
ica que p
esperan p
 que no re
 desbloquea
dición que
el kernel 
arencia de 
rando nue
cantidad de
reads de U
ratamient
es 
 requiere 
ediante u
all propor
caciones d
el. Son 
aplicación 
byacente d
interfaz d
erativo la 
dependien
m call. A
l atender u
 a que el
 para prop
orma insta
configura 
ola de eje
os. Solo 
tonces  el 
 en la col
ier aplicaci
número de 
ismo que 
ema, puede
ero de hilo
que el nú
s. Este des
odría habe
ara ser ej
alizan nad
r hilos de k
 surge de
de reconoc
comunicac
stra propia
 funciones
suario 
os para las
el servicio
na System
cionan la
e nivel de
utilizadas
requiere un
el sistema,
e red. Los
respuesta y
do de la
 veces es
na petición
 hardware
orcionar el
ntánea. En
al proceso
cutando y
cuando la
proceso es
a de listos
ón que use
procesos o
el número
 darse una
s de kernel
mero  de
perdicio de
r hilos de
ecutados y
a, mientras
ernel. Esto
bido a la
er hilos de
ión entre el
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
                      23WICC 2010 - XII Workshop de Investigadores en Ciencias de la Computación
kernel de sistema operativo y el planificador 
de la biblioteca a nivel de usuario. 
La alternativa: Scheduler Activations 
Los scheduler activations [02] fueron 
propuestos originalmente por Anderson 
(Universidad de Washington). Sus autores 
implementaron este mecanismo en la cima de 
la biblioteca de hilos. Este sistema 
desafortunadamente esta fuera de uso y su 
fuente nunca fueron publicados. Sin embargo, 
esto sirvió como base para determinar una 
nueva codificación para bibliotecas de hilos. 
Así surge la biblioteca SLT_SA reiseñada y 
desarrollada en forma experimental para el 
SODIUM..  
Descripción  de los SODIUM Scheduler 
Activations 
Permiten al kernel notificar a la aplicación 
cuando ejecuta una decisión de planificación 
sobre uno de sus hilos. Al igual que Anderson 
usamos el término “Scheduler Activation” 
porque cada evento en el kernel causa que el 
sistema de hilos de Usuario reconsidere su 
decisión de planificación. Esto se logra con 
un mecanismo que introduce un tipo especial 
de System Call llamada upcall [04] a 
diferencia de una System Call tradicional que 
desde una aplicación hacia otra aplicación es 
definida como una downcall. Una upcall es 
una llamada desde el kernel hacia la 
aplicación. Un Scheduler Activation es un 
contexto de ejecución prácticamente similar 
al modo de manejo que realiza un hilo de 
kernel, utilizando  para su implementación de 
los hilos de kernel nativos del sistema y 
agregándose simplemente ciertas  
funcionalidades que son necesarias para 
upcalls. Cuando una aplicación usa un hilo de 
kernel clásico, crea dicho hilo y designa una 
función para el sistema operativo ejecute. Lo 
opuesto ocurre con los Scheduler Activations. 
El sistema operativo decide cuando un 
Activation es necesitado. Luego lo crea y 
comienza a ejecutar una función de Usuario 
especifica.  
Soporte del Kernel para Scheduler 
Activations 
Pedir soporte de kernel es una solución 
utilizada para  permitir a los hilos de Usuario 
que sean ejecutados mientras otros hilos 
esperan por un servicio del kernel y 
permanecen bloqueados. Los Scheduler 
Activation provén este Soporte al crear un 
nuevo hilo de kernel y notificar a la 
biblioteca de hilos de usuario cuando un 
hilo de usuario se bloquea. En este sentido 
otro hilo de usuario puede ejecutar en vez de 
tener la aplicación bloqueada en el kernel. 
De esta manera la eficiencia de los hilos de 
usuario se mantiene intacta. 
Los hilos de Kernel se bloquean y resumen 
sin notificar a los hilos de usuario 
3. RESULTADOS OBTENIDOS/ 
ESPERADOS 
Los resultados obtenidos en esta primera 
etapa son hasta el momento satisfactorios en 
términos de ejecución y en términos de 
desarrollo. 
La perfomance de la nueva biblioteca es 
pobre referente a las bibliotecas utilizadas por 
Linux, tales como la GNU Pth, contra la cual 
se realizan los estudios comparativos hasta el 
momento. 
Está en estudio ampliar las funciones de 
biblioteca para realizar estudios más 
completos, nuevas funcionalidades al Kernel 
y agregar la biblioteca para manejos de hilos 
generada por el sistema operativo PSYCHE, 
como un elemento más de comparación, a 
pesar de que ésta no permite el uso de hilos 
de kernel. 
Los primeros informes sobre el 
comportamiento entre diferentes elementos se 
muestran a continuación 
                      24WICC 2010 - XII Workshop de Investigadores en Ciencias de la Computación
 4. FORMACION DE RECURSOS 
HUMANOS 
 
Se realizó: 
• la primera transferencia de los 
conocimientos obtenidos  a los 
alumnos que cursan Sistemas 
Operativos, ya que realizaron el 
análisis de la arquitectura y las 
distintos formatos de ejecutables 
conjuntamente con el análisis del 
SODIUM e intervinieron en el 
desarrollo de los administradores. 
• Transferencia de conocimientos  a los 
alumnos de Sistemas de Computación 
II de la Universidad de La Matanza y 
a los alumnos de Sistemas Operativos 
de la Universidad Tecnológica 
Nacional, Regional  Buenos Aires. 
• Publicación de los avances en la 
investigación en dos congresos 
internacionales. 
• Se prevé continuar con las 
publicaciones en otros congresos 
internacionales   
Se está estudiando: 
•  el realizar convenios de colaboración 
con otras universidades nacionales  
estatales y privadas de las cuales 
recibimos ofrecimientos de 
colaboración, con el objetivo de  
intercambiar conocimientos y ampliar 
los alcances del sistema.  
En esta línea de investigación tenemos: 
• dos trabajos de la Maestría en 
informática  en curso. 
• colaboran también en el desarrollo  un 
becario,  un alumno de Ingeniería 
electrónica y un alumno que cursa los 
primeros años de la carrera de 
Ingeniería en informática. 
• Recibimos la colaboración además de 
alumnos que ya han cursado la 
materia y han desarrollado parte del 
SODIUM en los años anteriores.  
5.
