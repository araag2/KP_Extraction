Aplicación de visualización de grafos utilizando servicios web
﻿
La Visualización es la ciencia de representar datos visualmente con el fin de lograr comunicación o entendimiento [9], aportando metodologías y técnicas para extraer información significativa de conjuntos de datos
complejos por medio del uso de gráficos interactivos y de imágenes. El crecimiento vertiginoso en la cantidad
de información en distintos campos de aplicación, induce la producción de grandes volúmenes de datos difíciles
de comprender y analizar sin un soporte visual. Por otro lado cada vez se acentúa más la tendencia a desarrollar
ambientes distribuidos de visualización utilizando Servicios Web. En base a lo expuesto, se pretende desarrollar
una aplicación distribuida basada en Servicios Web para visualización de grafos que sea interactiva y efectiva
utilizando el paquete JWSDP (Java Web Service Developer Pack).
Keywords: Visualización, Servicios Web, Visualización de información, Visualización distribuida, Visualización de Grafos
1. INTRODUCCIÓN
La Visualización es la ciencia de representar datos visualmente con el fin de lograr comunicación
o entendimiento [9], aportando metodologías y técnicas para extraer información significativa de conjuntos de datos complejos por medio del uso de gráficos interactivos y de imágenes.
El crecimiento vertiginoso en la cantidad de información en distintos campos de aplicación, induce
la producción de grandes volúmenes de datos difíciles de comprender y analizar sin un soporte visual.
Es aquí donde la visualización hace su aporte significativo y la exploración de distintos conjuntos de
datos se beneficia enormemente si cuenta con un soporte adecuado de visualización.
De la mano de la creciente demanda en visualización de grandes volúmenes de datos, está creciendo la tendencia a desarrollar ambientes distribuidos de visualización. La idea básica consiste en
distribuir el pipeline clásico de visualización a través de un sistema distribuido, más precisamente
Internet y la Grid, manteniendo la estructura del pipeline de visualización tradicional y proveyendo la
capacidad de dividir las visualizaciones en distintas componentes para luego integrarlas. Esto permite
que cada una de esas componentes sea ejecutada en el recurso distribuido más apropiado.
Para lograr un sistema de tal porte es necesario contar con una arquitectura acorde. Se debe diseñar
entonces una arquitectura que permita la visualización en escritorio utilizando recursos distribuidos
que puedan combinarse para resolver distintos problemas de visualización.
Una alternativa para alcanzar tal arquitectura consiste en introducir el concepto de Servicios Web.
*Becaria de la Comisión de Investigaciones Científicas (CIC) de la provincia de Buenos Aires, Argentina.
(a) Modelo Unificado de Visualización [16].
(b) Arquitectura MUV distribuida [3].
Figura 1: Modelo Unificado de Visualización.
1.1. Servicios Web
Los Servicios Web se basan en el concepto de Arquitecturas Orientadas a Servicios (SOA), y
permite que los componentes de software, incluyendo objetos y procesos de diferentes sistemas, sean
expuestos como servicios. Un Servicio Web es un servicio que puede ser utilizado a través de la
Web [15]; se trata, en esencia, de una colección de estándares y protocolos que permiten al usuario
efectuar solicitudes de procesamiento a sistemas remotos a través de un lenguaje común y utilizando
protocolos de transporte comunes (HTTP, SMTP).
Bajo el concepto de Servicios Web, se divide el pipeline de visualización en distintos servicios,
que podrían correr en distintas máquinas situadas en distintas locaciones geográficas, permitiendo que
se utilice el mejor recurso disponible para cada tarea logrando así la mejor performance posible para
cada etapa.
En el artículo “Servicios Web aplicados a la Visualización” [3] se presentó una arquitectura distribuida para el pipeline MUV (Modelo Unificado de Visualización) [17], tomando cada etapa del
pipeline y transformándola para convertirla en un Servicio Web.
El Modelo Unificado de Visualización refleja tanto los estados por los que van pasando los datos
desde que ingresan al sistema de visualización hasta que son finalmente visualizados, como las transformaciones intermedias que hacen posible su evolución a lo largo de los diferentes estados.
En la figura 1(a) se ilustra el pipeline MUV, y en la figura 1(b) la alternativa distribuida.
1.2. Aplicación distribuida para Visualización de Grafos utilizando Servicios Web
En base a la investigación desarrollada anteriormente ([3]), se pretende desarrollar una aplicación
aplicación distribuida basada en Servicios Web para visualización de grafos utilizando el paquete JWSDP (Java Web Service Developer Pack, http://java.sun.com/webservices/downloads/previous
/webservicespack.jsp). Este paquete consiste en un conjunto de herramientas y librerías destinadas al
desarrollo de Servicios Web en Java.
La aplicación consiste básicamente en una herramienta de visualización de grafos donde la carga
de procesamiento se encuentra en el servidor, mientras el usuario simplemente se limita a efectuar
solicitudes sobre un conjunto de datos, ubicado también del lado del servidor.
1.2.1. Interacciones
Dado que una visualización excede a la generación de imágenes, debiendo poder constituirse en
una herramienta que permita la exploración de los datos subyacentes, resulta necesario lograr interacciones fluidas entre los Servicios Web y sus clientes. Esta tarea presenta grandes dificultades. Mediante esta aplicación será posible experimentar respecto a las interacciones necesarias para brindar al
usuario una visualización útil y efectiva. Se pretende que la aplicación sea lo suficientemente flexible
como para proveer un esquema de interacción válido, es decir que permita al usuario no sólo generar
y mostrar una imagen renderizada, sino también interactuar de diferentes maneras con la vista a fin de
explorar más efectivamente los datos. Se enfatizará entonces, en el estudio y desarrollo de las interacciones necesarias para lograr una visualización efectiva en un ambiente distribuido. Siendo algunos
de los desafíos:
Definir qué interacciones son necesarias y cuáles no en una visualización de grafos efectiva,
logrando así una relación equilibrada entre la interactividad y el costo computacional.
Clasificar las interacciones seleccionadas anteriormente determinando cuáles se aplican sobre
la vista y cuáles sobre los datos. Según la interacción que se aplique, será necesario retroceder
a etapas anteriores del pipeline, determinando esta condición el grado de complejidad de la
misma.
1.2.2. Visualización procesada en el cliente
Una vez validado el primer prototipo se pretende en una segunda etapa explorar distintas alternativas de distribución de carga de procesamiento. Una alternativa consiste en que la carga de
procesamiento ya no se encuentre en el servidor, sino que la ejecución principal se lleve a cabo en
la estación de trabajo del cliente, ya sea utilizando software instalado en la estación de trabajo del
cliente o descargado de un servidor en la forma de applet de java.
El objetivo general consiste en lograr un equilibrio entre la distribución de carga que permita el
desarrollo de una aplicación eficiente e interactiva.
2. AGRADECIMIENTOS
El presente trabajo fue parcialmente financiado por los PGI 24/ZN12 y 24/N020, Secretaría General de Ciencia y Tecnología, Universidad Nacional del Sur, Bahía Blanca, Argentina.
