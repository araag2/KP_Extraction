Una arquitectura de software para soportar agentes móviles inteligentes
﻿Una Arquitectura de Software para Soportar Agentes Móviles 
Inteligentes 
Edgardo A. Bellonit - Marct:lo Campo 
ISISTAN - Facultad de Ciencias Exactas 
Universidad Nacional del Centro de la Provincia de Buenos Aires 
Campus Universitario - Paraje Arroyo Seco (7000) Tandil, Bs. As., Argentina 
t También, Comisión de Investigaciones Científicas de la Provincia de Buenos Aires 
e-mail: {ebelloni.mcampo}@exa.unicen.edu.ar 
1 Introducción 
Los sistemas de agentes móviles representan actualmente uno de los paradigmas mas prometedores para la 
programación de sistemas ampliamente distribuidos y heterogéneos. Este tipo de sistemas involucra dos concep­
tos básicos: sitios servidores de recursos y agentes que poseen la habilidad de trasladarse a los sitios para acce­
der a sus recursos, o contactarse con otros agentes [lOJ. La movilidad de los agentes, es decir su habilidad de 
migrar de un sitio él otro, constituye la principal diferencia que este enfoque tiene con respecto a otras alternativas 
existentes para el desarrollo de sistemas distribuidos, como los de remote procedure call o remote evaluation. 
Las principales ventajas, identificadas en el uso de agentes móviles, radican en: la potencial reducción de 
costos de comunicación global mediante la migración de las unidades de computación a los datos; y la posibili­
dad de distribuir computaciones complejas en diferentes hosts, posiblemente heterogéneos. Adicionalmente, los 
agentes móviles, han sido reportados en la literatura [5 J como de gran util idad para el desarrollo de aplicaciom:s 
de comercio electrónico, recuperación de información distribuida, worktlow y groupware, entre otras. Tales 
aplicaciones se benefician al utilizar agentes móviles al explotar sus potenciales capacidades de: procesamiento 
autónomo y asincr6nico; adaptabilidad dinámica a los cambios de su ambiente de ejecución; y tolerancia a fallas. 
Los lenguajes orientados a objetos poseen características que permiten satisfacer parte de los requerimientos 
de la programación orientada a agentes [8] y en particular de agentes móviles [11]. Un agente puede modelarse 
mediante un objeto cuyos métodos representan sus habilidades, y las variables de instancia su estado mental. De 
esta forma, un objeto encapsulará, en sus métodos capacidades comportamentales de un agente y su conoci­
miento estará dado por el estado de sus variables de instancia. 
Actualmente, se ha desarrollado un número importante de sistemas que utilizan el lenguaje orientado a objetos 
Java como soporte de programación de agentes móviles. Ejemplos de estos sistemas de soporte basados en Java, 
son: Aglets [4], Odissey lú], y Voyager [9J. Las ventajas que Java provee a la tecnología de agentes móviles, son 
fundamentalmente: su soporte multiplataforma; y la ubiquidad de su máquina virtual, que facilita la disemina­
ción de agentes móviles en Internet. Adicionalmente, Java presenta características no encontradas en otros len­
guajes que permiten la implementacion directa de agentes móviles [11]. Por ejemplo, Java facilita la migración 
del código del agente y su estado mediante mecanismos de serialización de objetos y carga dinámica de clases 
locales o remotas. Por otra parte, el soporte de comunicaciones en redes provisto por Java, incluye sockets, co­
municaciones URL, y un protocolo para el acceso a objetos distribuidos denominado remote method invocation 
(RMI). 
No obstante, y a pesar de las bondades que los lenguajes orientados a objetos presentan para la programación 
orientada a agentes en general, y Java en particular para agentes móviles, estos lenguajes adolecen, sin embargo, 
de limitaciones. Estas limitaciones se evidencian a la hora de tratar con las actitudes mentales de los agentes 
debido a que se deben implementar distintos algoritmos de inferencia sobre las variables de instancia lJue repre­
sentan el conocimiento del agente. Estos algoritmos son, en general, costosos de implementar y poco flexibles a 
cambios [2]. 
Por otra parte, los lenguajes lógicos permiten representar actitudes mentales en forma declarativa por medio 
de cláusulas lógicas. Estas cláusulas son interpretadas por algoritmos deductivos que, en el contexto de la pro­
gramación de agentes, dan origen a razonamientos dependientes del conocimiento propio de los agentes. Desa­
fortunadamente, los lenguajes lógicos presentan deficiencias en la programación de agentes debido a su imposi­
bilidad de encapsular información y tratar con conocimiento privado [2). 
En este artículo se presenta un enfoque para soportar el diseño y programación de agentes móviles inteligen­
tes. Este enfoque es materializado esencialmente por una arquitectura de software basada en agentes móviles 
desarrollados en JavaLog [1][2), un lenguaje que integra los paradigmas de programación lógica y de orientación 
a objetos. 
Wicc 2000 - 65 
La siguiente sccción describe la arquitectura de software básica necesaria para materializar el enfoque. Se ca­
racterizan los difo.:rentes componentes de esta arquitectura, y se describe cómo los agentes móviles integran el 
paradigma de programación lógica al de objetos. En la sección 3, se resumen los trabajos experimentales que se 
están llevando a cabo para evaluar la efectividad del enfoque. Por último. en la sección 4, se delincan algunas 
conclusiones. 
2 Infraestructura para el soporte de Agentes Móviles Inteligentes 
La siguiente figura presenta una arquitectura de software para el soporte de agentes móviles inteligentes. Esta 
se basa esencialmente en la arquitectura genérica de agentes móvih:s basados en Java descripta en 112]. El dia­
grama utiliza notación UML [7]. 
Servidor de Agentes Móviles Inteligentes 
Administrador de J Aplicación J Administrador de Acceso a Servidores Comunicaciones de Aplicaciones "1 Externa 
entre Agentes 
-1 I   r--- < 
,-, Brain Servidor de rz Administrador Agente Móvil ", ," Agentes Móviles de Agentes Inteligente Inteligentes (Brainlet) 
! Q -1 Módulo .......... !I.... Lógico 
1 
Administrador 
11 
de Conllabilidad 
I J Administrador Administrador de Seguridad de Directorios 
Descripción de CompoDt'ntes 
En esta arquitectura se reconocen diferentes componentes principales: un administrador de agentes; un admi­
nistrador de comunicaciones entre agentes; un administrador de seguridad; un administrador de confiabilidad; un 
portal servidor de aplicaciones; y un administrador de directorios. 
El administrador de ag('ntes es responsable por la recepción de agentes para su ejecución en el host local, y del 
envío de agentes para ser ejecutados en hosts remotos. Antes de efectuar la migración de un agente, este admi­
nistrador lo serializa junto con su estado. Luego, delega el envío de esta representación serial izada del agente al 
administrador dl' confiabilidad, el cual asegura que el agente es recibidu por el administrador de agentes curres­
pondiente en el host destino. Al recibirlo, esta componente recunstruye el agente y los objetus que el referencia, a 
partir de su representación serial izada, creando su contexto de ejecución. 
El administrador de seguridad es responsable por la autenticación del agente antes de que este comience su 
ejecución. La máquina virtual Java subyacente invocará automáticamente a este componente para autorizur cual­
quier intento de utilizar recursos del sistema por parte de los agentes. 
El administrador de comunicaciones entre agentes facilita la comunicación entre agentes móviles dispersos en 
diferentes hosts, Los agentes pueden utilizar d administrador de directorios para identificar la locali.:aclón de un 
servidor de aplicaciones y luego migrar al host en el cual este servidor esta localizado. El portal servidor de apli­
caciones represl'nta para los agentes un punto de acceso a aplicaciones externas al sistema de agentes móviles, 
residentes en el IlOst local. como por ejemplo acceso a servidures de bases de datos. 
Esta arquitectura presnibe que los agentes constituyen objetos java compuestos, con capacidades de movili­
dad, persistencia, y comunicación con otros agentes. Cada agente ejecuta en su propio hilo de ejecución y esta 
implementado con un estilo de programación basado en call-backs, es decir basado en el modelo de delegación 
de eventos de J;lva. Durante su ciclo de vida, un agente recibe diferentes categorías de eventos en respuesta a sus 
acciones. Por l'jemplo, si el agente migra hacia otro host ocurrirá un evento de movilidad justo antes y justo 
despu¿s de la migración. En este caso, son invocados los métodos call-back correspondientes (beforeDispatch y 
afterArrival). De esta manera, cada evento permite al agente determinar cómo reacciunar. 
Brainlets: Agentes móviles que integran objetos y lógica 
Los agentes  ñóviles descriptos son implementados con JavaLog [1 ][21, un lenguaje que integra los paradig­
mas de orientación a objetos (Java) y de programación lógica (Prolog). 
JavaLog utiliza objetus para modelar las habilidades de los agentes y cláusulas lógicas para modelar el estado 
mental de dich\.s agentes. Las habilidades de los agentes pueden estar representadas pur capacidades de acción 
Wicc 2000 - 66 
como por capacidades de comunicación con otros agentes, mientras que el estado mental puede presentarse en 
forma de creencias, intensiones y compromisos. JavaLog define al módulo como concepto básico de manipula­
ción. En este sentido, un objeto y un método son vistos como módulos. Un objeto es un módulo que encapsula 
datos y un método es un objeto que encapsula comportamiento 
Los agentes móviles cllnstruidos con JavaLog son denominados Brainlets. Esto se debe a que estos agentes 
encapsulan un objeto compuesto denominado brain. Este objeto es una instancia de un interprete de módulos 
lógicos que utiliza cláusulas Prolog. Este interprete está implementado en Java y permite utilizar objetos dentro 
de cláusulas lógicas, así como embeber módulos lógicos dentro de código Java (1][2]. Cada agente es una instan­
cia de una clase que puede definir parte de sus métodos en Java y parte en Prolog. La definición de los métodos 
de una clase en JavaLog puede estar compuesta por varios módulos lógicos definidos en métodos y módulos 
lógicos referenciados por variables de instancia. 
3 Trabajo Experimental 
El enfoque presentado, una arquitectura para el soporte de agentes móviles inteligentes, representa una de las 
línt:as actuales inmersas en el proyecto de investigación y desarrollo de agentes inteligentes en el dominio de 
socialwan.: 1, del ISISTAN. 
En este contexto, se están desarrollando diferentes sistemas de información, multiagente e integrados a la 
world wide web, para asistir en las distintas actividades sociales de los miembros de diferentes comunidades 
virtuales. Estas actividades incluyen, por ejemplo, comercio electrónico solidario, planificación de reuniones, y 
convocatorias u ofrecimientos de voluntarios a campañas solidarias. 
Las aplicaciones descriptas pueden verse beneficiadas con el uso de agentes móviles representando a diferen­
tes miembros de una comunidad virtual al desarrollar actividades sociales en comunidades remotas. Tales agentes 
podrían transportar las preferencias y restricciones de su representado, encapsulando estas actitudes mentales en 
forma declarativa. 
4 Conclusiones 
En este artículo fue presentado un enfoque para el desarrollo de agentes móviles. Este enfoque es materializa­
do por una arquitectura de software que integra los paradigmas de programación lógica y de orientación a objetos 
para soportar el diseño y programación de agentes móviles inteligentes. 
La efectividad del enfoque está siendo evaluada al ser aplicado en el desarrollo de sistemas multiagcnte en el 
dominio de socialware. 
