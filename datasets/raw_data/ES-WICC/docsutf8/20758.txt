Extensión de la argumentación rebatible para considerar etiquetas
﻿
Esta línea de investigación explora la incorporación
del manejo de meta-información a la Programación
en Lógica Rebatible (DeLP) a través de etiquetas. El
propósito principal de esta incorporación es brindar
la posibilidad de definir un criterio de comparación
apropiado para el dominio de aplicación específico.
Mediante este artículo se introduce -DeLP, una extensión a DeLP que incorpora el manejo de metainformación a través de etiquetas y permite basar en
ella el criterio de comparación por mejor. Además se
presenta un ejemplo de aplicación mediante el cual se
ilustran sus ventajas sobre DeLP.
1. INTRODUCCIÓN Y
MOTIVACIONES
La Programación en Lógica Rebatible (DeLP,
[3]), un exponente de la Argumentación Rebatible, constituye un formalismo efectivo para representar y razonar acerca de conocimiento tentativo y potencialmente contradictorio. Resulta
muy adecuado para aplicaciones donde se agrega
o quita información en forma dinámica, y por lo
tanto conclusiones obtenidas previamente pueden
quedar invalidadas. Estas características hacen de
DeLP una herramienta atractiva para representar el conocimiento y definir el razonamiento de
agentes inteligentes deliberativos.
No obstante, el éxito de la aplicación de DeLP
a un dominio específico depende en gran medida de la definición de un criterio de comparación entre argumentos que capture una noción de
mejor argumento apropiada para dicho dominio.
Esta noción de mejor argumento, específica para
el dominio, podría basarse en información más
allá de la modelada a través de las propias reglas
del programa, por ejemplo información acerca de
las reglas o meta-información (confiabilidad de la
Financiado parcialmente por Consejo Nacional de
Investigaciones Científicas y Técnicas (CONICET) PIP
5050, y por la Agencia Nacional de Promoción Científica y Tecnológica (PICT 2002 Nro. 13096)
fuente, probabilidad, grado de certeza, prioridad,
etc).
Este trabajo introduce -DeLP, una extensión a DeLP que incorpora el manejo de metainformación a través de etiquetas y permite basar
en ella el criterio de comparación por mejor.
A continuación se describe la estructura del
artículo. En la sección 2 se introduce un ejemplo de aplicación que se utilizará para ilustrar los
conceptos e ideas tratados en el resto del artículo.
En la sección 3 se muestra como modelar el ejemplo de aplicación empleando DeLP. En la sección
4 se introduce -DeLP y en la sección 5 se emplea
para incorporar el tratamiento de incertidumbre
posibilística al ejemplo. Finalmente, en la Sección
6, se presentan las conclusiones del artículo y se
menciona el trabajo futuro.
2. EJEMPLO DE APLICACIÓN
Consideremos un agente inteligente que asiste
a una persona en la compra de un auto. Concretamente debe razonar acerca de diferentes características del vehículo para determinar si éste se
encuentra o no en buen estado.
Asumamos que el agente cuenta con la siguiente
información general:
Un auto se encuentra en buen estado si su
motor y su carrocería están en buen estado.
Si el motor suena bien, existen razones para
pensar que se encuentra en buenas condiciones.
La aprobación de un mecánico constituye
una razón fuerte para pensar que el motor
se encuentra en buen estado.
Si fue usado como taxi, existen razones para
pensar que el motor no se encuentra en buen
estado.
1
Si es de color blanco y funciona a gas es bastante posible que haya sido usado como taxi.
Además, el agente dispone para un auto en particular de la siguiente información:
es de color blanco
funciona a gas
el motor suena bien
su carrocería se encuentra en buen estado
El agente podrá incorporar nueva información
acerca del vehículo en forma dinámica, variando
sus conclusiones consecuentemente.
3. EL EJEMPLO USANDO DeLP
DeLP constituye un formalismo que permite representar y razonar acerca de conocimiento tentativo y potencialmente contradictorio de forma
muy natural.
Se utilizará DeLP como formalismo de representación y razonamiento para el agente, empleando especificidad generalizada [3, Sección
3.2.1] como criterio de comparación de argumentos. A continuación se presenta un programa
DeLP P que modela la información descripta en
la sección anterior:
P=



abe ← bno motor, bno carr
bno motor —< suena bien motor
bno motor —< mecanico da ok
∼auto buen estado —< fue taxi
fue taxi —< color blanco, tiene gas
color blanco
tiene gas
suena bien motor
bno carr



El comportamiento del agente se define como
sigue. Sea q un literal, el agente concluirá q si
q se encuentra garantizado a partir de P. Concluirá ∼q si ∼q se encuentra garantizado a partir
de P. Recordar que nunca pueden estar garantizados dos literales complementarios, como se muestra en [3, Sección 2.9]. Finalmente, presentará indecisión respecto a q, si tanto q como ∼q se encuentran no garantizados a partir de P.
Analicemos como razonará y que concluirá el
agente acerca del estado del auto (abe) a partir
del programa P. En la figura 1 se muestran los
árboles de dialéctica asociados al análisis de la
garantía de abe y ∼abe. Los argumentos involucrados son 〈A1, abe〉 y 〈A2,∼abe〉, donde:
A1=
{ bno motor —< suena bien motor }
y
A2=
{ ∼auto buen estado —< fue taxi,
fue taxi —< color blanco, tiene gas
}
Figura 1: Razonamiento acerca del estado del auto a partir de P.
Tanto abe como ∼abe se encuentran no garantizados y por lo tanto el agente presentará indecisión. La razón de esta situación de indecisión
es que ninguno de los dos argumentos en conflicto, A1 y A2, es mejor que el otro de acuerdo al
criterio de comparación.
Supongamos que el agente averigua que el auto
efectivamente fue usado como taxi. El programa
P1 = P∪{fue taxi} refleja el nuevo conocimiento
del agente. A partir de P1 puede construirse un
nuevo argumento 〈A3,∼abe〉 para ∼abe, donde
A3=
{ ∼auto buen estado —< fue taxi }
que se basa en menos información rebatible que
〈A2,∼abe〉 y por lo tanto constituye un argumento más fuerte. No obstante, como se muestra en
la figura 2, la conclusión obtenida por el agente
acerca del estado del auto vuelve a ser indecisión.
La causa de la indecisión es la misma que antes:
ninguno de los argumentos en conflicto es mejor
que el otro de acuerdo al criterio de comparación.
Nótese que no es posible romper la indecisión
agregando 〈A3,∼abe〉 como hijo de 〈A1, abe〉 en
el árbol de dialéctica para 〈A2,∼abe〉, ya que esto implicaría una situación de doble bloqueo [3,
Sección 4.1].
Figura 2: Razonamiento acerca del estado del auto a partir de P1.
Por último, el motor del auto es revisado por
un mecánico, quien diagnostica que se encuentra en buen estado. El agente incorpora esta
información dando lugar a un nuevo programa
P2 = P1 ∪ {mecanico da ok}, lo que le permite
construir el argumento 〈A4, abe〉, donde:
A4=
{ bno motor —< mecanico da ok }
Nuevamente, como se muestra en la figura 3, la
conclusión del agente acerca del estado del auto
es indecisión.
Figura 3: Razonamiento acerca del estado del auto a partir de P2.
4. PROGRAMACIÓN EN LÓGICA
REBATIBLE CON ETIQUETAS
(-DeLP)
El éxito de la aplicación de DeLP a un dominio
específico depende en gran medida de la definición de un criterio de comparación entre argumentos que capture una noción de mejor argumento apropiada para dicho dominio. Esta noción de mejor argumento, específica para el dominio, podría basarse en información más allá de
la modelada a través de las propias reglas del programa. Por ejemplo, podría basarse en información acerca de las reglas (meta-información) como
probabilidad, grado de certeza, confiabilidad de la
fuente, etc.
Esto motiva la siguiente idea: enriquecer el
lenguaje DeLP de forma que cada claúsula pueda tener cierta meta-información asociada. La
meta-información asociada a una claúsula es
simplemente información acerca de o relativa
a dicha claúsula. Además, la meta-información
asociada a las reglas permitirá sintetizar metainformación asociada a argumentos, en la que
luego se basará el criterio de comparación por
mejor.
-DeLP es una forma de materializar la idea
recién expresada, utilizando etiquetas para llevar
la meta-información. Más concretamente -DeLP
extiende DeLP requiriendo la especificación de:
una etiqueta junto a cada claúsula del programa.
una función ALS (Argument Label Synthesis) que permite determinar la etiqueta
(meta-información) asociada a un argumento en base a las etiquetas de las claúsulas que
lo componen.
una relación o criterio de comparación por
mejor entre etiquetas de argumentos BL
(Better Label).
Describamos informalmente como se obtiene la
etiqueta asociada a un argumento mediante la
función ALS. Para ello consideremos el carácter
recursivo de la noción de argumento. Supongamos
que contamos con un argumento 〈A, a〉. Entonces,
o bien a es un hecho en el programa y por lo tanto A = ∅, o a se derivó utilizando una regla r
con cabeza a y cuerpo b1, b2, ..., bn. En este último caso, A resulta de unir B1, B2, ..., Bn, donde
〈Bi, bi〉 es subargumento de 〈A, a〉 para 1 ≤ i ≤ n,
además de la regla r si es que r es rebatible.
A partir de lo anterior, la etiqueta asociada a 〈A, a〉 en base a la función ALS es
〈A, a〉 = ALS([], à) si a es un hecho y 〈A, a〉 =
ALS([〈B1, b1〉, 〈B2, b2〉, ..., 〈Bn, bn〉], r) en caso contrario, donde à y r son las etiquetas asociadas al hecho a y a la regla r por el programa,
respectivamente.
Ahora que sabemos como sintetizar la etiqueta
para un argumento, describamos el funcionamiento del sistema. La función de síntesis de etiqueta
de argumento ALS permite sintetizar la etiqueta (meta-información) asociada a un argumento a
partir de las etiquetas de las claúsulas que lo componen. Finalmente, el criterio de comparación por
mejor BL define la noción de derrota entre argumentos en que se basa el proceso dialéctico.
A continuación se ilustran los conceptos recién
introdicidos utilizando el ejemplo de aplicación
presentado en la sección 2.
5. EL EJEMPLO USANDO -DeLP
PARA INCORPORAR EL
TRATAMIENTO DE
INCERTIDUMBRE POSIBILÍSTICA
A modo de ilustración, utilizaremos -DeLP
para incorporar el tratamiento de incertidumbre
posibilística al ejemplo de la sección 3. El resultado es equivalente a P-DeLP, una extensión a
DeLP introducida en [2].
Cada claúsula del programa tendrá asociado,
mediante una etiqueta, un valor entre 0 y 1.
Este valor constituye una medida de necesidad o
certeza para la claúsula. En particular, la etiqueta
asociada a una regla establece el grado de certeza
con el que el consecuente se sigue del antecedente.
Como es de esperarse, las reglas estrictas y hechos
siempre tendrán factor de certeza asociado 1.
A continuación se muestra el programa -DeLP
P correspondiente al programa DeLP P.
P=
8
>
>
>
>
>
>
<
>
>
>
>
>
>
:
1) abe ← bno motor, bno carr : [1]
2) bno motor —< suena bien motor : [0.3]
3) bno motor —< mecanico da ok : [0.9]
4) ∼auto buen estado —< fue taxi : [0.5]
5) fue taxi —< color blanco, tiene gas : [0.2]
6) color blanco : [1]
7) tiene gas : [1]
8) suena bien motor : [1]
9) bno carr : [1]
9
>
>
>
>
>
>
=
>
>
>
>
>
>
;
La claúsula etiquetada 2) establece que si el
motor suena bien, entonces se encuentra en buen
estado con un grado de certeza de 0.3.
La claúsula etiquetada 3) establece la existencia de una conexión más fuerte entre antecedente
y consecuente: si el mecánico da su aprobación,
entonces el motor se encontrará en buen estado
con un grado de certeza de 0.9.
Finalmente debemos definir la función ALS
(Argument Label Synthesis) y la relación BL
(Better Label) de modo que nuestro sistema se
comporte como P-DeLP. Esto es, ALS deberá retornar como resultado el menor entre los valores
correspondientes a los literales del cuerpo de la
regla y el asociado a la regla por el programa
recibidos como parámetro. BL captura la relación
“posee mayor grado de certeza”.
Más formalmente:
ALS([b1, b2, ..., bn], c) = MIN(b1, b2, ..., bn, c)
BL(À, B) = À > B
De acuerdo a la semántica de P-DeLP, la etiqueta asociada a un argumento mediante la función ALS corresponderá al factor de certeza para
el argumento. La definición de BL como “mejor
si mayor grado de certeza” permite resolver la
comparación entre argumentos en favor del más
certero.
Consideremos nuevamente las tres situaciones
analizadas en la sección 3, pero esta vez con
-DeLP. Observar que se contará con los mismos argumentos que en las tres situaciones para
DeLP, sólo que esta vez tendrán un factor de
certeza asociado. Llamaremos P, P1 y P2 a las
versiones para -DeLP de los programas DeLP P,
P1 y P2, respectivamente.
Para el primer caso se cuenta con 〈A1, abe〉
que posee factor de certeza 0.3 y con 〈A2,∼abe〉
que posee factor de certeza 0.2. Estos valores de
certeza hacen que 〈A2,∼abe〉 no constituya un
derrotador para 〈A1, abe〉, y por ende, como se
muestra en la figura 4, abe quedará garantizado.
El agente concluirá que el auto se encuentra en
buen estado con un grado de certeza de 0.3.
Para el segundo caso, correspondiente al programa P1, se cuenta con el argumento 〈A3,∼abe〉
con factor de certeza 0.5. 〈A3,∼abe〉 es un argumento más fuerte que 〈A1, abe〉, lo que permite al
agente arribar a la conclusión de que el auto no
esta en buen estado, como se muestra en la figura
5.
Finalmente, para el programa P1, se cuenta
con el argumento 〈A4, abe〉 con factor de certeza
0.6. Este es un argumento aún más fuerte que
〈A3,∼abe〉, por lo que se vuelve a reinstalar la
creencia acerca del buen estado del auto, como se
muestra en la figura 6.
Figura 4: Razonamiento acerca del estado del auto a partir de P.
Figura 5: Razonamiento acerca del estado del auto a partir de P1.
6. CONCLUSIÓN Y TRABAJO
FUTURO
En este paper se presentó  -DeLP, una extensión a la Programación en Lógica Rebatible (DeLP) para introducir el manejo de metainformación mediante etiquetas. Se mostró como
esta extensión agrega expresividad a DeLP, permitiendo: 1) asociar cierta meta-información a las
claúsulas de un programa, 2) especificar como sintetizar meta-información para los argumentos a
partir de la meta-información correspondiente a
las claúsulas que lo conforman y 3) definir un criterio de comparación por mejor entre argumentos
basado en la meta-información asociada a los mismos. Esto hace posible la definición de un criterio
de comparación de argumentos que capture una
noción de mejor argumento apropiada para el doFigura 6: Razonamiento acerca del estado del auto a partir de P2.
minio de aplicación específico.
Como trabajo futuro se terminará de definir
y formalizar la incorporación de etiquetas a
la Programación en Lógica Rebatible. Esto
podría realizarse extendiendo la formalización
mediante Sistemas Lógicos Etiquetados de DeLP
presentada en [1].
