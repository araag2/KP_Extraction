Desarrollo de un administrador de memoria segmentada para un sistema operativo didáctico
﻿
Uno   de   los   objetivos   del   desarrollo   del 
sistema operativo SODIUM  es permitir  a los 
alumnos   de   las   materias   de     sistemas 
operativos observar y sacar conclusiones del 
funcionamiento   de   los   distintos   algoritmos 
que   componen   un   sistema   operativo,   el 
tratamiento   de   los   eventos   que   ocurren,   la 
forma de  atención  de  estos,    que  injerencia 
tienen     en   los   tiempos  de   ejecución  de   los 
procesos, en la eficiencia de la administración 
y   la   gestión   de   los   recursos.   Este 
administrador   de   memoria   segmentada   nos 
permite   continuar   con   la   línea   de 
administradores   de   memoria,   mostrando   la 
evolución de  la  administración en cuanto al 
reparto,   mejor   aprovechamiento   de   la 
memoria   en   áreas   compartidas   por   varios 
procesos,   disminución   de   la   fragmentación 
externa   y   aumento   de     la   complejidad   del 
manejo del hardware disponible como forma 
de   asignación   del   recurso.   Todo   esto   debe 
realizarse   con   el   mismo   conjunto   de 
programas   fuente   de   prueba,   compilarlos   y 
ejecutarlos   en   las   mismas   condiciones   para 
luego   realizar   las   comparaciones   de   los 
diferentes   sistemas   de   administración   que 
posee el SODIUM.
Nuestro   Sistema   Operativo   utiliza 
actualmente   el   formato   “binario   plano” 
obtenido desde  un archivo objeto ELF por lo 
tanto los procesos de usuario que ejecutarán y 
serán ubicados en memoria utilizarán formato 
estandarizado   ELF   para   sus   archivos 
ejecutables, por lo que necesitamos adaptarlos 
para la segmentación utilizado las secciones y 
segmentos que este provee. 
RESUMEN
La   finalidad   de   crear   un   administrador   de 
memoria   segmentada   sin   ningún   tipo   de 
solapamiento   en   el   sistema   operativo 
SODIUM, es la de generar un administrador 
clásico   para   que   los   alumnos   de   Sistemas 
Operativos   puedan   comprobar   el   estado   de 
asignación   de   la   memoria,   los   distintos 
segmentos   en   los   que   queda   dividido   el 
proceso, su localización en memoria, la forma 
en que se traducen las direcciones,  como se 
realiza   la   asignación   dinámica   de   memoria 
para   el   proceso,   la   asignación   de   memoria 
compartida  y  los  mecanismos  de protección 
de   las   distintas   áreas   de   memoria 
comparando la eficiencia en la asignación del 
recurso  con   la  de  otros   administradores.  Se 
presentaron   dificultades   que   son   generadas 
por   la   disponibilidad   de   las   diferentes 
arquitecturas y los compiladores existentes en 
el   mercado,   ya   que   la   mayoría   trabaja   por 
defecto   con   paginación   o   segmentación­
paginada. Se tomó  un formato estandarizado 
de archivos ejecutables, como es  el ELF y se 
estudió   la   adaptación   a   las   necesidades   del 
administrador   de   memoria,   estableciendo 
relaciones entre las diferentes direcciones ya 
sean lógicas, físicas o lineales y las distintas 
secciones o segmentos. 
Palabras   Claves:  Segmentación, 
paginación,     ELF,   asignación,   reasignación, 
GDT, LDT,  memoria compartida,   dirección 
virtual,  dirección física,  dirección lineal.
1.­ INTRODUCCIÓN
Nos hemos planteado la necesidad de que un 
sistema operativo didáctico conste de más de 
un   administrador   de   memoria,   para   poder 
estudiarlos   y   realizar   comparaciones   de 
comportamiento   de   cada   uno.   Habiendo 
realizado   ya   administradores   de   asignación 
contigua   simple,   particiones   fijas   y 
particiones   variables,   la   segmentación 
[TAN03]  resulta  de   la  evolución normal  de 
las particiones variables agregando eficiencia 
en la asignación del recurso, complejidad en 
la administración y generación de programas 
para trabajar con memoria segmentada. 
Esto   nos   permite   el   apoyo   a   una   materia 
específica, a través de la visualización de las 
secciones  de   los  procesos  [TISELF],   cuales 
de ellas están en el  archivo ejecutable en el 
disco   y   cuales   son   creadas   por   el 
administrador   de   memoria,   las   tablas   que 
utiliza   el   sistema   para   la   traducción   de 
direcciones [INTEL] y para la asignación de 
memoria   del   sistema.   La   entrega   de 
información   sobre   los   eventos   que   ocurren 
dentro   del   sistema,   la   localización   de   los 
distintos   segmentos   de   cada   proceso   en 
memoria   ,   aumentado   o   disminuyendo   su 
tamaño para mejorar la fragmentación externa 
y la posibilidad de cambiar la configuración 
para   realizar   comparaciones.   Este 
administrador   está   desarrollado   por   los 
alumnos, lo cual los lleva a un conocimiento 
de:
• las   particularidades   de   los 
compiladores [VHA06]
•  los formatos de los ejecutables que el 
administrador   de   memoria   debe 
conocer para utilizar 
• la   arquitectura   en   la   cual   imple­
mentamos nuestro administrador y el 
entorno que la contiene.  
También   se   realiza   una   transferencia   de 
conocimientos,   a   través   de   interfaces   para 
cada   funcionalidad,   lo   que   permite   que   el 
alumno   conciba   y   escriba   módulos 
alternativos.
Existe una diferencia fundamental entre   los 
sistemas   operativos   de   uso   general   (tales 
como  Linux o Windows )  y el SODIUM ya 
que este trata intercambiar los distintos admi­
nistradores de memoria para poder estudiar y 
sacar   conclusiones   respecto   a   la   asignación 
del recurso, traducción de direcciones, protec­
ción,   siempre   respetando   los   algoritmos   de 
administración de memoria publicados en los 
libros  más afamados de la materia  Sistemas 
Operativos. La diferencia es debida a que los 
sistemas  operativos  de  uso  general   trabajan 
con   un  único   sistema   de   administración  de 
memoria [CAR01]  [RUS00], actualmente de 
paginación   por   demanda,   no   permitiendo 
cambios  de configuración ni   una modifica­
ción sencilla  para poder utilizar  dos algorit­
mos o más,  manteniendo un conjunto de pro­
cesos de prueba que permita realizar las esta­
dísticas y comparaciones pertinentes.
2. LINEAS DE INVESTIGACION  y 
DESARROLLO
Si  bien   la  arquitectura   Intel  x86 provee  es­
tructuras  de datos  que pueden ser  utilizadas 
para  la administración de memoria con seg­
mentación tales  como la  GDT (Global  Des­
criptor  Table)  o LDT (Local  Descriptor  Ta­
ble)  y un conjunto de registros tales como CS 
, DS, ES, FS; GS y  SS , donde CS es un se­
lector de segmento de código, SS un selector 
de segmento de stack y los restantes son se­
lectores de   segmentos de datos, para la seg­
mentación no son suficientes ya que vamos a 
utilizar   varias   áreas   de   código   ubicadas   en 
segmentos  diferentes  debido a  que necesita­
mos por lo menos  un área de memoria o seg­
mento para cada una de las bibliotecas diná­
micas   que   se   necesiten,   para   luego   poder 
comparar el estado de asignación de memoria 
utilizando en la compilación de los procesos 
bibliotecas estáticas ó dinámicas. También re­
sultarán    insuficientes   los  registros de datos 
ya que serán necesarios un registro de datos 
para las variables globales (inicializadas o no 
–BSS­), un registro para el heap o memoria 
de asignación dinámica del proceso y además 
si trabajamos con threads, para cada uno que 
se ejecute será necesaria un área de datos del 
thread , no así un área de código del thread ya 
que este se comparte con el código del proce­
so.   Estos inconvenientes que presenta la ar­
quitectura se solucionan con la  tabla de relo­
cación y los  registros de relocación del ejecu­
table ELF. Fig 1“Asignación de memoria del proce­
so”
Fig 1“Asignación de memoria del proceso”
En segundo lugar tenemos también, la traduc­
ción de las direcciones  virtuales   Fig 2 “ Direc­
ciones Virtuales a Direcciones físicas”, que se reali­
zan utilizando una  LDT  para todos los pro­
cesos y en el futuro podrán ser una LDT por 
proceso.  Esto se decidió  así  ya que la LDT 
posee   una   cantidad   de   entradas   suficientes 
para la cantidad de procesos que podemos ge­
nerar  para  estudio.  El  uso  de  una  LDT por 
proceso tiene la ventaja que podemos identifi­
car fácilmente todos las entradas del proceso 
en la tabla y los datos de cada segmento pero 
no agrega mejoras sustanciales a los objetivos 
del SODIUM . 
Tercero, la asignación y recuperación de me­
moria se realizará mediante dos métodos dife­
rentes para poder realizar comparaciones. El 
primero mediante una lista doblemente enla­
zada de huecos libres  y ocupados  permitien­
do utilizar los algoritmos First Fit,  Best Fit, 
Worst Fit y Next Fit que ya están incorpora­
dos al SODIUM para las particiones variables 
y el segundo con el algoritmo Buddy System, 
con modificaciones para tamaños de   memo­
ria no potencias de dos.
3.RESULTADOS   OBTENIDOS/ 
ESPERADOS
Partiendo  de   los   sistemas  de  administración 
ya existentes en el SODIUM, se ha utilizado 
la   misma   estructura   cambiando   los 
parámetros  de  lista  enlazada  para asignar   la 
cantidad de huecos de memoria necesaria para 
la   segmentación,   se   estudió   la   forma   de 
generar  distintos   segmentos  para   el  proceso 
tal   como   se   ve   en   los   libros   de   Sistemas 
Operativos   que   permiten   al   programador 
disminuir  el   tamaño de las funciones de los 
procesos   para   aprovechar   los   huecos 
pequeños que se encuentran libres para su uso 
(con las formas anteriores de asignación que 
ya   habíamos   incorporado   al   SODIUM 
teníamos únicamente un   segmento de datos 
que   contenía   los   datos   y   el   stack,   y   otro 
segmento de código o un único segmento que 
que contenía el código los datos y el stack).  
Fig 2  “ Direcciones Virtuales a Direcciones físicas”
Para poder  ver las distintas características de 
los administradores, tales como el estado de 
la memoria  libre u ocupada , las estadísticas 
de asignación de memoria a los procesos y las 
estadísticas   del   sistema   se   desarrollo   un 
entorno gráfico.
Se  está   trabajando   actualmente   sobre   el 
header   de   programa   del   ejecutable   ELF   y 
sobre el header de sección para generar en la 
compilación archivos ejecutables compatibles 
con el modelo segmentado.
Queda aún por generar:
• bibliotecas   dinámicas   para   C   en 
SODIUM   para   poder   generar   una 
mayor cantidad de segmentos
• áreas de memoria compartida para la 
comunicación de procesos
• administradores   para     las   áreas   del 
heap.
• Crear varios threads por proceso, con 
sus áreas de datos propias.
4.   FORMACION   DE   RECURSOS 
HUMANOS
Se realizó:
• la   primera   transferencia  de   los 
conocimientos   obtenidos     a   los 
alumnos   que   cursan   Sistemas 
Operativos,   ya   que   realizaron   el 
análisis   de   la   arquitectura   y   las 
distintos   formatos   de   ejecutables 
conjuntamente   con   el   análisis   del 
SODIUM   e   intervinieron   en   el 
desarrollo de los administradores.
• Transferencia de conocimientos  a los 
alumnos de Sistemas de Computación 
II de la Universidad de La Matanza y 
a los alumnos de Sistemas Operativos 
de   la   Universidad   Tecnológica 
Nacional, Regional  Buenos Aires.
• Publicación   de   los   avances   en   la 
investigación   en   dos   congresos 
internacionales.
• Se   prevé   continuar   con   las 
publicaciones   en   otros   congresos 
internacionales  
Se está estudiando:
• realizar   convenios   de   colaboración 
con   otras   universidades   nacionales 
estatales   y   privadas   de   las   cuales 
recibimos   ofrecimientos   de 
colaboración,   con   el   objetivo   de 
intercambiar conocimientos y ampliar 
los alcances del sistema. 
En esta línea de investigación tenemos:
• dos   trabajos   de   la   Maestría   en 
informática  en curso.
• colaboran también en el desarrollo  un 
becario,     un   alumno   de   Ingeniería 
electrónica y un alumno que cursa los 
primeros   años   de   la   carrera   de 
Ingeniería en informática.
• Recibimos la colaboración además de 
alumnos   que   ya   han   cursado   la 
materia   y  han  desarrollado  parte   del 
SODIUM en los años anteriores. 
5.
