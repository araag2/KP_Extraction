Big Bang un recurso didáctico pedagógico en el aprendizaje de la implementación de algoritmos en pseudocódigo
﻿
El proceso de enseñanza y aprendizaje de los cursos
iniciales de nivel superior que tienen por objeto
introducir al estudiante en el diseño e implementación
de algoritmos, puede ser favorecido mediante el uso
de herramientas específicas que den soporten tanto a
los temas conceptuales como a las técnicas utilizadas.
BIG BANG es una herramienta construida y utilizada
como recurso didáctico-pedagógico en estos
contextos, cuyo objetivo es facilitar la
complementación de las prácticas habitualmente
utilizadas.
Palabras claves: Pseudocódigo, Algoritmos,
Programación, Didáctico-Pedagógico, Java.
1. Introducción
Los cursos iniciales de nivel superior que tienen por
objetivo introducir al estudiante en el desarrollo de
algoritmos, en general abarcan los conceptos básicos
para la codificación de aplicaciones software como
ser: tipos de datos simples, estructuras de control,
arreglos, invariantes, modularización, etc. Las técnicas
comúnmente utilizadas son el diagrama de flujo y el
pseudocódigo. El diagrama de flujo gráficamente
permite bosquejar algoritmos sencillos y cortos,
proporcionando figuras especificas que representan el
control, los enunciados, etc.[1]. Los diagramas de
flujo resultan sencillos y fáciles de realizar, aunque se
tornan confusos cuando se pretenden aplicar
conceptos referentes a la modularización
(procedimientos, funciones, etc.). El pseudocódigo
tiende a ser una técnica más adecuada en estos casos,
además de formar desde momentos tempranos buenos
hábitos de escritura de programas (identación,
utilización de comentarios, convenciones para la
denominación de identificadores, subprogramas, etc.).
A diferencia de un lenguaje de programación
convencional, facilita al alumno concentrarse en el
algoritmo y la lógica en forma específica
desatendiendo cuestiones relacionadas a la sintaxis y
características específicas del lenguaje.
Las prácticas en pseudocódigo se plantean como una
experiencia en “en papel”, tanto su escritura como su
comprobación (prueba de escritorio o traza). Las
prácticas en laboratorio siempre son más interesantes,
enriquecedoras y significativas para el alumno, por
ello, posibilitar la interacción del alumno con una
herramienta de programación en pseudocódigo podría
colaborar tanto a facilitar futuros aprendizajes, como a
fortalecer la motivación del estudio en particular.
Estos factores hacen reflexionar sobre la posibilidad
de complementar las prácticas “en papel” en el
laboratorio, mediante el uso de una herramienta de
implementación de algoritmos en pseudocódigo. De
esta forma, se incorpora una herramienta como
recurso didáctico-pedagógico válido en el proceso de
enseñanza-aprendizaje.
Este trabajo presenta la herramienta BIG BANG
construida para ser utilizada como otro recurso
didáctico-pedagógico en la asignatura Programación I,
de la carrera Analista de Sistemas, de la Unidad
Académica Río Gallegos, Universidad Nacional de la
Patagonia Austral. Esta herramienta es el resultado de
un proyecto desarrollado en el ámbito del Laboratorio
de Ingeniería de Software (LIS), en el que participaron
docentes y alumnos de la institución.
La estructura de este trabajo es la siguiente: en la
Sección 2 se describe brevemente los requerimientos
didácticos-pedagógicos a los que responde BIGBANG; en la Sección 3 se explica la metodología de
uso de la herramienta; en la Sección 4 se resumen las
características del proceso de desarrollo de BIG
BANG; en la Sección 5 se describen algunas
herramientas similares estudiadas y en la Sección 6 se
exponen nuestras conclusiones.
2. Requerimientos didácticos-pedagógicos
La asignatura antes mencionada, para la cual se diseñó
e implementó BIG BANG, se imparte en el 2do
cuatrimestre del primer año de la carrera, tiene una
asignación de 6 horas semanales (2 teóricas y 4
prácticas) durante 16 semanas que componen el
cuatrimestre; la misma sigue dos de las seis estrategias
para iniciar estudios en ciencias de la computación
planteadas por las dos mayores asociaciones
mundiales de la disciplina en su Currícula 2001 ACMIEEE[2]: algorithms-first[3] y objects-first[4]. Bajo
estas premisas se formulan los requerimientos que
BIG BANG debe satisfacer.
El Pseudocódigo no es una notación rigurosa para
especificar algoritmos, de hecho no existe un
pseudocódigo estándar y cada libro de texto o autor
definen su propio estilo de pseudocódigo. Pero al
mismo tiempo, el pseudocódigo debe ser completo,
para describir la lógica exacta de un algoritmo y cuyo
pasaje a la implementación se vuelva una tarea
mecánica y repetitiva de traducción línea por línea a
código fuente[5]. Por eso, se recomienda que para
propósitos instructivos se utilice un pseudocódigo de
similar estilo al de los lenguajes convencionales[5].
Como se puede observar en[6] se utiliza un
pseudocódigo muy similar al Lenguaje de
Programación Pascal, en cuanto a su estructura y
elementos. En el caso del Pseudocódigo BIG BANG
un requerimiento fue que soportara en forma exacta el
pseudocódigo que se utilizaba en la asignatura[7]. El
mismo cumple con los lineamientos propuestos en[8]
y conserva gran similitud con el Lenguaje de
Programación Java[9].
Dicho Pseudocódigo comprende un conjunto acotado
de palabras reservadas en español y símbolos
especiales, que resultan suficiente para representar
tanto algoritmos simples como algoritmos complejos
(por ejemplo: manejo de matrices). El conjunto esta
conformado por las siguientes palabras reservadas y
símbolos especiales[7]:
· Tipos de datos Simples: entero, real, booleano y
caracter
· Tipos de datos Compuestos/Complejos: arreglos
(vectores y matrices) y clases/objetos
· Estructuras de Selección: SI-SINO y
ALTERNAR-CASO
· Estructuras de Iteración: MIENTRAS, HACERMIENTRAS y PARA
· Operador de Asignación: ¬
· Enunciado de Entrada de datos: LEER
· Enunciado de Salida de datos o mensajes:
ESCRIBIR
· Operadores Booleanos y Lógicas: conjunción (&),
disyunción (|), menor que (<),  mayor que (>), menor
o igual que (<=), mayor o igual que (>=), igualdad (=
=) y desigualdad o distinto (!=)
· Operadores Aritméticos: exponenciación (^),
suma (+), resta (-), multiplicación (*), división (/) y
resto (%)
· Operadores para delimitar bloques de enunciados:
{ }
· Comentarios: //
Otro requerimiento que se consideró necesariamente
importante, fue que la operación de la herramienta
fuera lo suficientemente fácil e intuitiva de manera tal,
que no implicara en lo posible esfuerzos de
aprendizaje en el estudiante novato (a diferencia de
herramientas actuales de programación de gran
sofisticación como Eclipse[10] o JBuilder[11]). Es por
este motivo que la interfaz de BIG BANG contiene los
componentes mínimos para la confección de las
prácticas de la asignatura. Se busca que el alumno se
centre en el desarrollo de los algoritmos y no, que
dedique tiempo y esfuerzo en conocer y descubrir la
herramienta y todas las cuestiones inherentes a la
misma.
En cuanto a las cuestiones sintácticas, para simplificar
aún más, la herramienta prescinde del uso de símbolos
separadores de líneas (como ser el punto y coma) y el
uso de mayúsculas y minúsculas es indistinto. La
sobrecarga de operadores puede resultar confusa, por
este motivo, en vez de utilizar el signo + como
concatenación de cadenas de caracteres, se utiliza la
coma (,) y en vez de utilizar el signo = como
asignación, se utiliza la flecha hacia izquierda (¬). La
declaración de constantes es simple y se denota de la
siguiente manera: identificador de la constante =
valor.
Respecto a la aplicación de los conceptos relacionados
con la modularización, reuso del código, ocultamiento
de la información y encapsulamiento se requirió
soporte de clases, objetos, atributos, constructores,
métodos y mensajes, parámetros y retornos; todos
ellos forman parte de una unidad de la materia.
Un requerimiento que se analizó con detenimiento fue
el de incluir la funcionalidad de debugging
(depuración) en BIG BANG. La conclusión fue que
no era conveniente automatizar esta función en una
herramienta inicial de aprendizaje, ya que los docentes
consideraron que es parte de los objetivos de
aprendizaje la adquisición de competencias y
habilidades, por parte del alumno, que le permitan
encontrar errores de lógica como ser: diseño de bucles
infinitos, variables no inicializadas o mal inicializadas,
condiciones incorrectamente determinadas, etc. Esta
comprobación la logran utilizando la técnica de traza,
donde hacen un seguimiento línea por línea de su
desarrollo.
En cuanto a los errores de compilación la herramienta
asiste al alumno para detectar errores que en la
práctica en papel suelen omitirse. Por ejemplo, utilizar
más de un nombre para el mismo identificador.
3. La práctica: complementar el papel con
el laboratorio
A continuación, se describe la forma en que se emplea
la herramienta en el contexto de la práctica de la
asignatura, utilizando la metodología completa. La
metodología implica la realización de los siguientes
pasos en la resolución de un problema:
1. Lectura y comprensión del enunciado
2. Análisis del problema (en papel)
3. Diseño del algoritmo (en papel)
4. Implementación del algoritmo en Big Bang (en
laboratorio)
5. Ejecución del algoritmo en Big Bang (en
laboratorio)
6. Si la compilación arroja errores, el alumno los
corrige y vuelve a repetir el paso 5.
7. Si la compilación es correcta y el resultado no es el
esperado, el alumno realiza la traza (en papel). Puede
ocurrir que se tenga que volver al paso 2.
Ejemplos
Los ejemplos que aquí se desarrollan se han extraído
de las guías de trabajos prácticos de la asignatura. El
primero de ellos se desarrolla en forma completa
(todos los pasos) y el segundo sólo a partir del paso 4.
v Problema 1: Ingresar una secuencia de 10
elementos enteros y calcular el promedio.
Resolución del Problema
ð Análisis del problema
Entrada/s: 10 números enteros
Salida/s: promedio (real) de los 10 números enteros
ð Diseño del Algoritmo
Proceso:
- Ingresar los 10 números enteros.
- Calcular el promedio de los 10 números.
- Sumar los 10 números.
- Dividir el resultado de la suma por la
cantidad 10.
- Mostrar el resultado del promedio.
ð Implementación del Algoritmo (Figura 1)
ð Resultado de la Compilación (exitosa) y
Ejecución (Figura 2)
v Problema 2: Crear la clase
MatricesCuadradas, que genere una matriz de
NxN de elementos enteros, determine si la
diagonal principal está compuesta por
elementos pares y muestre la matriz
resultante.
Fig. 1: Implementación del Algoritmo del Problema 1
Fig. 2: Ejecución del Algoritmo del Problema 1
ð Resultado de la Compilación (no exitosa) (Figura
3)
Fig. 3: Compilación del Algoritmo del Problema 2
4. Desarrollo de la herramienta BIG
BANG
El desarrollo de BIG BANG se planteó desde sus
inicios como un Proyecto de Software, para el cual se
definieron todos los participantes y sus respectivos
roles y en forma conjunta se elaboró el documento de
requisitos[12]. Se determinó como modelo de proceso,
un ciclo de vida “por prototipos”.
Se siguieron todos los pasos tradicionalmente
establecidos. Por ejemplo, en la figura 4 se describen
los casos de usos identificados y en la figura 5 un
diagrama de clases resumido.
Compilación (RF-05)
Ejecución (RF-06)
Ingreso de código (RF-01)
Modificación del código (RF-04)
Recuperación del archivo (RF-03)
Guardar en archivo (RF-02)
USUARIO
Identificación del archivo (RF-07)
<<use>>
<<use>>
Fig.4: Diagrama de Casos de Uso
Container
ArchivoDeTexto
File
Component
<<Abstract>>
Herramienta
1
*
ClasePrincipal
1
1
Clase de la
herramienta que
programa en
pseudocódigo.
EventListener
<<Interface>>
Clase provista por
java para el manejo
de archivos.
Clase provista por java que
actúa como contenedora de
componentes gráficos.
Clase provista por java, de la
que heredan todos los
componentes gráficos con los
que interactúa el usuario.
Interfaz de java que
es implementada por
los distintos eventos.
Clase que posee métodos
para el manejo de archivos
de texto.
Clase donde se
instancia la
herramienta.
Fig.5: Diagrama de Clases
BIG BANG se encuentra codificada en forma
completa en Lenguaje de Programación Java[9], y
genera código Java Byte-Code. Las alternativas de
implementación planteadas y analizadas fueron:
· implementar un compilador de pseudocódigo.
· implementar un post-procesador de pseudocódigo
a código Java.
Se adoptó la segunda alternativa por la reducida
cantidad de elementos de BIG BANG y porque los
mismos concuerdan prácticamente de forma directa
con sus correspondientes en Java. Estos factores
hicieron que la implementación de BIG BANG fuera
más fácil, al igual que su posible extensión a nuevos
cambios en la misma.
5. Trabajos relacionados
La indagación y estudio de otras herramientas
ayudaron a determinar las características y
requerimientos de BIG BANG. Encontramos otras
herramientas específicas para el aprendizaje de las
técnicas de programación básicas, por ejemplo: BLiner[13], SchemaCode[14] y P-Coder[15], entre
otras. Se analizaron sus características y
funcionalidad, las cuales difieren en cierta medida con
los objetivos buscados. Por ejemplo, P-Coder emplea
un modelo basado en una estructura de árbol
interactiva con elementos gráficos y textuales para la
especificación de los algoritmos en pseudocódigo, que
combina con diagramas UML. B-Liner esta basado en
el modelo de diagramas Warnier-Orr[16]. En
SchemaCode el objetivo conceptual principal es el
desarrollo incremental y refinamiento Top-Down, así
un programa se codifica desde la raíz de un árbol y
añadiendo subprogramas en las hojas. Todas estas
herramientas tienen la desventaja de ser en idioma
inglés.
Una herramienta cuyo análisis resultó interesante fue
LEXICO (Lenguaje EXperimental Introductoria a la
COmputación)[17], además de ser en español cumplía
con varias de las consignas que se pretendían lograr
con BIG BANG. Los principales inconvenientes que
hallamos en LEXICO fueron los siguientes:
a) el conjunto de palabras reservadas difiere al
requerido en cantidad, semántica y sintaxis;
b) LEXICO admite la combinación de Pseudocódigo
en español y utilización de clases y métodos de una
librería en un lenguaje de programación en inglés.
Además de hacer al conjunto demasiado amplio, lo
hace confuso;
c) la escritura de algoritmos resulta un tanto ambigua
por utilizar frases en lenguaje natural, sentencias en
plural y singular;
d) la ejecución esta restringida a una plataforma
específica (.NET).
En conclusión LEXICO es una herramienta cuyas
características son similares a BIG BANG, pero de
mayor complejidad y funcionalidad.
6. Conclusiones
En este trabajo se ha presentado una herramienta para
la implementación de algoritmos en pseudocódigo. La
misma tiene por objeto complementar las prácticas en
papel con las prácticas en laboratorio, en el marco de
un método de aplicación con objetivos instructivos. En
este sentido, se ha descripto el método paso a paso de
cómo se inserta BIG BANG en el contexto de la
práctica de la asignatura.
Esta herramienta se ha formulado estrictamente con
objetivos didácticos-pedagógicos careciendo de las
características típicas de las herramientas de
producción, comerciales. Su simpleza y facilidad de
uso se consideran fundamentales para alcanzar los
objetivos planteados.
El presente trabajo fue parcialmente financiado por la
Universidad Nacional de la Patagonia Austral, Santa
Cruz, Argentina.
7. Referencias
[1] Daviduck, B. “Introduction to Programming in
C++: Algorithms, Flowcharts and Pseudocode”.
Computer Systems Technology program at Red Deer
College in Alberta, Canada.
http://www.allclearonline.com/downloads/whitepapers
/program_intro.pdf
[2] Currícula 2001 ACM-IEEE:
http://www.acm.org./sigcse/cc2001/index.html
[3] Algorithms-first:
http://www.computer.org./education/cc2001/final/cha
pter07.htm#AlgorithmsFirst
[4] Object-First :
http://www.computer.org./education/cc2001/final/cha
pter07.htm#ObjectFirst
[5] Dalbey, J. “Pseudocode Standard”. California
Polytechnic State University, San Luis Obispo,
California. http://www.csc.calpoly.edu//jdalbey/
[6] De Giusti, Madoz, Bertone, Naiouf, Gorga, Russo.
“Algoritmos, Datos y programas: Conceptos Básicos”.
Editorial Exacta. 1998.
[7] Vanoli, V.; Casas S. “Apunte teórico y prácticos
de la materia Programación I”. Carrera Analista de
Sistemas. Unidad Académica Río Gallegos.
Universidad Nacional de la Patagonia Austral.
Argentina. 2003.
[8] Nishimura, N. “Pseudocode”. Cornell University.
Departament of Computer Science. Ithaca, New York,
Estados Unidos.
http://www.cs.cornell.edu/courses/cs482/2003su/hand
outs/pseudocode.pdf
[9] Gosling, J.; Joy, B.; Steel, G. “The Java Language
Specification”. Addison-Wesley. 1996.
[10] Web Site Eclipse: http://www.eclipse.org
[11] Web Site Jbuilder:
http://www.borland.com/jbuilder
[12] D. Toro, A.; Jiménez, B. “Metodología para la
Elicitación de Requisitos de Sistemas Software”.
Universidad de Sevilla. España. Octubre de 2000.
http://www.lsi.us.es//informes/lsi-2000-10.pdf
[13] Andover, MA. “B-Liner98 Backet Outliner
Users’ Guide”. Veratek Software Inc. 1999.
[14] Robillard, P.N. “Schematic pseudocode for
program constructs and its computer automation by
schemacode”. Communications of ACM, 29(11), pp
1072-1089. 1986
[15] Armarego, J.; Roy, G. (2004). “Teaching design
principles in software engineering”. In R. Atkinson, C.
McBeath, D. Jonas-Dwyer & R. Phillips (Eds),
Beyond the comfort zone: Proceedings of the 21st
ASCILITE Conference (pp. 67-77). Perth, 5-8
December.
http://www.ascilite.org.au/conferences/perth04/procs/a
rmarego.html
[16] Warnier, J.D. “Logical Construction of
Programs”. NY: Yourdon Press1976.
[17] Web Site LEXICO: http://riosur.net/
Otras
