Un modelo formal de patrones orientados a objetos
﻿Un Modelo Formal de Patrones Orientados a Objetos 
Alt:jandra Cechich 
Departamento de Informática y Estadística 
Universidad Nacional del Comahue 
Buenos Aires 1400, (8300) Ncuquén, Argentina 
E-mail: acechich@uncoma.edu.ar 
Richard Moore 
lnternationallnstitutc for Software Technlllllgy 
United Nations Univcrsity 
P.O. Box 3058, Macau 
E-mail: rm@iist.unu.edu 
PALABR.'\S CLAVES: Patterns +Frameworks + Métodos Formales + Oricnta('ión a OhjdOS • 
1. Introducción 
La mayoría de los métodos de desarrollo de software orientado a objetos imponen ciertus 
conceptos que son generalmente aceptados. Frameworks y patterns expresan ejemplos de buenas 
prácticas que pueden usarse para alcanzar resultados más efectivos [Bus96]. Pero en algunos casos 
particulares, es necesario una especificación formal que pueda verificarse a fin de producir sistemas 
mús seguros. 
Los patrones de Gamma [Gam95] (GoF patterns) desempeñan varios roles en el procesu de 
desarrollo orientado a objetos: proveen un vocabulario común para diseño; constituyen una base dl: 
experiencia para construir software reusable; y actúan como elementos básicos a partir de los cuales 
pueden construirse diselÍos más complejos. Una notación más formal que permita especificar en forma 
mis segura, consistente y completa es todavía un desafío. Un primer trabajo en esa dirección [EdeA l 
representa patrones como formulas de LePus, un lenguaje definido como un fragmento de la lógica dl: 
primer orden [EdeB]. En [Mik98] se presenta un modelo abstracto de patrones, construido usando el 
método DisCo que se fundamenta en la lógica temporal. 
En este resumen, presentamos nuestro modelo formal de patrones [Cec99B] basado en RSL 
(RAlSE Specification Language) [Geo92], y el estado actual de su desarrollo. Futuras extensiones son 
abordadas al final. 
2. Una Base Formal para Patrones Orientados a Objetos 
Un patrón GoF se define en RSL como un tipo producto compuesto de tres elementos. La 
cabecera del p<ltrón se conforma con el nombre y la categoría, por ejemplo bridge, object-sfrt/( 'fllra/: y 
es usado para identificar un patrón particular. Los otros dos elementos - estructura y colaboraciones representan la solución descripta por un patrón. 
Estructura. La estructura es un conjunto de clases bien formadas relacionadas por un conjunto 
de relaciones bien formadas. Las clases corresponden a nuestra declaración Puttan Class y las 
relaciones corresponden a nuestra declaración Puttern_Relatiollship [Cec99A]. 
Pattcrn_Structure = C.WllClass-sct X R.WCRelation-set 
Las restricciones aplicadas sobre la estructura de un patrón pueden verse en [Ccc99A). 
Colaboraciones. El tipo CollaborafioTl se compone de un par de objetos conectados y de UIl 
mensaje. Un objeto puede invocar a otro objeto enviando un mensaje del tipo Signature_Hmd. Cada 
objeto corresponde a una clase particular del tipo Pattern _ Class, pero el tipo de relaciones entre clases 
es diferente de las colaboraciones, por ejemplo podemos relacionar dos clases por medio de una 
Wicc 2000 - 86 
agregacJOn pero esas clases colaboran entre sí como un par emisor-receptor. Entonces, cada 
colaboración representa una invocación entre un par de objetos. 
Ya que la información usada para instanciar un objeto es esencialmente la misma información 
contenida en las responsabilidades de los participantes del patrón, no necesitamos modelar las 
colaboraciones. Por ejemplo, en el patrón Abstrae! Faetory, una clase "abstract factory" delega la 
creación de sus objetos "product" a sus subclases "concrete factory", y para crear diferentes objetos 
producto un cliente utiliza distintas fábricas concretas. Esas propiedades han sido modeladas usando 
las relaciones establecidas en la estructura y en las responsabilidades asociadas con un participante. 
En el modelo, usamos identificadores como una forma de distinguir colaboraciones individuales. 
Para cada colaboración en el patrón hay un conjunto. posiblemente vacío, de colaboraciones que deben 
ejecutarse antes. En algunos patrones, cada colaboración tiene sólo un pre-requisito. Por ejemplo. en d 
patrón Bridge sólo Operat¡oll() debe ejecutarse antes de Operationlmp(); en el patrón ObS<'lW'1" SÓlll 
Notify() debe ejecutarse antes de Update(); y en el patrón State sólo Requcst() debe ejecutarse anles de 
Handle(). 
El registro compuesto CoIl es usado para especificar la colaboración y sus pre-requisitos. y se 
utiliza una correspondencia entre identificadores y registros para modelar las colaboraciones del 
patrón. 
Collaboration:: scndcr _0 : G.ÜJficretc _ Objcct 
rcceiver _o : O.Concrete _ Objcct 
signatun: _ coll : P.Signature _lIead, 
Coll :: col: Collaboration prcrcl(: (¡.('oll_ld-set, 
Collaborations = G.Coll Id - 01- Coll 
Las colaboraciones deben satisfacer además condiciones de consistencia relacionadas con las 
clases y relaciones en d patrón. Primero, las clases deben pertenecer a la  structura del patrón y el 
mensaje debe estar definido en la interface del receptor; y segundo. no puede. haber colaboraciones 
entre clases relacionadas por herencia. 
Las restricciones aplicadas sobre las colaboraciones de un patrón pueden verse en [Cect)l)A]. 
3. Modelo de Colaboraciones Extendido 
En el modelo presentado en la sección anterior, no ha sido conlem·pladaJa .información semántica 
asociada a algunas partes de la representación de patrones. Por eje·mplo, los comentarios agrtgados a 
la estructura de un patrón detallan la manera en que las clases colaboran para cumplir con su intención. 
Para incluir esa mformación semántica es necesario modificar algunas declaraciones y/o 
extenderlas. Por ejemplo, la definición Pattern_Class, declara a la interface de esa clase como un tipo 
abstracto, sin embargo la interface representa el grupo de operaciones que esa clase puede atender. y 
cada operación se asocia a una signatura, al cuerpo de un método y al resultado que se produce por la 
aplicación de ese método. 
Method :: meth_sig: Signature 
meth_bod: Method_Body 
meth_res: G.vble 
A su vez. cada signatura especifica el nombre de la operaclOn y los objetos que toma comu 
parámetros; el cuerpo del método especifica la lista de invocaciones que deberían realizarse y los 
c¡;mbios de variables producidos como resultados de esas invocaciones. 
El cambio en las variables es modelado mediante una correspondencia entre la variable 
modificada y el objeto, junto con la signatura que ha producido el cambio; mientras que una 
invocación se modela por medio de una referencia al objeto receptor y a la signatura 
invocada en ese objeto: 
Wicc 2000 - X7 
Mettlod_Body:: meth_vbles: G.vble - m   G.vble X Signature_Head 
Meth Call:: 
meth invok: Meth Call* 
- call vbles: G.vble* 
call_sig: Signature_Head 
Con este nuevo modelo, las colaboraciones se modelan implícitamente dentro del 
cuerpo de una clase y la definición de patrón cambia a: 
GoF Pattern -= G. Pattcrn Hcad X PS.WF Pattcrn Structurc 
- - -Algunas propiedades definidas en [Cec99A] deben adaptarse al nuevo modelo y nuevas 
restricciones basadas en la semántica pueden ser agregadas. Por ejemplo, podemos 
modelar una propiedad general indicando que las variables modificadas deben estar 
incluidas en el estado de la clase de la siguiente manera: 
changed_vble_in_state: Pattern_Class   Bool 
changed_vble_in_state( e) '" ('íI m: P.Method • m E class_methods( e) = 
dom P.meth_vbles(P.meth_bod(m)) E class_state( e 
) ) 
4. Futuras Extensiones 
El modelo formal de patrones es un producto que se desprende del proyecto de investigación 
"Orientación a Objetos y Métodos Formales para la Especificación de Dominios". 
El modelo ha sido extendido para incluir características semánticas implícitas en la estructura de 
un patrón. La formalización actual incluye sólo algunos patrones del catálogo de Gamma. Para puder 
eventualmente verificar que un diseño utiliza algún patrón, es necesario incluir mayor cantidad (y 
diversos tipos) ele patrones formalmente. Por otra parte, variaciones de los patrones también deberían 
considerarse. Esas extensiones ya están siendo modeladas. 
Pero para incluir mayor semántica en el modelo es necesario relacionarlo a un dominio. 
Por ello, se está analizando en forma paralela un dominio de alto riesgo (Unidades de 
Terapia Intensiva), en colaboración con clínicas y hospitales de la zona. La aplicación del 
modelo formal a este dominio generará un framework especificado en forma completa y 
consistente. 
