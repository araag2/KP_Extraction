Aproximación para abordar problemas de asignación de recursos
﻿APROXIMACIÓN PARA ABORDAR PROBLEMAS DE 
ASIGNACIÓN DE RECURSOS 
- UN MODELO GENERAL ORIENTADO A OBJETOS Susana Chavez, Silvina Migani 
e-mail: {schavez.smigani}@iinfo.unsLedu.ar 
Docentes del Departamento de Informática 
Investigadores del Instituto de Informática 
LISI 
Universidad Nacional de San Juan 
Cereceto y Meglioli (5400) San Juan, Argentina 
1. INTRODUCCIÓN 
Existen problemas del mundo real que por su complejidad presentan una explosión 
combinatoria en su tratamiento. Entre ellos podemos detallar los problemas industriales como 
planificación, scheluding, optimización, asignación de recursos, etc. 
Los problemas a los que está orientado este trabajo en particular son de asignacióó de 
recursos. 
En este trabajo se propone una aproximación a la modelización orientada a objetos para 
el tratamiento general de este tipo de problemas. I 
Un conjunto particular de recursos se representa como una clase de objetos del mundo 
real que incluye atributos ocultos y métodos encapsulados. Los componentes se comunican a 
través de mensajes, brindando inmunidad al resto del sistema frente a cambios de 
implementación. 
Este modelo general además de representar más naturalmente estos problemas, hace 
posible la incorporación de nuevas funcionalidades sin que tenga un impacto sustancial. 
Al momento de la implementación este modelo resulta fácilmente tratable utilizando un 
lenguaje de programación por restricciones (Constraint Programing). 
I Este trabajo está enmarcado dentro del Proyecto de Investigación, aprobado por CICITCA, denominado 
"Resolución de Problemas de Asignación de Recursos usando Técnicas de Inteligencia Artificial". 
1 
2. PROBLEMÁTICA A TRATAR 
Los problemas de asignación de recursos, denominados de combinatoria discreta, son 
aquellos que tienen tal complejidad que no pueden ser resueltos eficientemente o pueden 
requerir demasiado tiempo de ejecución usando métodos tradicionales de la programación 
convencional. Uno de los aspectos más importantes de este enfoque es que el modelo teórico 
propuesto se extiende a distintos problemas de la realidad que involucran asignación de 
recursos, tales como: . 
• Conductores de una empresa de transporte que deben ser asignados a unidades en 
distintos tumos 
• Profesores que deben dictar clases en aulas y horarios diferentes durante los cinco 
días de la semana 
• Máquinas que deben utilizar diferentes recursos en el proceso de producción 
• Cajeras de un supermercado que deben ser asignadas a una de las diferentes cajas 
en los distintos tumos. 
En general, existen entidades que tienen que ser asignadas a lugares y también se 
resentan restricciones que limitan tal asignación. Esto conduce a una explosión combinatoria, 
ue se resuelve eficientemente aplicando técnicas de programación con restricciones 
Constraint Prograrnming - CP). En este marco han surgido desarrollos muy importantes 
Leler,90] [Ibañez,94] [Forradellas,94] [Rueda,95], principalmente en Constraint Logic 
rograrnming (CLP) para dominios finitos, tales como CHIP (Constraint Handling In Prolog) 
Dincbas,88] [Van Hentenryck,89] [Forradellas,91]. 
La integración de la programación con restricciones con la programación orientada a 
bjetos (POO), que facilita la comprensión, resolución y extensión de problemas, permite 
esolver eficientemente un amplio rango de problemas de combinatoria discreta, 
rincipalmente aquellos de complejidad no polinomial, intratables con métodos tradicionales. 
En este paper, se propone un modelo general orientado a objetos que representa los 
roblemas de combinatoria de asignación de recursos, los cuales se resuelven integrando la CP 
la PDO. 
. FORMALIZACIÓN DEL PROBLEMA 
.1. Modelo Teórico General 
Un problema de satisfacción de restricciónes (Constraint Satisfaction Problems - CSP) 
tá compuesto por: 
1. un conjunto de variables, VI, ... , V n , 
2. un conjunto de dominios, DI, o •• , Dn, asociado a las variables, 
3. un conjunto de restricciones relativas a las variables. 
Una solución es un conjunto de valores al, ... , an, donde aj E Dj y la sustitución aj N j 
v rifica todas las restricciones ( 1   j   ). 
La obtención de la solución consiste en explorar el espacio de soluciones guiada 
mediante el conjunto de restricciones. las técnicas de resolución más utilizadas consisten en la 
expansión de un árbol de búsqueda que considere todas las opciones. Se realiza en cada nodo 
del árbol un proceso de comprobación de consistencia considerando las asignaciones 
realizadas hasta ese momento. Si las asignaciones resultan inconsistentes, no debe 
considerarse el subárbol correspondiente produciendo una poda a priori del espacio de 
búsqueda. De esta manera se van eliminando valores de los dominios de las variables hasta 
encontrar los valores que dan solución al problema. 
A partir de un CSP general se define un nuevo modelo que trata problemas de 
Combinatoria de Asignación de Recursos. 
3.2. Modelo Teórico Propuesto 
3.2.1. El Espacio CSP 
Un CSP de Asignación de Recursos, llamado e!1pacio CSP consiste de los siguientes 
componentes: 
1. un conjunto de variables Vi¡, ... ,ik 
donde 1 :{il :{ 11, 
1 :{h :{h. 
2. un único dominio D asociado a las variables, y 
3. un conjunto de restricciones lineales que relacionan a las variables. 
Una solución es un conjunto de valores ai¡, ... ,ik E D, tal que la sustitución a¡¡, ••• ,ik / 
Vil, ... ,h verifica todas las restricciones (J :{i¡ :{I¡, ... , 1 :{h :{h). 
En el CSP convencional, las variables pueden ser vistas como puntos en un segmento, 
mientras que en el Espacio-CSP las variables pueden ser vistas como puntos de un espacio n­
dimensional denotado como S. 
Un grupo, simbolizado como G, se define como un subconjunto del conjunto de 
variables Vi¡,:.:,h, donde aj :{ 0 :{ bj (J:{j:{ k), con 1 :{ aj y bj :{ Ij. El par < aj,bj> representa 
el rango del/s,mo índice de la variable Vi¡, ... , Vh. 
Luego, una restricción puede asociarse a uno o a varios grupos, dependiendo del tipo 
de restricción, como se muestra a continuación. En el mundo real las variables representan 
lugares a ser asignados, mientras que D representa el conjunto de todos los posibles candidatos 
a ocupar estos lugares. De ahora en más, los elementos de D son llamados candidatos. 
3.2.2. Tipos de Restricciones 
Dado un grupo de puntos G, definiremos restricciones de diferentes tipos. Diremos que 
las restricciones involucran puntos y candidatos con peso O si los candidatos ··no deben·· ser 
asignados a esos puntos, y con peso 1 si los candidatos "deben·' ser asignados a los puntos. Los 
pesos son denotados como W. 
A continuación describimos diferentes tipos de restricciones correspondientes a varios 
problemas de combinatoria discreta de Asignación de Recursos: 
Tipo1: Algunos candidatos pueden ocupar un grupo de puntos con peso O. 
Tipo2: Cualquier candidato que puede ocupar algún (JUniO de un Kru{Jo con peso O o l. 
puede ocupar otro punto del mismo grupo con peso O o l. 
Tipo3: En un grupo determinado, el candidato i puede ocupar un puniD con peso O o 1, 
Y el candidato j puede ocupar otro punto con peso O o l. 
Tipo4: Un candidato puede ocupar un punto de un grupo con peso l. 
TipoS: Un candidato que puede ocupar un punto de un grupo con peso O o 1, puede 
ocupar cualquier punto de otro grupo con peso O o l. 
Las restricciones enumeradas previamente son generales para muchos problemas de 
Asignación de Recursos. Sin embargo, pueden existir otras restricciones que podrían ser 
clasificadas e incluidas en algunos de los tipos definidos previamente, o bien generar otras 
clases que debieran incluirse en el modelo. 
4. MODELAMIENTO 
.1. TÉCNICA DE MODELAMIENTO DE OBJETOS (TMO) 
El modelamiento y diseño orientado a objetos promueve un mejor conocimiento de los 
equerimientos, diseños más claros y sistemas más mantenibles. 
Dado un problema a resolver, la orientación a objetos brinda una forma más abstracta 
e pensar, no en términos computacionales. Brinda una forma más práctica y productiva de 
esarrollo de software, independientemente del lenguaje de programación en que se 
mplemente. 
Un sistema construido usando la tecnología de orientación a objetos es una colección 
e objetos cooperantes con identidad propia. Un objeto es una entidad que tiene un conjunto 
e responsabilidades y que encapsula un estado interno. Las responsabilidades de un objeto 
las operaciones que puede realizar) se implementan mediante métodos, los cuales describen 
1 comportamiento del mismo. El estado interno se implementa mediante un conjunto de 
tributos encapsulados. 
Los objetos que comparten idénticas propiedades (atributos y comportamiento) se 
grupan en clases. Una clase contiene la descripción de las características comunes de todos 
1 s objetos que pertenecen a ella, es decir, la especificación del comportamiento, la definición 
e la estructura interna y la implementación de los métodos. De esta manera, un objeto es una 
i stancia de una clase. 
La principal ventaja del desarrollo orientado a objetos no sólo es facilitar la 
r usabilidad en una aplicación, sino ofrecer la posibilidad de reusar diseño y código en 
oyectos futuros. Algunas de las herramientas que lo permiten son la abstracción, la 
e capsulación, la herencia y el polimorfismo. 
Abstracción: Consiste en considerar lo esencial, los aspectos relevantes de una entidad, 
i norando las demás propiedades. En el desarrollo de software, significa focalizarse en lo que 
objeto es y hace, antes de decidir cómo será implementado. De esta manera, el uso de la 
a stracción durante la etapa de análisis significa tratar con conceptos del dominio de la 
a licación, sin tener que tomar decisiones de diseño e implementación antes de que el 
p oblema sea totalmente conocido. 
Encapsulación: Como dijimos, un objeto es una entidad que encapsula un estado 
interno. Por lo tanto. la cncapsulación pennite separar los aspectos externos de un objeto 
(accesibles por otros objetos), de los detalles de implementación (ocultos para el resto). 
Herencia: Muchas veces encontramos que clases diferentes poseen propiedades 
comunes. El mecanismo de abstracción generalización-especialización consiste en construir 
jerarquías de clases-subclases, es decir. es una relación entre una clase y una o más versiones 
refinadas de ella. La clase que se está refinando se llama superclase y cada versión refinada se 
llama subclase, donde éstas heredan todas las propiedades de la superclase y, a su vez, pueden 
agregar propiedades específicas. Es decir, el término herencia refiere al mecanismo por el 
cual, a través de una relación de generalización diferentes clases comparten propiedades. Por 
consiguiente, las subclases heredan en particular el comportamiento de la superclase, es decir, 
sus operaciones. Estas operaciones pueden ser redefinidas para que se comporten diferente de 
acuerdo a cada subclase. Esta característica fundamental de la orientación a objetos se 
denomina polimorfismo. 
Polimorfismo: Primero recordemos que la implementación de una operación en una 
clase se denomina método. El polimorfismo significa que la misma operación puede 
comportarse de forma diferente aplicada a objetos de clases diferentes. Cada objeto conoce 
cómo responder a sus responsabilidades. Por lo tanto, el usuario de una operación, no necesita 
conocer que métodos existen para implementar una operación polimórfica. Es más, pueden 
agregarse nuevas clases que provean nuevas implementaciones sin necesitar cambiar el código 
existente. 
La orientación a objetos ofrece además otras ventajas, como son: 
• una reducción de la brecha semántica: Es decir, permite generar un modelo más 
natural. Preserva la semántica del dominio del problema. 
• incrementa la consistencia entre el análisis, el diseño, y la programación. 
• separación del qué y del cómo. 
• mayor modularidad 
• facilita la prototipación 
• brinda un efecto limitado frente a cambios 
• aumenta la productividad: Se ha estimado que el 80 por ciento de los costos 
dedicados a la producción de software se produce después de su desarrollo inicial; 
esto significa que muchos defectos se descubren mas tarde, y mas importante aun, 
mucha de la funcionalidad del sistema se alcanza después del desarrollo inicial. De 
esta manera, un método que enfatiza el mantenimiento, mejora sustancialmente la 
productividad. 
• extensibilidad: Los conceptos propios de la orientación a objetos hacen posible que 
el incorporar nuevas funcionalidades a un sistema tenga un impacto sustancialmentt 
menor que si se hubiera desarrollado usando otra metodología. 
• comunicación a través de mensajes: Los objetos componentes del sistema se 
comunican a través de mensajes (son invocaciones a operaciones), brindando 
inmunidad al resto del sistema frente a cambios de implementaron, obviamente 
siempre y cuando la interface no sea alterada. Este concepto esta totalmente 
vinculado con la encapsulación. ya que los detalles de implementación están 
encapsulados dentro del objeto receptor. 
4.2. MODELO TEÓRICO GENERAL 
Tomando el modelo teórico del Espacio_CSP y los tipos de restricciones definidos, 
construimos un modelo orientado a objetos del sistema (figura 1), basado en la UML (Unified 
Modeling Languaje). Las componentes del espacio y los tipos de restricciones son 
representados como objetos. Este modelo describe el comportamiento y la estructura de los 
objetos del sistema: su identidad, su estructura interna y sus relaciones con otros objetos. 
Analizando el modelo generado se puede observar que un espacio es un objeto 
compuesto que contiene otros objetos: 
a) ejes, 
b) candidatos, 
c) grupos y 
d) restricciones 
La cantidad de ejes de un espacio está dada por la dimensión del mismo. Los ejes, a su 
ez incluyen valores. Una vez definidos los ejes y los valores de ejes, quedan establecidos los 
untos que son las variables del espacio. 
Los candidatos representan el dominio asociado a las variables. 
Los grupos se definen en función a valores de ejes. Cumplen un papel importante ya 
ue sobre ellos se aplicaran las restricciones. 
Las restricciones limitan la asignación de valores a las variables dentro de una 
olución. Se puede notar que existe una clase genérica Restricciones refinada en 4 subclases. 
os tipos 1 y 4 son unificados puesto que comparten la misma estructura. 
A su vez, tanto los candidatos como los valores de ejes pueden tener propiedades, 
omo por ejemplo, edad de un candidato, hora de inicio y finalización de un turno, etc. Estas 
ropiedades también son modeladas como objetos. Existen dos tipos de propiedades, tipo A y 
t po B. Las propiedades tipo A, responden a propiedades distintas de candidatos y valores de 
. es que son comparables entre si. Por ejemplo, la propiedad capacidad de un aula (propiedad 
e un valor de eje) y cantidad de alumnos de un profesor (propiedad de un candidato), pueden 
ecesitar compararse. Las propiedades del tipo B son comparables solo con propiedades 
i énticas o bien con constantes. 
Las soluciones también son representadas como objetos, que vinculan los puntos del 
e pacio con los candidatos. Donde toda solución verifica todas las restricciones definidas para 
cho espacio. 
Vale la pena aclarar que el modelo orientado a objetos propuesto es el punto de partida 
e la resolución de un problema de asignación de recursos especifico, a partir del cual se 
eden definir nuevas clases o bien redefinir algunas de las existentes. 
Espacio 
Id_espacio 
nombre 
dimensión 
agregar_eje 
agregar_grupo 
agregar _ cand idato 
agregar_restricción 
obtener_componente 
C> generar_solución .<:::: 
I I 
Ejes Grupos Candidatos 
Id_eje Id_grupo Id candidato 
nombre nombre nombre 
longitud nuevo nuevo 
nuevo modificar agregar yropiedad 
eliminar agregar yropiedad eliminar yropiedad 
agregar_valor eliminar yropiedad modificar propiedad 
eliminar_valor modificar yropiedad 
+ 1 Valores ejes ddeO .Id_ valor_eje hasta \ nombre 
Propiedades nuevo 
agregar yropiedad Id yropiedad 
eliminar yropiedad descripción 
modificar yropiedad valoryrop tipo 

 longitud cant decimales nueva modificar eliminar 
Puntos ¿ 
Idyunto I 1 
¡nuevu 
Propiedades A Propiedades B agregar yropiedad 
eliminar yropiedad otra_descripción 
modificar propiedad 
Restricciones. 
Id Jestrlcclón 
peso 1 
Id grupo 1 
nueva 
eliminar 
A 
I I 
Punto Cand Punto Punto Cand Cand Cand Grupo Punto Cand 
conLcand peso2 Id cand1 Iddrupo2 
Id cand2 Id cand 
peso2 
l' 
I Solllcione" 
Id solucion 
.. 
5. APLICACiÓN A UN PROBLEMA REAL 
Una Empresa de Transporte de pasajeros cuenta con n unidades. y m conductores que 
deben ser asignados a las unidades en uno de los tres turnos estipulados (Mañana: 6:00 -13, 
Tarde: 13:00 - 20:00 y Noche: 20:00 - 3:00). teniendo en cuenta que se deben satisfacer las 
condiciones impuestas por la empresa. 
Este problema puede ser modelado como un Espacio-CSP. Para ello es importante, 
en primer lugar, identificar los ejes. La cantidad de ejes determina la dimensión del espacio. 
Como procedimiento general, proponemos identificar las entidades más importantes 
del problema. En este caso, son: las unidades, los conductores y los distintos turnos. Los 
conductores son los Candidatos y las entidades restantes (las unidades y los turnos) 
corresponden a cada uno de los ejes del Espacio-CSP. 
Por lo tanto, podemos representar el problema en un espacio de dos dimensiones 
donde cada punto Pij representa la i-ésima unidad disponible en el j-ésimo tumo; y los 
candidatos son los conductores. 
Supongamos que la empresa cuenta con 10 unidades. Hacemos corresponder al eje 
X las 10 unidades de la empresa, y al eje Y los tres turnos mencionados. De esta manera, el 
punto P4,3 representa la cuarta unidad en el tercer turno (Noche). 
y 
3 
• • • • • • • • • • 
22 __  ~ __  ~~~+-- __ 
• 
• • • • • • • • • • x 
L 2345678911O-----El segmento Y =2 (G 1) abarca todas las unidades en el turno tarde. El Grupo 1 está 
definido por medio de los rangos [1,l¡][2,2] (todos los puntos Pij conj=2 e i E [1,1 1]), 
y 
3 
2r-----------x 
I I I I 
12345 6 
Una vez que el problema se encuadra como un Espacio-CSP, se pueden definir los 
grupos sobre los que se establecerán las restricciones y éstas corresponderán a algunos de 
los tipos de restricciones definidas. A continuación mencionamos un ejemplo para cada tipo 
de restricción: 
Primer tipo: Los conductores 1 y 3 no pueden trabajar de noche. 
Segundo tipo: Ningún conductor puede conducir más de una unidad en el mismo turno. 
Tercer tipo: El conductor 5 debe entregar la unidad al conductor 7. 
Cuarto tipo: El conductor 6 debe trabajar de mañana. 
Quinto tipo: Los conductores que trabbjan en un turno deben descansar en el siguiente. 
6. CONCLUSIONES 
• Se construye un modelo general que permite representar y resolver varios tipos 
de problemas de asignación de recursos en la industria. el comercio, etc., donde las 
restricciones son comunes a diferentes problemas y el espacio es el mismo. 
• Las restricciones se organizan en clases de objetos y esto provoca reducción de 
redundancias; sin embargo, se pueden definir nuevas reglas y algoritmos de búsqueda 
específicos en el ambiente CP. 
• Las distintas componentes del Espacio-CSP son representadas en el modelo 
orientado a objetos, dotándolas de todas las ventajas provistas por este paradigma, y por lo 
tanto, aumentando la declaratividad. 
• Tomando como punto de partida el modelo general propuesto para problemas de 
asignación de recursos, se pueden definir nuevas clases, o bien modificar las existentes para 
un problema particular siempre que este encuadre en el Espacio-CSP. 
7. REFERENCIAS 
[Coad,91] Object-Oriented Analysis. Peter Coad, Edward Yourdon. 
[Coad,91] Object-Oriented Design. Peter Coad, Edward Yourdon. 
[Forradellas,95] R.F orradellas, "Un Modelo para el tratamiento de Sistemas 
Dinámicos con Restricciones en el marco CLP", Tesis Doctoral, Universidad Politécnica de 
Madrid, España, 1995. 
[Gamma,94] Design Patteros. Element of reusable object-oriented software. Erich 
Gamma, Richard Helm, Ralph Johnson, John Vlissides. 
[Ibañez,95] F. Ibañez, "CLP(Temp), Integración de Restricciones Temporales 
Métricas y Simbólicas, en el Marco CLP", Tesis Doctoral, Universidad Politécnica de 
Valencia, España, 1994. 
[Ibañez,94] F. Ibañez, R. Berlanga, F. Barber y R. Forradellas, "Dos enfoques de 
la Programación Lógica con Restricciones", Revista de Informática Teórica y Aplicada, 
Brasil, 4/1994. . 
[Jaffar,94] J. Jaffar and M.J. Maher, ., Constraint Logic Programming: A Survey", 
J. Logic Programming, to appear, 1994. 
[Leler,90] V. Leler, "Constraints Programming Languages - Their Specification ahd-­
Generation", Addison-Wesley Publishing Co. Inc., 1990 
[Macwortb,86] A.K.Mackworth, "Constraint Satisfaction", Encyclopedia of 
Artificial Intelligence, 1986. 
[Martin,94] Martin J. - Odell J., "Análisis y Diseño Orientado a Objetos", Prentice 
Hall Hispanoamérica S.A., 1994. 
[Puget,94] Puget J., "'A C++ Implementation ofCLP", Ilog Solver Collected Papers, 
Ilog techo report. 1994. 
[Rueda,95] Rueda L. Klenzi R. Gutierrez L. Ibañez F. Forradellas R., "Tratamiento 
de Problemas de Combinatoria Discreta mediante el Paradigma CLP", 2das. Jornadas de 
Inteligencia Artificial, Universidad Nacional del Sur. Bahía Blanca, 1995. 
[Rueda,96] L. Rueda, l.Arias, F.lbañez and R.Forradellas, "Representación y 
Tratamiento mediante POO de Prrblemas de Combinatoria Discreta en la Programación 
con Restricciones", 25as. JAllO, Argentina, 1996. 
[Rueda,97] Rueda L. - Arias 1. - Ibañez F. - Forradellas R., "Tecnologias de 
Inteligencia Artificial aplicadas a problemas Industriales Complejos ", VII RPIC, 1997. 
[Rumba,91] Rumbaugh J - Blaha M. - Premerlani W. - Frederick E. - Lorensen W., 
"Object Oriented Modeling and Design", Prentice Hall, 1991. 
[Shlaer,88] Object-Oriented Systems Analysis. ModeIing the world in data. SalIy 
Shlaer, Stephen J. Mellor. 
[Van Hentenryck,89] P. Van Hentenryck, "Constraints Satisfaction in Logic 
Programming", MIT Press, 1989. 
[Van Hentenryck,92] P. Van Hentenryck, H. Simonis and M. Dincbas "Constraint 
Satisfaction using CLP", Artif. Intell., Vol. 58, 1992. 
[Wirfs-Brock,90] Designing Object-Oriented Software. Rebecca Wirfs-Brock, 
Brian Wilkerson, Lauren Wiener. 
Cuarto tipo: El conductor 6 debe trabajar de mañana. 
Quinto tipo: Los conductores que trahajan en un turno deben descansar en el siguiente. 
6. CONCLUSIONES 
• Se construye un modelo general que permite representar y resolver varios tipos 
de problemas de asignación de recursos en la industria. el comercio, etc., donde las 
restricciones son comunes a diferentes problemas y el espacio es el mismo. 
• Las restricciones se organizan en clases de objetos y esto provoca reducción de 
redundancias; sin embargo, se pueden definir nuevas reglas y algoritmos de búsqueda 
específicos en el ambiente CP. 
• Las distintas componentes del Espacio-CSP son representadas en el modelo 
orientado a objetos, dotándolas de todas las ventajas provistas por este paradigma, y por lo 
tanto, aumentando la declaratividad. 
• Tomando como punto de partida el modelo general propuesto para problemas de 
asignación de recursos, se pueden definir nuevas clases, o bien modificar las existentes para 
un problema particular siempre que este encuadre en el Espacio-CSP. 
7.
