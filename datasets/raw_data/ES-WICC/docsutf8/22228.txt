Resolución de problemas de asignación de recursos mediante algoritmos genéticos
﻿
En el presente trabajo se pretende aplicar una alternativa derivada de la . 

g_H¡"Ji'.nít&_Cii'tÑliBB~iOttllr;¡tMfólitimlffwS1i28SdP:M·t_.:ei_ • .t,*_'. 
metodología de exploración y explotación de grandes espacios de búsquedas. En éste 
caso concreto se los utilizará como optimizadores, característica que los destacc sobre 
otras estrategias de optimización. 
Se pretende asignar cajeras en cajas de W1 supermercado en donde se deben 
cumplir ciertas restricciones que se enumeran a.continuación. 
1) Todas las cajeras deben ser distintas (Alldistint). 
2) Una cajera 110 debe ocupar una caja determinada (notÍllcasl,). 
3) Una cajera debe ocupar una caja determinada (incasl,). 
4) Una cajera no debe ocupar un turno definido (notinturn). 
5) Una cajera debe ocupar un turno definido (inturn). 
6) Una cajera no debe estar aliado de otra determinada. 
Para la aplicación se utiliza.W1a herramienta disponible en Internet desde la cual 
se manipulan los algoritmos en sí, en cuanto a estrategias de selección, transposición, 
mutación y de terminación; a lo que debe adicionarse una correcta elección de la 
representación y función de aptitud. 
! 
I Nota: Este trabajo se desarrolló en el marco del proyecto CICYTCA (UNSJ) "Resolución de Problemas 
de Asignación de Recursos Mediante Técnicas de Inteligencia Artificial" 
Existen distintas técnicas para encarar la resolución de problemas de asignación 
de recursos. El objetivo planteado en este trabajo pretende resolver estos problemas 
aplicando metodologías de Inteligencia Anificial (lA). 
Para ello primeramente daremos una definición aproximada de lo que es lA 
::,.:; Oi\.:t 4uu un programa de comput<iclun e:. dci área de ia lntdigcncia Anifl\..:iaJ Sj 
presenta características de aprendizaje, razonamiento, interrelación con el medio que 
revela caracteristicas de inteligencia humanas;' ; ... ," .' 
Así pues, un soft de lA pretende emular características humanas en cuanto a 
tener capacidades de procesamiento similar al del cerebro humano (Redes Neuronales 
RN), Administrar todo su conocimiento, experiencia, actuando con sentido común 
(Sistemas Expertos SE). Aplicar técnicas que mimeticen la teoría Darwiniana de 
supervivencia del más apto (Algoritmos Genéticos AG, Computación Evolutiva CE), y 
finalmente comportarse en forma satisfactoria ante información incierta, incompleta, o 
sin la exactitud suficiente (Lógica Borrosa LB). 
Este trabajo centra su estudio en las aplicaciones de AG. 
2. ALGORITMOS GENETICOS 
Se introduce a los Algoritmos Genéticos, qué son, de dónde vinieron, y en que se 
parecen y difieren de otros procedimientos de búsqueda, de acuerdo a la publicación de 
Genetic Algorithms in Search and Optimization, David Edward Goldberg, Addison­
Wesley Pub. Co., 1989 ISBN 0-201-15767-5 
2.1 ¿Que son los Algoritmos Genéticos? 
Los Algoritmos Genéticos son algoritmos de búsqueda basados en los mecanismos de la 
selección natural y de la genética natural. 
Combinan la supervivencia del más adaptado entre estructuras strings 
(cadenas de caracteres) con un intercambio de información estructurado y 
a la vez aleatorio dando como resultado un algoritmo de búsqueda con algo 
de la búsqueda humana instintiva. En cada generación se crea un nuevo 
conjunto de criaturas artificiales (stringg)' usando partes de los más 
adaptados; ocasionalmente se intenta con una nueva parte para mejorar la 
medición. Si bien son aleatorios, los Algoritmos Genéticos no son puro 
azar, explotan eficientemente la información histórica para hallar los 
nuevospuntos de búsqueda esperando un mejor rendimiento. 
El tema central en la investigación en los Algoritmos Genéticos ha sido la robustez, el 
equilibrio entre eficiencia y eficacia necesarias para la supervivencia en muchos 
ambientes. 
2.2 ¿ En que se diferencian los Algoritmos Genéticos de los métodos tradicionales.? 
Los Algoritmos Genéticos son diferentes de los procedimientos de búsqueda 
tradicionales en cuatro aspectos: 
1- Los Agg trah:mm cnn uñ codificación del espaciCl pararnctricn \" n(l con ICls 
2- Los Ags L)ussall en una poblaclOn de puntos y no en un solo pumo. 
3- Los Ags usan una función objetivo de rentabilidad como información. no 
derivadas u otro conocimiento auxiliar. 
4- Los Ags usan reglas de transición probabilísticas no determinísticas. 
Los Aigornmus LII.::nt:tico:> requieren que el conjunto de paramclroo naluraies dd 
problema de optimización sea codificado como un string de longitud finita sacado de 
. aJg1Ín alfabeto finito; '.'.: ... e.. " . - . _.... "' .. -"'",., ........ -'.;. "'" ""L-' ...... , :·c". .' .. ," .. ··\.;7;··· :- y,,,, .. ", "","'-''''''¿, .. ,.- , .• '>;; ,'" "-. o/.'i,,>!ii 
3. OPTIMIZACIÓN 
Las aplicaciones de Software se dividen en dos categorías: Análisis y Síntesis. 
Las aplicaciones de análisis se representan por el tradicional modelo entrada-salida de 
datos, procesando los datos de entrada y obteniendo las correspondientes salidas por 
procedimientos procedurales o heurísticos. Esta es una tarea dificultosa, dado que en la 
mayoría de los casos no existen fónnulas ni reglas para lograr salidas desde las 

~&t"'BSP_· ..  :restúeoioDet,1Iiipü_.t;;fIIDD~deii 
entrada sean aceptables. Optimización es el proceso de derivar desde las entradas que 
cumplen ciertas restricciones las salidas deseadas. 
3.1 Optimización usando Algoritmos Genéticos 
Los Algoritmos genéticos (AG) son técnicas que resuelven problemas de 
optimización inspirados en la teoría de la evolución y la biogenética. Son una buena 
alternativa explorando grandes espacios de búsqueda donde existen óptimos globiiies y 
locales. Los aspectos básico de los AG son: 
1. Representan las posibles soluciones del problema como un string de parámetros 
(números). Este string es llamado cromosoma y los parametros genes. 
2. Aleatoriamente crean un número (generación) de estos cromosomas. 
3. Se calcula la aptitud de cada cromosoma como forma de calificar los mismos en 
orden a su función de aptitud. 
4. Se crea una nueva generación de cromosomas, seleccionando al azar un par de 
cromosomas (padres) y mezclando sus genes se logran los cromosomas hijos. Este 
proceso es llamado crossover y la selección de los padre se hace de acuerdo a la 
función de aptitud de cada uno. 
5. Repitiendo los pasos 3 y 4 para un número dado de ciclos (generaciones). 
La aleatoriedad del proceso anterior permite la efectiva exploración de un gran 
espacio de soluciones. Mientras la selección de soluciones efectivas (cromosomas) y·la 
mezcla de sus genes permite la acumulación de buenas características desde soluciones 
parcialmente buenas. Como resultado, los AG exploran grandes dominios y convergen a 
buenas soluciones relativamente rápido. Dando una buena relación entre el tiempo 
empleado y la calidad de la solución. Típicamente se desea encontrar una buena 
solución en un corto"1iempo y no la solución óptima en tiempo excesivo. 
r .('" doo f\:1S00 hasic(ls en la húsqueda de s(l!uci()ñ'( llssñdn .-\(l son' uns 
ti unClO1l o.: costo) a evaluar permanentementt::. La represelllaclon maa slInplt: de un 
prohlema es por medio de un string de números. Cada número es representado por un 
gene que puede estar restringido a una valor maximo y mínimo. La función de costo se 
define como el costo de una solución dada para un conjunto de valores de genes. En tal 
representación cada gene representa un parámetro diferente de la solución. 
/..!t..:::rnamamt:I1iC un cromusoma se puedt: USU¡ para rcpr-.:::.cmur una secuencia 
de tareas que se requiere optimizar. En este caso el número de genes será igual al 
-número de tareas a ser secuenciado y el valor de cada gene único con un valor que irá 
desde uno al número·de tareas. 
4. EL PROBLEMA 
El problema a abordar en este trabajo consta en lograr la asignación de 
trabajadores (cajeras) a sus correspondientes lugares de trabajo (cajas), cumpliendo 
determinadas restricciones. 
7) Todas las cajeras deben ser distintas (Alldistint). 
8) Una cajera no debe ocupar una caja determinada (notincash). 
9) Una cajera debe ocupar una caja determinada (incash). 
10) Una cajera no debe ocupar un turno definido (notinturn). 
11) Una cajera debe ocupar un turno definido (inturn). 
12) Una cajera no debe estar aliado de otra determinada. 
En función del problema real de un supermercado, el mismo puede constar de k2 
cajeras, kl cajas, y t turnos, y haber una cajera especializada en el trato de tarjetas de 
créditos, mas no sabe el tratamiento que se le da al cobro con tickets canasta o 
restaurante, a su vez no puede venir en el turno de la tarde. Esto involucra tener en 
cuenta, a la hora de elevar una solución, restricciones del tipo 1),2),3) Y 4). 
Mientras el número de cajeras, cajas, y tumos sea reducido puede llegarse a realizar 
una asignación en forma manual, pero en la medida que estas variables empiezan a 
crecer, el problema se hace manualmente intratable. Aún para buenos equipos de 
computación en la medida que aumentan las restricciones se llega a explosiones 
combinatorias. 
5. HERRAMIENTA UTILIZADA 
Se ha definido ya el uso de AG como metodología de búsqueda de una solución, 
para ello se hará uso de una herramienta del Instituto de Tecnología de Massachusset 
MIT, disponible en INTERNET y que no es más que una colección de bibliotecas en 
C++ que permiten generar y correr distintos tipos de Algoritmos Genéticos. 
La herramienta aludida recibe el nombre de GALIB2.42 y absolutamente todas sus 
características se encuentran en el correspondiente archivo HTML y en el presente 
informe solo destacaremos algunas de ellas. 
Hay tres cosas que se deben analizar al intentar resolver un problema mediante 
Algoritmos Geneticos. 
1. Definir una representación. 
2. Definir el operador genético. 
3. Definir la función objetivo. 
GALIB ayuda con los dos primeros ítems proveyendo ejemplos desde los cuales se 
pueden construir la representación y operadores particulares. En muchos casos se 

"pueden tJS8I' las representaciones y operadores existentes con pequcftas modificaciones;":" 
La función objetivo la desarrolla completamente el usuario de GALffi. Una vez 
definidas la representación, operadores y una medida del objetivo, se puede aplicar 
cualquier Algoritmo Genético para encontrar la mejor solución a un problema dado. 
Cuando se usa un Algoritmo Genético para resolver un problema de optimizaCión, 
se debe estar en condiciones de representar un solución a su problema en una única 
estructura de datos. El Algoritmo Genético (AG) creará una población de soluciones 
basada en una muestra de la estructura de datos provista. El AG opera sobre la 
población y evoluciona hacia la mejor solución. En GALffi la librería contiene cuatro 
.;.;.__~ __ º,e..~~~~;::: __ ""::: .. "..::-=-._:==_.··, ..   ... _.·:::::;,:_ ..  ~,_ ..... " ,:: ..  T::""=::~=:'::-';;;''::=--::,:';;'' 
. -'" .. 
• GAListGenome. 
• GATreeGenome. 
• GAArrayGenome. 
• GABinaryStringGenome. 
Clasee que se derivan de la clase base GAGenome y una estructura de datos como" 
la indicada por sus nombres como ejemplo: GAListGenome se deriva de la clase GAList 
también como de la clase GAGenome. Usa una estructura de datos que trabaja con la 
definición del problema a resolver. 
Hay diferentes tipos de Algoritmos Genéticos. Galib incluye cuatro tipos básicos: 
• Simple, GASimpleGA ga(genome); 
• Estado-Permanente, GASteadyStateGA ga(genome); 
• Incremental, GAlncrementalGA ga(genome); 
• Islas de poblaciones, GADemeGA ga(genome); 
Estos algoritmos difieren en la forma en' que crean nuevos individuos y reemplazan 
los viejos durante el curso de la evolución. 
GALffi provee dos mecanismos primarios para extender las capaci4ades de 
construir objetos. Sobre todo (y desde el punto de vista del C++) se pueden derivar sus 
propias clases y definir nuevas funciones miembros. Solamente se necesitan hacer 
ajustes menores al comportamiento de la clase Galib, en la mayoría de los casos se 
define una sola función y se le dice a la clase Galib que la use en lugar de las definidas 
por default. 
Los AG cuando están correctamente implementados, son capaces de realizar tanto la 
tarea de exploración (búsqueda a lo ancho) como de explotación (búsqueda local) del 
espacIo de bú.squeda. El comportamiento que tendrá dependerá como trahajen loo 
,\;);,:r .. ,ciort::. y de ia forma del espacIo Ot: buuqu-.:uu: 
Comu anteriurInt:nte: se: menciunó un ciclo 01: un f\1J mvuiucra tres op--.;racioncs, 
selección, transposición y mutación, GALIB posee distintas alternativas para cada uno 
de estos operadores: 
5.1 Selección 
• 0ARuulellr.:lFheefSde,:/or{j. 
• GARankSelectorO· 
"'. GATournámentSelectorO·=/c 
• GADSSelectorO· 
• GASRSSelectorO· 
• GA UniformSelectorO. 
5.2 Transposición 
• ga. crossover(GAStringPartiaIMatchCrossover). 
• ga. crossover(GAStringTwoPointCrossover). 
..... ga,.cr.ossover(GAStringGenomee·: UniformCrossover) . 
.. • '-- 'gli;'crossover(GAStringGeriome::EvenOddCro§sover).·· ·'f.,·O 
• ga.crossover(GAStringGenome: :OnePointCrossover). 
• ga.crossover(GAStringGenome: :OrderCrossover). 
• ga.crossover(GAStringGenome: :CycleCrossover). 
5.3 Mutación 
• genome.mutator(GAStringSwapMutator). 
• genome.mutator(GAStringFl ipMutator). 
• genome.mutator(GAStringGaussianMutator). 
Se sugiere que para más información sobre las características del soft, remitirse a: 
mbwall@mit.edu. 
5.4 Definiendo una Representación 
Para el presente problema ss opto por la representación GAStringGenome que es una 
especialización de la estructura GAArrayGenome. 
Así, consideremos un ejemplo práctico 'respecto de la forma que tendría esta 
representación. 
Ejemplo: 
Supongamos el caso de 7 posibles cajeras, a distribuirse en 5 cajas; aquí el string 
(genome-cromosoma) tendría una longitud equivalente al número de cajas y los valores, 
que cada posición del string podría llegar a tomar (allele), sería el nombre de la cajera. 
Cromosoma, genoma, o string de longitud 5 = cantidad de cajas 
I Gen! IGen2 I Gen3 I Gen4 I Gen5 
La posición del Gen I se corresponde con la caja 1: La del gen2 con la caja 2 y así 

,Lll'':S 1 \':1 m:.:ntt. 
Li valor que cada Gen puedt: tomar es el correspondIente al nombre de cada cajera, en 
este caso: 
Nombre cajera 1 = A, Nombre cajera .2 = B, ........... , Nombre cajera 7 = G. 
Una vez instanciado un Gen recibe el nombre de aUele. De esta manera posibles string 
serían: 
, 
.A jB :C iD ¡E 
- . F" 
La cantidad de strings que pueden llegar a generarse, y que conforman el espacio de 
búsqueda, es igual a: 
ESPACIO DE BUSQUEDA = (NUMERO DE CAJERAS) NUMERO DE CUAS 
que para nuestro ejemplo 
ESPACIO DE BUSQUEDA = 75 = ]6807. 
Esto significa que la exploración para encontrar la o las respuestas correctas se debe 
hacer sobre 16.807 strings distintos, por tumos, entre los que se encuentran algunos 
como: 
Ic Ic Ic Ic Ic 
lA lE lA lA lE 
y que deberán ser eliminados por nuestro algoritmo atendiendo a las restricciones que 
se estén considerando, de hecho la restricción de que todas las cajeras sean distintas 
eliminaría los dos últimos strings presentados. 
5.5 Definiendo un Operador Genético 
En este caso y tras varias alternativas de prueba y error, teniendo ya la función 
de aptitud definida (se hará en ..l paso siguiente), se eligió un Algoritmo Genético del 
tipo de Estado-Permanente de la biblioteca de GALffi. 
GA with overltzpping populations (stetuly-state) Este algoritmo genético usa 
solapamiento de poblaciones en cantidades especificadas por el usuario. El algoritmo 
crea una población· de individuos por clonación de cromosomas. En cada generación 
el algoritmo crea una población temporal de individuos, agrega estos a la población 
previa, entonces elimina los peores individuos restableciendo, a' la población, su 
tamaño original. 
Particularmente se tiene como operadores interno de selección, transposición y 
mutación respectivamente a: 
GARankSelectorO: 
El seleccionador escoge el mejor miembro de la población cada vez. 
¡ra. crossol'cr(GAStrillJ!Gcllomc:: l JllfformCrossol'cr). 
.. ;:;,  .', I ... • 
t.· • '1, ., ••••••• .,. I • • '"1' ... I • • I , , • • • I • : ," • r I 1. •• • ¡ .• , ." '4 I I •• r  . 
1..1 ... j'\I.\I"- tI 'It\...\   .. '111 'Lt', l·; ... ./ \. il'i J{" .', 1 .. , ..... "', l.' ..... ' ... 1 ."'1 II''., 
PADRES 

------'--r---"'--'-- -... ---;A lB iC 'C e 
. ,-_. . 
,B ID iD I iG ¡E 
HIJOS 
lA ID le IG le ¡. 
lB lB ID le lE 
genome.mu.tator(GAStrlngFlipMutator). 
Aquí se cambia gen un al a=ar, reempla=andoló por olro gen del alfabeto código 
Elegidos ya los operadores, resta aún definir el valor de los parámetros con que 
cada uno se llevará a cabo, en nuestro caso, 
"' '-! . o', •• ,.. • • •  '''':'''.' • _",._ • • .;:':"'"..;;.'.; 
params.set(gaNnReplacement.pob ); II porcentaje de la poblacion a reemplazar 
params.set(gaNpopulationSize. pobJ); ji tamaño de la población 
params.set(gaNpCrossover,0.9); II probabilidad de crossover 
params.set(gaNpMutation. O. O J 2) .. II probabilidad de mutación 
params.set(gaNnGenerations. gener J).. II número de generaciones. 
El tamaño de la población pob 1, se trato de que responda a un crecimiento de 
tipo logarítmico, en función del crecimiento de las cajas y cajeras. 
Los rangos que se han planteados para cajas y cajeras van desde 5 a 100 Y 7 a 
120 respectivamente, y la población de strings nunca excede los 500 individuos. 
Esto significa que se hace evolucionar como máximo una población que ronda 
los 500 individuos intentando encontrar soluciones válidas en un espacio de búsqueda 
que como máximo es: 12r1°°=S,281797452201*lrrOB 
La cantidad de individuos reemplazados en cada generación se determina por la 
variable pob y en nuestro caso se encontraron buenos resultados haciendo que la 
cantidad de individuos reemplazados coincida con la peor mitad de la población. 
La cantidad de generaciones que se pretende evolucionar cada población 
responde también a una expresión logarítmica función de la cantidad de cajeras ta. La 
cantidad máxima de generaciones para 120 cajeras y 100 cajas es: 360. 
Un aspecto importante en la definición del algoritmo utilizado es la fonna en 
que terminará cada ciclo del AG. Entre otras posibilidades que brinda la herramienta 
estan: 
GABoolean GA GeneticAlgorithm:: TerminateUpon Generation(GA GeneticAlgorithm &) 
En ésta alternativo una vez alcanzado el número de generaciones que se quiere hacer 
evolucionar a la población automáticamente se detiene con la esperanza que se haya 
encontrado la solución. 
(¡.·111(){)1r.::ll. (,'   (1 [',': C::.:.·1 i.!..!(Ji:"rl: n::: Tcrnlin a1el pon (·011 \·cr;..:c:; í..';:f ::'      ,  .:; c;;""··· i;:'/1-i:h 11; ,,,) 
! .' . 1." JI' 
1,,'" ,'¡J.,u ,',/1('1', ,/:'; i/!/I('}"¡iI!' ,'¡¡ (jllC /a 1'\'/I//lL'/(J1/ ,'l' (/I'/It'//,' l'/h/l/d" 1')\ ,"r/I/.!"', 111/11 l'()""l"'gl<./II 
a un eierlO I'alor dc aptitud. Dicho de otra manera si elmlor de aptitud del mejor stril7Ks no ha 
combiac/o d1lrante: un cierto número de í!eneraciones se asume que el alJ!or/fmo a cOI1l'crí!ido. 
Es ésta última alternativa la utilizada para concluir con la búsqueda en la población 
principal 
5.6 Definiendo la Función Objetivo 
. ·_'-_ •. j .. ;.:.: ... =':.-' ......  .. ...: .. 
Una medida de la función Objetivo la da el número de restricciones que no se .. 
violan, es justamente este valor el que se intentara maximizar, De modo que la función 
objetivo es maximizar el número de restricciones que no se violan. 
El problema considerado tiene una particular ventaja como es que la cantidad de 
restricciones que deben satisfacerse se conoce en función del número de cajas, cajeras y 
tumos. 
Así cuando se plantea que se debe satisfacer la restricción de que todas las 
cajeras sean distintas, la cantidad que se debe alcanzar para kI cajas es: 
... ...- .. -.. , ........ . 
....... ,.' 
Cantidad de restricciones del tipo AIldistint, por cada turno = (kl*(kl-I))/2 
De modo que si tenemos 5 cajas la restricción de todas distintas deberá dar 5*412=10 
Si hay 100 cajas, las restricciones todas distintas a satisfacer serán: 1 00*99/2=4950. 
La restricción del tipo que una cajera no ocupe una determinada caja para 
cualquier turno es igual a la cantidad de cajeras que no deben estar en esas cajas. 
Entonces si se tiene que tres caJeras no pueden ocupar cajas determinadas, el' objetivo 
será tres, o sea se cuenta que tal caja no este ocupada por aquella cajera. 
La restricción del tipo que una cajera ocupe una determinada caja tiene similares 
características que la restricción anterior, 
Finalmente la restricción que una cajera no ocupe un turno determinado es igual 
al número de restricciones de ..  ste tipo planteada por la cantidad de cajas. Esto por cada 
tumo. 
Una alternativa para hacer evolucionar al algoritmo en cuanto a la función 
objetivo podría ser que la población inicialmente generada tienda a cumplir con la suma 
de las anterior restricciones, esto es: 
kl·(k-l )/2 + canto Restricc. del tipo no encaja + canto de Restricc. del tipo en caja + 
canto de Restricc. del tipo no en turno·k] 

 .. 
De modo que si se solicita que la cajera E no ocupe el primer turno, que la A, B 
Y e ocupen las tres primeras cajas, y que la cajera D no ocupe la quinta caja, a lo que 
hay que adicionarle el hecho que todas sean distintas, totalizamos una cantidad de 19 
restricciones que deben ser satisfechas. Una solución propuesta es: 
lA lB le ID IF 
A :B le ID !G l 
En la medida que el espacio solución se reduce con respecto al espacio de 
búsqueda (aumenta el número de restricciones) resulta cada vez más dificil 

~:t!s¡¡lccriaa. aún conociendo la cantidad de rcstriccionc::: qu.: d.:bbñ ser sutlsít!chas. 
5.7 Caracteristicas de la población inicial. 
La forma de generar inicialmente una población al azar y hacerla evolucionar 
hacia la solución es una alternativa válida pero que es más lenta que la que se propone 
seguidamente. 
Para garantizar que en la población principal tenga strings que satisfagan los 
distintos tipos de restricciones se corren inicialmente tantos AG corno tipos de 
restricciones existan. De esta manera si existen cuatro tipos de restricciones se correrán 
'" cc11"0  9 quegc:.ne..~Jt.1,,,~Japoblación t9m! ...  voluc.ioñ_:r::SRC,c..'yyente. ",' _ " 
" En este caso la POBAG 1 tiene solamente strings de cajeras distintas, POBAG2 strings 
de cajeras que no deben estar en una caja para cualquier tumo, POBAG3 strings de 
cajeras que para cualquier tumo ocupan una caja determinada. y finalmente POBAG4 
strings que solo tienen cajeras que no deben estar en un tumo dado. 
AGFINAL 
POB=POBAG 1 +POBAG2+POBAG3+POBAG4 
A partir de allí el AGFINAL evoluciona hasta encontrar la solución deseada, con 
los parámetros especificados con anterioridad y teniendo una función objetivo que se 
presenta a continuación. En ella se reflejan los distintos pesos 'que las diferentes 
restricciones llevan pues hay restricciones más dificil de satisfacer que otras, aquellas 
con mayor peso son las más dificil de satisfacer. 
score= «alldistint*2.12) + notincash + (incash*10) + (notinturn*2.12)); 
Los pesos que cada restricción tiene, se han determinado en forma empírica. 
6. DIAGRAMA DEL ESQtTEMA PROprrESTO EN LA rMPLEMENTACJÓÓ. 
NO 
INGRESO DE DATOS 
N° de cajeras 
N" de cajas 
Tl!rn()) 
GENERACION 
E POBLACIONES 
PARA CADA 
RESTRICCION 
CONFORMACION DE LA 
POBLACION INICIAL 
DEL AG PRINCIPAL 
EVOLUCION 
DELAG 
PRINCIPAL 
PRESENTAR SOLUCIONES 
De acuerdo al diaarama anterior el AG principal puede llegar n t,?yolucionar 
. . . 
\'::-iLl.'" \l"\.'';. i¡¡~:--lll.  .¡¡·II, .. :: ......... :: .• :: .. ::1 ... ,,\,;l¡,.:¡\\:. I...idl.·  .:un¡;"ljj.  i.)L ,dd~i' ... . " ." .... '" ........ .. 
L.1i iünciün JJ ¡ÜÜ paraiih .. irv;-,  IU\... -.;; .:\t;; pÜ.'ot;;; tsW rara \'t:l.. l)CUñ pu-':::'l\.! "IUU j" 
mayoría de las veces una sola corrida del algoritmo pennite encontrar la solución 
buscada. 
7. SOLIICIONES EECONTRADAS 
A continuación se presenta una tabla en la que aparecen distintas soluciones a 
problemas planteado.s y resueltos mediante técnicas de AG y con la función objetivo 
expresada con anterioridad. 
N' N° TURNOS 
CAJERAS CAJAS 
7 5 3 
20 11 3 
40 31 3 
120 100 3 
POBLACION EN RESTRICIONES 
STRINGS 
48 68 
100 387 
100 2175 
100 17286 
TIEMPO DE 
CALCULO (SEG) 
0.90 
1,10 
7,81 
107,56 
'" ........ -..  ------­
. ". '.  --:.-.-'" ;',:::-".- _., ... A modo comparativo se presentan dos ejemplos tratados mediante CLP-Ilog y se puede 
visualizar la diferencia de tiempos logrados con esta alternativa respecto de los AG. 
N°   TURNOS RESTRICIONES TIEMPO DE 
CAJERAS CAJAS CALCULO (SEG) 
7 5 3 44 0.055 
120 100 " 23755 2,69 
" Según pubhcaclón del VII RPIC Reumón de TrabajO en Procesamiento de la informaCión y Control pag 29[Rueda, 
Arias, Forradellas, IbañezJ. Setiembre 1997 San Juan Argentina. 
SOLUCIONES CLP-Ilog 
Las comparaciones fueron desarrolladas en un máquina Pentium y aplicaciones win32 • 
8. CONCLUSIONES 
Ventajas Teóricas de la Propuesta 
• Se obtienen respuestas cercanas al óptimo con solo algunas bibliotecas 
implementadas en C++. 
• Los tiempos de demora en encontrar una solución se pueden seguir reduciendo, 
ajustando determinados parámetros que hacen al funcionamiento de los AG. 
Desvefllajas teóricas de la Propuesta 
• Dada la característica pseudoaleatoria de la misma no siempre entrega la misma 
solución para detenninado grupo de restricciones ya que depende de la dirección en 
la que se movió la búsqueda. Esto se aleja un tanto de la realidad en la que cajeras 
de un supennercado ocupan las inmediaciones de un mismo lugar. 
• En el trato de CLP-I1og la respuesta inicial para un mismo grupo de restricciones es 
siempre la misma. 
Desventajas de la Implementaci6n 
• La implementación programada no reconoce cuando un conjunto de restricciones 
no puede ser satisfechas. Por lo que intentaría encontrar una respuesta 
indefinidamente. 
• No permite generar absolutamente todas las respuestas posibles para un conjunto de 
ressiones>> .. ;BI11,.de obtenerll·ettiempo ·eD-Alcanzarkl.:puede.··u1tat:.,\;; 
excesivo. 
• El tiempo que demanda la búsqueda resulta excesivo en la medida que aumenta el 
número de restricciones. 
COMPARAOON SOBRE: ALGOOOPLANTEADO CLP-Dog 
COMPLEJIDAD DEL BffiLIOTECAS EN C++ BffiLIOTECAS EN C++ MAS 
SOFfWARE. HERRAMIENTA Dog 
CARACTERISTICA DE LA PSEUDOALEATORIA DETERMINISTICA 
BUSQUEDA 
A IGUALDAD DE NO ENCUENTRA SIEMPRE ENCUENTRA LA MISMA 
CONDICIONES INICIALES. LA MISMA SOLUCION. SOLUCIONo 
ANTE POCOS CAMBIOS EN OBTIENE GENERALMENTE OBTIENE SOLUCIONES CERLAS RESTRICCIONES SOLUCIONES ALEJADAS DE CANAS A LAS ANTERIORES 
LAS ANTERIORES. 
TIEMPOS DE COMPUTOS EN ESTA IMPLEMENTACION 
PARA ENCONTRAR SOLUCIONES. T CLP-nog • 3 O TCLP-Dog 
SI NO EXISTEN SOLU- ESTA Dog PERMITE GENERAR 
ClONES PARA UN CON- IMPLEMENTACION NO UNA RESPUESTA 
JUNTO DE RESTRIC- RESPONDE CUANDO EL SISTEMA 
ClONES DADAS. NO TIENE SOLUCIONES 
ENCUENTRA TODAS ESTA IMPLEMENTA- SI, CON ESCASO ESLAS SOLUCIONES? ClON NO, LOGRARLO FUERZO DE CALCULO 
PUEDE INSUMIR MU- ADICIONAL 
CHO TIEMPO DE COMPUTO 
'J. RIBIOGRAFÍA CONSIDERADA 
• l.Jelleric AIgorirÍlms in Searc}¡ lllld Optimi:;lltio/!. LJa\'id Edward Goldberg, 
Addison-Wesley Pub. Co., 1989 ISBN 0-201-15767-5. 
• U" criterio para selecciollar operadores gelléticos para resoll'er CSP. Trabajo 
preselltado en el CACIC '98.(paper) 
• Heuristic Genetic Algorit"ms for COllstrained Problems A.E. Eiben, P-E. Raué, 
Zs. RllttkaJ'. Artificial 11ltelligellce Group. Departamellf 01 .1t1athel7latics and 
Computer Scienee Vrije Ulliversiteit Amsterdam. (paper) 
• Solving Constrain Satisfaction Problems Using Gene/le Algorithms. A.E. Eiben, 
P-E. Raué, Zs. Ruttkay. Artificial. Intelligenee Group. Departament of 
Mathematies and Computer Seienee Vrije Universiteit Amsterdam.(paper) 
• A Genetie Algorithmfor Resouree_ Constra;ned Seheduling Tésis Doctoral de 
Matthew Bartschi Wall, Massachusetts Institute ofTecnology 
