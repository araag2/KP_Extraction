Hacia una integración de argumentación rebatible y ontologías en la web semántica
﻿
La World Wide Web actual está basada principalmente en documentos escritos con un énfasis
en su presentación visual. La Web Semántica es una visión futura de la Web en la cual la información tiene un significado exacto otorgado por medio de definiciones de ontologías. En los
estándares propuestos por la W3C, no es posible razonar en presencia de información incompleta
y potencialmente contradictoria.
Como parte de esta línea de investigación, estamos trabajando en la aplicación de la argumentación rebatible al problema de la representación de ontologías en el contexto de la Web
Semántica.
Palabras clave: Argumentación rebatible, Web Semántica, Representación de ontologías.
1. Introducción y motivaciones
LaWorldWideWeb actual está basada principalmente en documentos escritos con un énfasis en su
presentación visual teniendo en cuenta a usuarios humanos y no a los programas de computadora. La
Web Semántica [BLHL01] es una visión futura de laWeb en la cual la información tiene un significado
exacto; permitiendo así que las computadoras entiendan y razonen en base a la información encontrada
en la Web.
La Web Semántica propone resolver el problema de la asignación de semántica a los recursos
web por medio de definiciones de ontologías. En el contexto del área de compartir conocimiento, el
término ontología se refiere a la especificación de una conceptualización. Esto es, una ontología es
una descripción de los conceptos y relaciones que pueden existir para un agente o una comunidad de
agentes [Gru93].
En los enfoques actuales, las ontologías son descriptas en un lenguaje de representación de ontologías. El Lenguaje de Ontologías Web (OWL) [MvH04] es el lenguaje propuesto por el estándar del
Consorcio de la W3C para tal fin. Aunque dicho lenguaje provee un número expresivo de constructores, el mismo adolece del problema de no permitir razonar en presencia de información incompleta y
potencialmente contradictoria.
Por lo tanto, como parte de esta línea de investigación, estamos trabajando en la aplicación de
la argumentación rebatible al problema de la representación de ontologías en el contexto de la Web
Semántica.
1LIDIA es un miembro del IICyTI (Instituto de Investigación en Ciencia y Tecnología Informática).
2. Marco de trabajo: Argumentación Rebatible
La Programación en Lógica Rebatible (DeLP) [GS04] provee un lenguaje para la representación
de conocimiento y el razonamiento que utiliza la argumentación rebatible [CML00, PV02, SL92]
para decidir entre conclusiones contradictorias a través de un análisis dialéctico. La codificación de
conocimiento por medio de un programa DeLP provee un buen balance entre expresividad e implementabilidad. La investigación reciente ha mostrado que DeLP provee un marco apropiado para
construir aplicaciones del mundo real (e.g., algoritmos de agrupación [GC04] y formularios web inteligentes [GCS05, GCS07]) que pueden lidiar con información incompleta y potencialmente contradictoria.
En un programa lógico rebatible P = (Π,∆), se pueden distinguir un conjunto ∆ de reglas
rebatibles P −≺ Q1, . . . , Qn, y un conjunto Π de reglas estrictas P ← Q1, . . . , Qn. La derivación de
literales en DeLP resulta en la construcción de argumentos. Un argumento 〈A, H〉 es un conjunto no
contradictorio y minimal de claúsulas fijas A de ∆ que permite derivar un literal fijo H posiblemente
usando reglas fijas de Π.
Debido a que los argumentos pueden estar en conflicto (concepto capturado en términos de una
contradicción lógica) puede definirse una relación de ataque entre argumentos. Usualmente se define
un criterio para decidir entre dos argumentos en conflicto. Si el argumento atacante es estrictamente
preferido sobre el argumento atacado, entonces éste es llamado un derrotador propio; en cambio, si
no hay comparación posible, entonces éste es llamado un derrotador por bloqueo.
Para determinar si un argumento dado A es considerado finalmente no derrotado (o garantizado),
se lleva a cabo un proceso dialéctico recursivo, en el cual son tomados en cuenta los derrotadores para
A, los derrotadores de éstos y así sucesivamente. Dado un programa DeLP P y una consulta H , la
respuesta final a H con respecto a P toma en cuenta tal análisis dialéctico. La respuesta a una consulta
puede ser: sí, no, indeciso, o desconocido.
3. Trabajo en progreso: Hacia las δ-ontologías
Considerando las dificultades de los enfoques actuales presentadas en la Sección 1, estamos trabajando en un formalismo alternativo de representación de ontologías basado en argumentación rebatible. A continuación, presentamos algunos de los resultados obtenidos.
Intuitivamente, una ontología es una colección de información, incluyendo generalmente información acerca de clases y propiedades. Plantearemos una definición formal de ontología y veremos
cómo representar, por cuestiones de espacio, unos pocos ejemplos en este formalismo. Luego veremos
cómo a esta definición de ontología puede asignarsele semántica a través de un programa DeLP.
Definición 3.1 (δ-Ontología) Una δ-ontología O es una 8-upla:
O = 〈HD,HS,AD,AS, CD, CS, I,R〉
donde:HD es un conjunto de reglas rebatibles para establecer la jerarquía de clases;HS es un conjunto de reglas estrictas para establecer la jerarquía de clases;AD es un conjunto de reglas rebatibles
para establecer atributos de clases; AS es un conjunto de reglas estrictas para establecer atributos
de clases; CD es un conjunto de reglas rebatibles para establecer restricciones sobre clases e instancias; CS es un conjunto de reglas estrictas para establecer restricciones sobre clases e instancias; I
es un conjunto de hechos para definir individuos de clases; y, R es un conjunto de relaciones entre
individuos.
Definición de clases y subclases
Las clases corresponden a conjuntos de individuos y se definen mediante predicados unarios. Es
decir, una clase C se representará con un predicado unario C(X)2. La noción de subclase relaciona
una clase S más específica con una claseC. En nuestro acercamiento, consideraremos dos nociones de
subclase: subclase estricta (representada con una regla estricta C(X) ← S(X)) y subclase rebatible
(representada con una regla rebatible C(X) −≺ S(X)). Es necesario notar que la decisión de cuál tipo
de noción de subclase es necesario utilizar es puramente una decisión del ingeniero de conocimiento.
Ejemplo 3.1 La idea que expresa que “absolutamente todos los individuos de la clase “estudiante de
doctorado son individuos de la clase persona” (i.e., la clase PhdStudent es subclase estricta de la clase
Student), se representará con una regla estricta en el conjuntoHS:
Student(X) ← PhDStudent(X).
En cambio, la idea que establece que “usualmente todos los individuos de la clase estudiante de
doctorado son individuos de la clase de individuos de la clase persona insolvente económicamente”
(i.e., la clase PhDStudent es subclase rebatible de la clase NonSolvent), se representará con una regla
rebatible en el conjuntoHD:
NonSolvent(X) −≺ PhDStudent(X).
Definición de individuos
La noción de instancia es la relación de pertenencia de un individuo a una clase. En nuestro
acercamiento, la noción de individuo perteneciente a una clase está dada por un conjunto de hechos
formado por predicados unarios fijos donde el nombre del predicado denota una clase y su argumento
corresponde a una constante representando a un individuo en dicha clase.
Ejemplo 3.2 Para representar la información que expresa que John es un estudiante de doctorado y
que Mark es millonario usaremos los hechos pertenecientes al conjunto I:
PhDStudent(john)
Millionaire(mark)
Definición de relaciones entre individuos
Para denotar relaciones entre dos individuos de dos clases diferentes utilizaremos hechos binarios
en el conjuntoR.
Ejemplo 3.3 Para establecer que el padre de John es Eddie, usaremos el siguiente hecho en el conjuntoR:
Father(john, eddie)
El enfoque a la definición de ontologías que proponemos no limita el uso de relaciones a relaciones
binarias; por el contrario, podemos utilizar relaciones n-arias para modelar relaciones generales.
Ejemplo 3.4 Para establecer que un banco posee la información concerniente a que John vive en
Krakosia y tiene un salario de $400 mensuales, tendremos el hecho enR:
Info(john, krakosia, 400)
2En este aspecto, nuestro enfoque coincide con los los enfoques basados en las Lógicas para la Descripción [BCM+03].
Definición de atributos
El mundo de clases e individuos es muy limitado si sólo se pueden definir taxonomías. Los atributos permiten especificar hechos generales sobre los miembros de las clases y hechos específicos sobre
los individuos. Separaremos los atributos en estrictos y rebatibles. También consideraremos el uso de
reglas para especificar chequeo de tipos.
Ejemplo 3.5 La clase Persona posee los atributos nombre, edad y sexo de tipo string, entero y string
respectivamente. Esta información se representa con las siguientes reglas en el conjunto AS:
string(Y ) ← Person(X), name(X, Y )
integer(Y ) ← Person(X), age(X, Y )
string(Y ) ← Person(X), sex (X, Y )
También consideraremos atributos emergentes de la ontología que proveen conclusiones plausibles en presencia de información incompleta y potencialmente contradictoria. Como el valor de tales
atributos puede cambiar en presencia de nuevo conocimiento, los llamaremos atributos rebatibles y
éstos serán expresados como reglas en el conjunto AD.
Ejemplo 3.6 Para expresar que un estudiante de doctorado usualmente tiene un estado económico
poco líquido a menos que su padre sea rico, usaremos las reglas en AD:
Status(X, non liquid) −≺ PhDStudent(X)
Status(X, liquid) −≺ PhDStudent(X),Father(X,Y ),Rich(Y ).
Definición de restricciones sobre clases e instancias
Una vez definidos las clases, los individuos, sus atributos y las relaciones entre individuos de
clase, nos interesa poder especificar restricciones que permitan razonar sobre ellos y así enriquecer
las conclusiones que se pueden obtener sobre los datos. Para ello, utilizaremos dos conjuntos CD y CS
especificando restricciones rebatibles y estrictas respectivamente.
Ejemplo 3.7 Para indicar que las nociones de liquidez e iliquidez son opuestas, escribiremos en el
conjunto CS:
∼Status(X, liquid) ← Status(X, non liquid)
Para indicar que una persona que no es solvente usualmente no tiene tiene un buen ingreso,
utilizaremos la regla en CD:
∼Good income(X) −≺ ∼Solvent(X)
Razonamiento con δ-ontologías
Dada una definición de una ontología, nos interesa poder razonar sobre su contenido. En virtud
de que la información contenida en la misma puede ser incompleta y potencialmente contradictoria,
realizaremos un análisis dialéctico sobre las reglas y hechos que la conforman.
Definición 3.2 (Semántica de una δ-ontología) Una δ-ontologíaO = 〈HD,HS,AS,AD, CD, CS, I,R〉
se corresponderá con un programa lógico rebatible:
P = (HS ∪ AS ∪ CS ∪ I ∪R,HD ∪ AD ∪ CD)
Entonces, dada una definición de una ontología O, nos interesarán todos los argumentos que se
pueden obtener a partir del programa DeLP P que le da semántica. Estos argumentos serán utilizados
luego en un análisis dialéctico para obtener las conclusiones garantizadas a partir de la ontología.
Agradecimientos
Esta investigación está financiada por la Agencia Nacional de Promoción Científica y Tecnológica
(PICT 2002 No. 13.096, PICT 2003 No. 15.043, PAV 2004 076), por Proyecto 24/ZN10 (Secretaría
de Ciencia y Tecnología, Universidad Nacional del Sur, Argentina) y por CONICET (Argentina).
