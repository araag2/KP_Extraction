Modificaci√≥n al kernel Linux para redes de alta velocidad
Ôªø
La 
ombina
i√≥n de nuevas te
nolog√≠as de redes de
alta velo
idad (
on 
apa
idades de transmisi√≥n en
el orden de Gigabits por segundo, 
omo Ethernet
10Gbps) y la 
apa
idad de 
√≥mputo en los pro
esadores de √∫ltima genera
i√≥n ha impulsado el na
imiento de nuevos paradigmas de pro
esamiento
distribuido. Sin embargo, en esta evolu
i√≥n, el dise√±o de los sistemas operativos de prop√≥sito general y las arquite
turas de hardware m√°s utilizadas
en servidores de red y esta
iones de trabajo han 
omenzado a dar se√±ales de limita
iones 
on respe
to
a la es
alabilidad.
El presente art√≠
ulo men
iona los fa
tores que
motivan la b√∫squeda de solu
iones alternativas para
el pro
esamiento del tr√°
o de red y presenta algunos de los nuevos proye
tos originados, tanto en
entornos a
ad√©mi
os 
omo en la industria, para resolver los problemas men
ionados.
Finalmente, este trabajo propone una modi
a
i√≥n al dise√±o del subsistema de red del kernel Linux 2.6 basada en ideas publi
adas re
ientemente.
Se intenta evaluar el efe
to de ha
er un uso asim√©tri
o de los pro
esadores en una m√°quina 
on
arquite
tura SMP (o de los n√∫
leos en un pro
esador 
on varios nu
leos de eje
u
i√≥n) asignando un
pro
esador (o un sub
onjunto de ellos) de manera
ex
lusiva al pro
esamiento de red. De esta forma se
intenta redu
ir el overhead 
ono
ido 
omo intrusi√≥n
del sistema operativo.
1. Introdu

i√≥n
No 
aben dudas de que el tr√°
o de red aso
iado a los servi
ios a
tuales mantendr√° el 
re
imiento
exponen
ial que lo ha 
ara
terizado en los √∫ltimos
a√±os. A esto, deben agregarse las nuevas formas de
aprove
har las √∫ltimas te
nolog√≠as en tele
omuni
a
iones, tanto en entornos lo
ales 
omo en redes
distribuidas geogr√°
amente. A modo de ejemplo se
pueden men
ionar: web servi
es, streaming de audio y video, servi
ios de voip, la te
nolog√≠a RFID,
variantes de 
√≥mputo distribuido y Network Centri
 Computing 
omo pro
esamiento sobre 
lusters
y grids, soporte para data 
enters y Storage Area
Networks 
omo Ip Storage, et
. Las te
nolog√≠as de

apas inferiores ya ofre
en 
apa
idades de transmisi√≥n de datos lo su
ientemente r√°pidas y a 
ostos
tan razonables que est√°n dejando de ser de ser s√≥lo
te
nolog√≠as de 
omuni
a
iones para ser usada tambi√©n 
omo te
nolog√≠as de ba
kplane.
Durante a√±os, mientras 
re
√≠a la disponibilidad
de an
ho de banda y mejoraba la performan
e del
hardware de red, el poder de 
√≥mputo ofre
ido por
las m√°quinas 
one
tadas a la red, tanto 
lientes 
omo servidores, era su
iente para realizar el pro
esamiento ne
esario para enviar y re
ibir paquetes
sin interferir en la eje
u
i√≥n de los pro
esos de usuario. Sin embargo, las arquite
turas de hardware y
el dise√±o de software del subsistema de red de las
maquinas a
tuales han 
omenzado a dar se√±ales de

iertas limita
iones 
on respe
to a la es
alabilidad.
1
2. Los problemas a
tuales
2.1. A

esos a memoria
Las arquite
turas de hardware de los servidores
a
tuales no fueron dise√±adas para el volumen de
tr√°
o esperado en los pr√≥ximos a√±os. Tanto el bus
del sistema 
omo la memoria prin
ipal representan
importantes 
uellos de botella, agregando laten
ia
y generando 
i
los o
iosos de la CPU.
Los datos, en
abezamiento y des
riptor de 
ada
paquete, asi 
omo los par√°metros de 
ontrol de la
transmisi√≥n, son mantenidos en la memoria prin
ipal. Esto provo
a que la CPU a

eda 
in
o ve
es
a la memoria RAM para pro
esar un √∫ni
o
paquete [8‚ÑÑ y 
ada a

eso impli
a una gran 
antidad de 
i
los de CPU desperdi
iados debido a las
diferen
ias de velo
idad entre la CPU y el a

eso a
memoria
1
.
Existe una regla emp√≠ri
a generalmente a
eptada que indi
a que se ne
esita 1 MHz de pro
esamiento de CPU para manejar 1 Mbps de tr√°
o de
red (esta rela
i√≥n empeora a medida que aumenta la fre
uen
ia de la CPU) [25‚ÑÑ. Hasta ha
e unos
a√±os, las mejoras en performan
e de CPU y memoria se hab√≠an mantenido alineadas 
on el in
remento del an
ho de banda disponible, sin embargo en
√©ste √∫ltimo tiempo han 
omenzado a notarse las limita
iones de las arquite
turas a
tuales mar
adas
prin
ipalmente por la laten
ia en el a

eso a la memoria prin
ipal. A 10 Gbps, los paquetes arriban
m√°s r√°pido de lo que un sistema puede pro
esarlos
[25, 28‚ÑÑ.
2.2. Computa
i√≥n de proto
olos
Las pilas de proto
olos a
tuales se basan en algoritmos y 
√≥digo 
reados en los primeros a√±os del
desarrollo del networking, 
on fun
ionalidad agregada a lo largo del tiempo. Esto result√≥ en dise√±os
e imlementa
iones no del todo e
ientes, in
rementando el tiempo y re
ursos ne
esarios para el pro
esamiento de 
ada paquete.
Numerosas publi
a
iones plantean que las pilas
de proto
olos utilizadas en los a
tuales sistemas
operativos han quedado obsoletas [25, 28, 8, 11, 20,
1
Mientras una CPU moderna puede eje
utar varias instru

iones por nanosegundo, el a

eso a la 
a
he tardar√°
aproximadamente 50ns. Si el a

eso es a la RAM, la laten
ia
es notablemente superior.
27, 16‚ÑÑ. Los problemas estru
turales que se presentan en estas implementa
iones fueron heredados,
en gran medida, por de
isiones de dise√±o vol
adas
en las primeras versiones de t
p/ip, pensadas para redes soportadas por medios f√≠si
os mu
ho menos 
onables y 
on velo
idades de transmisi√≥n que
representan s√≥lo una peque√±a fra

i√≥n de los est√°ndares a
tuales. Adem√°s, si bien es 
ierto que se
han agregado nuevas fun
ionalidades a los proto
olos originales, en general, estas modi
a
iones al

√≥digo se han implementado 
omo par
hes al dise√±o original, resultando en una mayor laten
ia en
el pro
esamiento. Todo indi
a que es tiempo de un
nuevo dise√±o.
2.3. Overhead del sistema
Para 
ada paquete enviado o re
ibido se realizan
a
tividades tales 
omo manejo de buers, transi
iones de modo usuario a modo kernel y vi
eversa, s
hedulling y manejo de interrup
iones. Estas
a
tividades se implementan 
omo threads que 
onsumen 
i
los de CPU y que deben ser swit
headas
entre s√≠ y 
on las apli
a
iones de usuario, la pila
de proto
olos y otras fun
iones del sistema, provo
ando un fen√≥meno 
ono
ido 
omo intrusi√≥n del
sistema operativo.
La intrusi√≥n es un nombre nuevo para un 
on
epto que existe desde que las 
omputadoras basan
su fun
ionamiento en un pro
eso monitor o sistema
operativo, y representa el overhead introdu
ido por
√©ste al realizar sus fun
iones prin
ipales de virtualiza
i√≥n y prote

i√≥n de los re
ursos de la m√°quina.
Las interrup
iones por hardware y las system 
alls
implementadas 
omo traps son un ejemplo de intrusi√≥n por me
anismo (intrusi√≥n rela
ionada 
on la
implementa
i√≥n de las fun
iones del sistema operativo)
2
. Los sistemas multipro
esadores tienen m√°s
probabilidades de sufrir intrusi√≥n por me
anismo,
ya que la mayor√≠a de los sistemas operativos de pro2
En los modelos tradi
ionales de drivers para interfa
es
de red, el pro
esador es interrumpido por 
ada paquete re
ibido. Sin embargo, las interfa
es de alta velo
idad pueden
re
ibir miles de paquetes por segundo, generando miles de
interrup
iones (y, en 
onse
uen
ia, miles de inter
ambios de
tareas) por segundo. Para mejorar la performan
e de Linux
en sistemas high-end, los desarrolladores del subsistema de
red del kernel linux han 
reado una nueva interfa
e, basada en la t√©
ni
a de polling, que fue bautizada 
omo NAPI
(new API) [1, 4‚ÑÑ. S√≥lo unos po
os drivers del kernel o
ial
la utilizan.
2
p√≥sito general utilizados en √©stas m√°quinas, fueron
adaptados de una base unipro
esador. Por lo tanto,
adem√°s de 
oordinar el a

eso de m√∫ltiples apli
a
iones independientes a un √∫ni
o re
urso f√≠si
o, el
sistema operativo debe propagar esta prote

i√≥n a
lo largo de m√∫ltiples CPUs.
En resumen, m√∫ltiples interrup
iones de hardware, pilas de proto
olos de red implementadas de
manera ine
iente, demasiados a

esos a memoria
y un overhead signi
ativo agregado por el sistema
operativo, 
onsumen una 
antidad de 
i
los de CPU
por paquete sorprendentemente alta. En experimentos 
on servidores web sobre
argados, se

omprob√≥ que hasta un 70% del tiempo de
uso de CPU era 
onsumido por el pro
esamiento de red, dejando apenas un 30% para
el pro
eso que implementa el servidor web
[5‚ÑÑ.
Los investigadores son 
on
ientes de que estos
fa
tores requerieren 
ambios importantes en el 
odise√±o hardware/software de los servidores de red y
han 
omenzado a proponer algunas solu
iones para
ata
ar diferentes aspe
tos de las implementa
iones
de estos proto
olos.
3. Algunas Solu
iones
Existe un 
onjunto de proye
tos, tanto a
ad√©mi
os 
omo 
omer
iales, que intentan mitigar algunos
de los fa
tores men
ionados anteriormente. Algunas
solu
iones se basan ex
lusivamente en modi
a
iones orientadas al hardware y otras s√≥lo proponen
nuevos dise√±os de software. Sin embargo, en general se plantea una 
ombina
i√≥n de nueva te
nolog√≠a
de hardware 
on optimiza
iones al sistema operativo y en parti
ular al subsistema de red.
A 
ontinua
i√≥n se des
riben algunos de ellos a
modo de prueba 
onrmatoria de que la problem√°ti
a men
ionada es real y representa una de las mayores preo
upa
iones de los responsables del dise√±o
de hardware y software de red.
La ini
iativa denominada TCP Ooad Engine
[18, 14, 8‚ÑÑ, pero m√°s 
ono
ida 
omo TOE, propone
el uso de hardware espe
ializado en la propia pla
a de red para realizar algunas o todas las tareas
aso
iadas 
on el pro
esamiento de los proto
olos
y de esta forma aliviar al pro
esador prin
ipal del
sistema.
RDMA (Remote Dire
t Memory A

ess) [19, 8‚ÑÑ
es una te
nolog√≠a que permite que el sistema que env√≠a los datos, los ubique en una posi
i√≥n espe
√≠
a
en la memoria del sistema que los re
ibe. De esta
forma, se requiere menos interven
i√≥n de la CPU
del re
eptor para mover los datos entre buers de
su memoria.
Las solu
iones 
ono
idas 
omo Onloading [5, 6,
7, 8, 9, 10, 16‚ÑÑ mantienen el pro
esador (o pro
esadores) del sistema 
omo el dispositivo de pro
esamiento prin
ipal para manejar el tr√°
o de red.
La prin
ipal diferen
ia 
on los sistemas a
tuales es
que estos proye
tos proponen una parti
i√≥n del sistema, asignando de manera ex
lusiva un sub
onjunto de pro
esadores en una m√°quina SMP (o un
sub
onjunto de 
ores en una m√°quina multi
ore) al
pro
esamiento de red. Se logra una mayor e
ien
ia redu
iendo el overhead generado por la instrusi√≥n del sistema operativo (interrup
iones y 
ontext
swit
hes).
Se han planteado optimiza
iones y versiones livianas del proto
olo TCP [22, 23‚ÑÑ, modi
a
iones
a la implementa
i√≥n de la 
apa de so
kets [21, 16‚ÑÑ,
optimiza
iones a nivel de driver de dispositivos de
red (
omo la alternativa NAPI, men
ionada anteriormente) [17, 12‚ÑÑ y algunas propuestas m√°s integrales 
omo los Network Channels [20‚ÑÑ men
ionados
re
ientemente por la 
omunidad de desarrolladores
del subsistema de red del kernel linux. Por √∫ltimo, se est√°n desarrollando varias APIs (Mi
rosoft,
POSIX, Linux) [16‚ÑÑ 
on una sem√°nti
a asin
r√≥ni
as para el a

eso a so
kets o ar
hivos permitiendo
un alto nivel de 
on
urren
ia sin el overhead del
uso de threads, in
rementando 
onsiderablemente
la performan
e de las apli
a
iones basadas en red.
4. L√≠nea de trabajo a
tual
El in
remento en la disponibilidad de las a
tuales m√°quinas SMP sumado al advenimiento de las
futuras genera
iones de pro
esadores que ofre
er√°n
m√∫ltiples n√∫
leos de pro
esamiento en un mismo

hip nos brindan la oportunidad de utilizar y distribuir el poder de 
√≥mputo de nuevas formas. Queda
abierto el desaf√≠o de en
ontrar la mejor forma de
aprove
har estos re
ursos.
En la evolu
i√≥n de los sistemas operativos, desde el antiguo dise√±o de kernel monol√≠ti
o, pasando
por mi
rokernels, exokernels (kernels verti
ales) y
otras variantes, se ha llegado a lo que se 
ono
e a
3
tualmente 
omo kernel a
tivo. Este nuevo dise√±o,
presentado por Steve J. Muir en el a√±o 2001 en su
tesis de do
torado [6‚ÑÑ, plantea un kernel espe
ializado en pro
esamiento de red, motivado prin
ipalmente por la po
a e
ien
ia 
on que los sistemas
operativos de prop√≥sito general realizan este tipo
de tareas en m√°quinas SMP. Su trabajo propone
dedi
ar, de manera ex
lusiva, uno o m√°s pro
esadores a tareas espe
√≠
as del kernel, permitiendo
que las apli
a
iones de usuario se eje
uten, 
on la
menor 
antidad de intrusi√≥n por parte del sistema
operativo, en el resto de los pro
esadores. De esta
forma, el kernel deja de ser un proveedor pasivo de
servi
ios para 
onvertirse en un 
omponente a
tivo
del sistema, y la separa
i√≥n f√≠si
a de pro
esos de
usuario 
on respe
to a threads del kernel evita in
urrir en el overhead ne
esario para implementar el
modelo usuario/kernel.
A nes del a√±o 2002, Kalpana Banerjee propone, 
omo parte de su tesis de Master [7‚ÑÑ, una nueva
arquite
tura de software para servidores de Internet denominada TCP Servers. Tomando algunas de
las ideas de Muir, esta publi
a
i√≥n ofre
e un nuevo
dise√±o para el subsistema de red del kernel Linux
y evalua una implementa
i√≥n en un 
luster, usando un nodo 
omo el hardware espe
ializado para el
pro
esamiento de red de todo el 
luster. M√°s tarde,
el mismo grupo de trabajo que parti
ip√≥ en la tesis
de Banerjee, miembros del Laboratory for Network
Centri
 Computing [24‚ÑÑ, publi
a el dise√±o de una
variante de TCP Servers para una maquina 
on
arquite
tura SMP [5‚ÑÑ y una implementa
i√≥n para
el kernel linux 2.4.
Nuestra propuesta 
onsiste en 
ontinuar en esta
l√≠nea de investiga
i√≥n, bus
ando la forma de adaptar el kernel linux a los altos requerimientos de pro
esamiento de red a los que estar√°n expuestos los
servidores, dispositivos de red y esta
iones de trabajo en un futuro 
er
ano. Se pretende realizar una
modi
a
i√≥n al dise√±o del subsistema de red del
kernel Linux 2.6
3
, basada en las ideas publi
adas
en los trabajos men
ionados anteriormente. Para
3
En este momento, el kernel linux 2.6 ha al
anzado un
nivel de estabilidad, robustez y exibilidad notables. Prove√©
soporte para m√°s de veinte arquite
turas, in
luyendo todo
tipo de m√°quina NUMA, SMP y dispositivos embebidos.
Mejor√≥ 
onsiderablemente gran parte de los subsistemas 
on
respe
to al kernel 2.4 teniendo 
omo prin
ipal objetivo la
es
alabilidad. Y nalmente, es el kernel que se distribuye
por defe
to en la gran mayoria de las distribu
iones GNU /
Linux.
evaluar los resultados de las modi
a
iones se realizar√° una implementa
i√≥n prototipo.
Linux es el kernel monol√≠ti
o m√°s utilizado en los
sistemas operativos libres y por lo tanto representa
una gran oportunidad para estudiar y proponer optimiza
iones. Adem√°s es altamente modular y ofre
e una API bien do
umentada, lo que fa
ilita realizar modi
a
iones a su 
√≥digo. El tema expuesto
en el presente trabajo representa una preo
upa
i√≥n
real de los desarrolladores del subsistema de red
del kernel y es materia de dis
usi√≥n en las listas de

orreos pertinentes.
Complementando este trabajo, se har√° un estudio exhaustivo de los problemas men
ionados anteriormente y de algunas solu
iones propuestas por
diversos grupos a
ad√©mi
os y del √°mbito industrial.
En √©ste √∫ltimo entorno, el 
aso que desta
a del resto es la nueva te
nolog√≠a que est√° siendo desarrollada por Intel
r¬©, denominada I/O A

eleration Te
hnology [8, 9‚ÑÑ, y que utiliza varios de los 
on
eptos
men
ionados en los trabajos 
itados anteriormente.
Con este trabajo se pretende estudiar en profundidad una problem√°ti
a que est√° 
aptando la aten
i√≥n de numerosos grupos de investiga
i√≥n y que
a√∫n no presenta una solu
i√≥n 
ompletamente denida. Las propuestas que han demostrado tener
mayor √©xito son aquellas que ata
an el problema a
nivel de sistema 
ompleto (hardware y software) y,
desde esta perspe
tiva, el sistema operativo es un

omponente es
en
ial.
Referen
ias
[1‚ÑÑ The Linux TCP/IP Sta
k: Networking for Embedded Systems (Networking Series). Thomas
Herbert. Charles River Media. May 2004.
[2‚ÑÑ Understanding Linux Kernel 3rd Edition. Daniel P. Bonet, Mar
o Cesati. O'Reilly. Nov
2005.
[3‚ÑÑ Linux Kernel Development 2 Edition. Robert
Love. Novell Press. Jan 2005.
[4‚ÑÑ Linux Devi
e Drivers 3rd Edition. Jonathan Corbet, Alessandro Rubini, Greg KroahHartman. O'Reilly & Asso
iates. February
2005.
[5‚ÑÑ M. Rangarajan, A. Bohra, K. Banerjee, E. V.
Carrera, R. Bian
hini. TCP Servers: Ooa4
ding TCP Pro
essing in Internet Servers. Design, Implementation, and Performan
e.
[6‚ÑÑ S. J. Muir. Piglet: An Operating System for
Network Applian
es.
[7‚ÑÑ K. Banerjee. TCP Servers: A TCP/IP ooading ar
hite
ture for internet servers, using
memory-mapped 
ommuni
ation.
[8‚ÑÑ Intel. A

elerating High-Speed Networking
with Intel I/O A

eleration Te
hnology.
[9‚ÑÑ Intel. Server Network I/O A

eleration. Fundamental to de Data Center of the Future.
[10‚ÑÑ G. Regnier, S. Markineni, R. Illikkal, R. Iyer,
D. Minturn, R. Huggahalli, D. Newell, L. Cline, A. Foong. TCP Onloading for Data Center
Servers. Published by the IEEE Computer So
iety.
[11‚ÑÑ A. Grover, C. Lee
h. A

elerating Network
Re
eive Pro
essing. Pro
eedings of the Linux
Symposium.
[12‚ÑÑ J.A. Ron
iak, J. Brandeburg, G. Venkatesan,
M. Willams. Networking Driver Performan
e
and Measurement - e1000 A Case Study. Pro
eedings of the Linux Symposium.
[13‚ÑÑ P. Pietikainen. Hardware-assisted Networking
Using S
heduled Transfer Proto
ol on Linux.
Department of Ele
tri
al Engineering, University of Oulu, Oulu, Finland.
[14‚ÑÑ K. Hyong-Youb. Improving Networking Server
Performan
e with Programmable Network Interfa
es.
[15‚ÑÑ S. P. Bhatta
harya, V. Apte. A Measurement
Study of the Linux TCP/IP Sta
k Performan
e and S
alability on SMP systems. Indian Institute of Te
hnology, Bombay.
[16‚ÑÑ Y. Turner, T. Bren
ht, G. Regnier, V. Saletore, G. Janakiraman, B. Lynn. S
alable
Networking for Next-Generation Computing
Platforms. Pro
eedings of the Third Annual
Workshop on System Area Networks, Madrid,
Spain, February 2004.
[17‚ÑÑ L. Grossman. Large Re
eive Ooad implementation in Neterion 10GbE Ethernet driver.
Pro
eedings of the Linux Symposium.
[18‚ÑÑ http://en.wikipedia.org/wiki/TCP/IP_ooad_engine
[19‚ÑÑ http://en.wikipedia.org/wiki/Rdma
[20‚ÑÑ http://lwn.net/Arti
les/169961/
[21‚ÑÑ L. Deri. Improving Passive Pa
ket Capturing:
Beyond Devi
e Polling.
[22‚ÑÑ C. Jin, D. Wei, S. H. Low, G. Buhrmaster, J.
Bunn, D. H. Choe, R. L. A. Cottrel, J. C. Doyle, W. Feng, O. Martin, H. Newman, F. Paganini, S. Ravot, S. Singh. FAST TCP: From
theory to experiments.
[23‚ÑÑ A. Dunkels. Minimal TCP/IP implementation
with proxy support.
[24‚ÑÑ http://dis
olab.rutgers.edu/
[25‚ÑÑ A. P. Fonng, T. R. Hu, H. H. Hum, J. P.
Patwardhan, G. J. Regnier. Intel Corporation.
Department of Computer S
ien
e. Duke University. TCP Performan
e Re-Visited.
[26‚ÑÑ Ph.D Dissertation. Peter Drus
hel. Operating
System Support for High-Speed Networking.
[27‚ÑÑ P. Wan, Z. Liu. Computer and Information
S
ien
e Department. Indiana University Purdue University Indianapolis. Operating System Support for High-Performan
e Networking, A Survey.
[28‚ÑÑ N. L. Binkert, L. R. Hsu, A. G. Saidi, R.
G. Dreslinski, A. L. S
hultz, S. K. Reinhardt. Advan
ed Computer Ar
hite
ture Lab.
EECS Department, University of Mi
higan.
Performan
e Analysis of System Overheads in
TCP/IP Workloads.
5
