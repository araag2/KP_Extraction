Bases de e government y e business dadas por un modelo de administración de proyectos según la teoría de enterprise engineering
﻿
 
La Enterprise Engineering es una disciplina 
emergente para hacer frente a los desafíos 
(agilidad, adaptabilidad, etc.) y las oportunidades 
(nuevos mercados, nuevas tecnologías, etc.) que 
enfrentan las empresas actuales, incluyendo las 
instituciones comerciales, gubernamentales y sin 
fines de lucro [1], [2]. Para el caso que nos 
convoca: e-business, e-government. 
La Enterprise Engineering se basa en el 
paradigma de que estas empresas están 
estructuradas por sistemas diseñados con un 
propósito específico, por lo tanto pueden 
rediseñarse en forma sistemática y controlada. 
Tales proyectos de Enterprise Engineering 
típicamente involucran aspectos de arquitectura, 
diseño e implementación. 
El esquema para soportar la administración de 
las organizaciones, llamado Balanced Scorecard, 
es de máxima utilidad en aquellas que quieran 
definir una estrategia y llevarla a cabo con un 
seguimiento sistemático. No obstante, no existen 
demasiadas herramientas integradas que lleven a 
cabo el mapeo estratégico hacia el Balanced 
Scorecard. 
Visto el Balanced Scorecard como herramienta 
de formalización de una estrategia en el contexto 
de la Enterprise Engineering, el objetivo que se 
plantea es realizar una especificación del dominio 
y del plan de proyecto subyacente (se propone) 
para soportar esta metodología de administración, 
orientada a la construcción de herramientas para 
implementar el Balanced Scorecard en el 
medioambiente organizacional.  
Para construir software de alta calidad, es 
importante dar la especificación formal del 
dominio y de los requerimientos. Se usará el 
lenguaje de especificación RAISE para construir 
parte de estas especificaciones. 
Bajo este enfoque, se hará la especificación del 
dominio formalmente, generando el primer paso 
del proceso de desarrollo de herramientas, 
ambientes e interfaces para obtener un marco 
soporte de la metodología de administración 
Balanced Scorecard. 
 
Introducción 
 
La capacidad de ejecutar una estrategia es más 
importante que la calidad de la estrategia en sí 
misma. La aplicación de la estrategia es el factor 
más importante a la hora de valorizar una 
organización y su gerenciamiento [3], [4], [5]. Uno 
de los problemas fundamentales que deben 
enfrentar las organizaciones es que las estrategias 
(las cuales son las únicas formas sustentables que 
las organizaciones tienen para generar valor 
agregado) están cambiando, pero las herramientas 
que las soportan y sus mecanismos de medición no 
se van actualizando acorde a estos cambios. 
Algunos estudios más recientes han estimado que 
el valor de los bienes tangibles representan apenas 
entre un 10% y un 15% del valor de mercado de la 
empresa. Es claro que para crear oportunidades de 
valor agregado, se está reorientando desde la 
administración de bienes materiales hacia la 
administración de estrategias basadas en el 
conocimiento para desarrollar bienes inmateriales 
tales como: relaciones con los clientes, productos y 
servicios innovadores, procesos operativos 
eficientes y de alta calidad, tecnología de la 
información y bases de datos, y también las 
capacidades de los empleados, habilidades y 
motivaciones. 
En la economía actual, donde los bienes 
intangibles son la fuente más importante de las 
ventajas competitivas, es necesario tener 
herramientas capaces de describir y medir bienes 
basados en el conocimiento para la generación de 
valor agregado. Sin estas herramientas, las 
empresas tienen dificultades de manejar cosas que 
no son capaces de describir y/o medir [6]. Las 
organizaciones necesitan un sistema de 
administración que sea expresamente diseñada 
para administrar la estrategia y no solamente 
administrar la táctica [7]. 
La aplicación de la estrategia requiere, por lo 
tanto, que todos los empleados, así como también 
todas las unidades de negocio y las unidades 
soporte, estén alineadas y articuladas a la 
estrategia; con el aspecto adicional que los 
dinámicos cambios en la tecnología, competencias 
y normativas hacen que la formulación y 
aplicación de la estrategia deba ser un proceso 
continuo y participativo. Las organizaciones 
actuales necesitan un lenguaje que les permita 
comunicar la estrategia, así como procesos y 
sistemas que las ayuden a implementarlas y 
obtener información a manera de 
retroalimentación. Así, el Balanced Scorecard se 
convierte en una herramienta para administrar la 
estrategia. 
Los Drs. Robert Kaplan (Harvard Business 
School) and David Norton (Balanced Scorecard 
Collaborative) [8], desarrollaron un enfoque para 
administrar la estrategia en los comienzos de los 
años 1990 [9], [10] que lo llamaron “balanced 
scorecard”, el cual provee una prescripción de qué 
deberían medir las organizaciones a fin de 
“balancear” la perspectiva financiera. 
Considerando que el objetivo es especificar en 
un lenguaje formal los conceptos antes expresados, 
se usará para tal efecto el lenguaje RSL. 
RSL significa RAISE Specification Language 
[11], donde RAISE es un acrónimo de “Rigorous 
Approach to Industrial Software Engineering”. 
RAISE toma en serio la palabra “industrial”, ya 
que el método está creado para usarlo en 
desarrollos del mundo real y no simplemente 
ejemplos de laboratorio. El método está basado en 
una serie de principios: desarrollo separado, 
desarrollo en pasos sucesivos, construir y verificar, 
y rigurosidad [12] 
RSL unifica los aspectos de varios lenguajes de 
especificación (VDM, CSP y ACT-ONE). RSL es 
de “amplio espectro” en el sentido que puede ser 
usado para expresar especificaciones abstractas de 
alto nivel también como diseños de bajo nivel (por 
ejemplo usando construcciones imperativas 
explícitas tales como iteraciones). Una ventaja de 
esto es que los ingenieros de software solamente 
tienen que conocer una notación adicional al 
lenguaje de programación usado para la 
implementación, dado que el desarrollo completo 
es llevado a cabo en RSL. Las especificaciones en 
RSL deberían considerarse como modelos 
matemáticos de sistemas de software. 
Algunas ideas acerca de especificaciones 
formales de planes de proyecto fueron extraídas de 
reportes técnicos publicados por Dines Bjørner 
[13], [14], [15]. El tema de formalizar el Balanced 
Scorecard fue presentado por primera vez en el 4º 
Workshop de Investigadores de Ciencias de la 
Computación en mayo de 2002. Luego, a partir de 
allí se publicó una primera propuesta de 
formalización del dominio del Balanced Scorecard 
en [17] y una primera propuesta para formalizar el 
plan de proyecto subyacente fue publicado en [18]. 
Cada uno de ellos fue mejorado, profundizado y 
sometido a evaluación de comités internacionales y 
publicados en una revista de USA [19] y en una 
revista de Japón [20] respectivamente. En enero de 
2005, en Egipto, en los proceedings de la IEEE / 
ACS International Conference on Computer 
Systems and Applications [21] se propone una 
integración de tales conceptos y formalizaciones. 
A los fines de la validación de la propuesta, se 
han contrastado estos resultados teóricos en el 
mundo real en proyectos industriales. Los 
resultados de la construcción y prosecución en el 
tiempo del Balanced Scorecard en la industria 
también fueron publicados. Uno de ellos [22] 
acerca de un proyecto en un gobierno provincial. 
Otro [4] respecto de una discusión respecto de una 
arquitectura general para sistemas de soporte a las 
decisiones basadas en el concepto del Balanced 
Scorecard. También fueron publicados en [23], 
[24], [25] los resultados de un Balanced Scorecard 
particular para administrar la última (y muy 
dificultosa) etapa del importante proyecto 
hidroeléctrico argentino-paraguayo de Yacyretá. 
 
Contexto 
 
En la publicación hecha por el Grupo del 
Método RAISE [22] se introduce el libro 
aseverando que las computadoras están siendo 
usadas para tareas donde las fallas traen severas 
consecuencias, incluyendo la pérdida de vida. Esta 
tendencia se está incrementando cada vez más. Las 
computadoras juegan un rol esencial en el control 
aeroespacial, en la aeronavegación, en el control 
de trenes, autos, reactores nucleares y 
equipamiento hospitalario, por dar simplemente 
algunas pocas de las aplicaciones más críticas. Si 
las personas están preocupadas por un aterrizaje 
seguro de su avión o que su cuenta bancaria tenga 
el saldo correcto, entonces concordarán que es de 
vital importancia que los sistemas de computación 
que están por detrás de ellos sean completamente 
confiables. 
Considerando que: 
- El Balanced Scorecard es a las 
organizaciones lo que el instrumental de 
vuelo es al avión. Es una de las aplicaciones 
más sensitivas en cualquier tipo de 
estructura organizacional. El sustancial 
aporte a la confiabilidad que puede lograrse 
mediante la utilización adecuada de los 
métodos formales es particularmente 
relevante en el caso del Balanced Scorecard. 
- La inversión significativa, en tiempo y en 
esfuerzo, asociada a la aplicación de 
métodos formales, posee un recupero muy 
tangible y contundente en las subsiguientes 
fases del desarrollo e implantación del 
Balanced Scorecard. 
- Los requerimientos específicos 
correspondientes a la especificación de un 
Balanced Scorecard en particular, 
frecuentemente se ven afectados por los 
efectos perniciosos de la ambigüedad, la 
incompletitud e inconsistencias que se 
detectan en abundancia cuando se utilizan 
métodos y herramientas menos rigurosos 
que los métodos formales. 
- La confiabilidad, definida como “que el 
sistema haga el trabajo que se supone que 
debe hacer”, es un requerimiento tanto para 
el hardware como para el software, aunque 
en el presente trabajo se orienta a las 
componentes de software solamente. 
- Construir software confiable es 
especialmente dificultoso: cualquier 
programa que es capaz de hacer algo 
interesante es tan complejo que es imposible 
testearlo1 completamente. 
                                                 
1
 Según la Real Academia Española © es un verbo 
transitivo usado en Argentina y Chile que significa 
testar en su 3º acepción: someter algo a un control o 
prueba. 
- Una técnica importante para ayudar a 
incrementar la confiabilidad del software es 
el uso de los métodos formales. La idea 
básica es que debería ser posible razonar 
acerca de las propiedades del software o 
sistemas que involucran software. Por 
ejemplo, si los requerimientos dicen que 
debe haber a lo sumo un tren en cualquier 
sección de una vía, se debe poder producir 
una prueba tal que el software siempre 
refleje este requerimiento. 
- Los métodos formales no son la respuesta 
completa. En principio, las “pruebas” 
pueden contener defectos. Las pruebas no 
triviales tienden a ser grandes y dificultosas 
de hacerlas automáticamente, típicamente 
algunos pasos serán rotulados como 
“obvios” y no serán demostrados 
formalmente. Para algunas pruebas que son 
hechas automáticamente se debe preguntar: 
¿cómo se sabe que el probador es correcto?. 
Entonces hay problemas más amplios. 
¿Cómo se hace para saber que el modelo del 
mundo contenido en el software (en el cual 
hay solamente un tren por sección) está 
reflejado en el mundo real?. Los 
desarrolladores comienzan con una narrativa 
de requerimientos, escritas generalmente en 
un lenguaje natural. Los métodos formales 
pueden ofrecer seguridad que los 
requerimientos son correctos, encontrando 
inconsistencias e incompletitudes, pero 
seguridad no es certeza. También, el uso de 
los métodos formales involucra interpretar 
los requerimientos creando un modelo de 
ellos (aunque matemáticos y abstractos) en 
otro lenguaje. Tales procesos están sujetos a 
errores. 
- Los métodos formales no reemplazan el 
testeo2, y debe ser aplicado con la debida 
consideración al control de calidad y 
rentabilidad. Pero ellos son invalorables para 
mejorar la confiabilidad. 
- Enunciada la conveniencia de la utilización 
de los métodos formales como una de las 
vías más importantes para definir el dominio 
                                                 
2
 Según la Real Academia Española © es un sustantivo 
usado en Argentina y Chile que significa: acción y 
efecto de testar en su 3º acepción: someter algo a un 
control o prueba. 
y los requerimientos, la selección de RSL en 
particular se debe a que: 
- RSL es un lenguaje de especificación 
formal que tiene tanto sintaxis como 
semántica formal. 
- El método RAISE está basado sobre 
principios tales como: desarrollo 
separado, desarrollo en pasos sucesivos, 
inventar y verificar, y rigurosidad. 
- RSL es un lenguaje de “amplio 
espectro” en el sentido que puede 
usarse tanto para expresar 
especificaciones abstractas de alto 
nivel, como diseños de bajo nivel, por 
ejemplo, usar construcciones 
imperativas explícitas tales como 
bucles (“loops”). Una ventaja de esto es 
que los usuarios solamente tienen que 
conocer una notación adicional al 
lenguaje de programación que se usa 
para la implementación, dado que el 
desarrollo completo se lleva a cabo a 
través de RSL. 
- Este lenguaje permite especificar en 
estilos: aplicativo e imperativo, 
secuencial y concurrente, abstracto y 
concreto y sus combinaciones. 
 
Resultados y Objetivos 
 
Como objetivo general se propone construir una 
base sólida para e-business, e-government como 
automatización del Balanced Scorecard orientado a 
aquellas organizaciones que quieran definir una 
estrategia y llevarla a cabo con un seguimiento 
sistemático. 
Como objetivo específico se construyen 
herramientas de muy alta calidad (confiabilidad) 
para soportar esta metodología de administración 
en el medioambiente organizacional, de manera tal 
que les permita describir y medir cosas para 
manejar activos basados en el conocimiento y 
estrategias para la creación de valor. 
 
