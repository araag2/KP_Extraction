Generación de Sistemas de Software metodología de desarrollo basada en SOA
﻿
El objetivo de  este trabajo es realizar aportes a la 
Ingeniería de Software orientada a servicios. Se 
analizaron los distintos enfoques y estado del arte de 
la orientación a servicios junto a la arquitectura SOA 
y  se comenzó a delinear un modelo de desarrollo de 
sistemas orientados a servicios. Inicialmente, el 
modelo hará uso de tecnologías ya probadas como 
BPM, BPEL, MDA, UML y SOA como arquitectura 
que soporta todo el modelado anterior. Luego se 
especificará formalmente a través de lenguajes como 
RSL o MAUDE. Posteriormente, se validará a través 
de un caso específico: “Una Arquitectura abierta y 
estándar de servicios Web de GIS”, también 
especificada formalmente en RSL, trabajo éste, 
realizado como Tesis de Maestría en Ingeniería de 
Software1. 
La necesidad de contar con un modelo basado en la 
arquitectura SOA que  sirva de marco para realizar 
desarrollos orientados a servicios en forma rápida y 
sencilla, siguiendo modelos establecidos y probados, 
surge debido a: la naturaleza cambiante de los 
procesos de negocios, la falta de interoperabilidad y  
reusabilidad de los sistemas y la diversidad existente 
de paradigmas y enfoques acerca de la orientación a 
servicios. 
 
Palabras clave: RAISE, RSL, SOA, MDA, Servicios 
Web, Framework, Infraestructura, Métodos 
formales, Programación Orientada a Servicios, 
Computación Orientada a Servicios, Arquitectura 
Orientada a Servicios.  
 
CONTEXTO 
El presente trabajo se enmarca en el Proyecto de 
Investigación: Ingeniería de Software, Conceptos, 
Métodos y Herramientas en un Contexto de 
“Ingeniería de Software en Evolución” – Facultad de 
Ciencias Físico-Matemáticas y Naturales, 
Universidad Nacional de San Luis y en el Proyecto 
de Investigación: Definición y Especificación 
Formal de un Modelo basado en Servicios para la 
                                                 
1 Tesis defendida en la Universidad Nacional de San 
Luis en Octubre de 2009. 
Generación de Sistemas de Software – Facultad de 
Ciencias Exactas y Naturales, Universidad Nacional 
de La Pampa. Las líneas aquí presentadas fueron 
expresadas en una Tesis de Postgrado en la Maestría 
en Ingeniería de Software auspiciada por el proyecto 
de la Universidad Nacional de San Luis. 
Actualmente se está trabajando sobre el proyecto de 
investigación mencionado, donde se espera poder 
definir formalmente un Modelo de desarrollo basado 
en Servicios para la generación de Sistemas de 
Software. 
 
1. INTRODUCCIÓN 
La capacidad para responder rápidamente ante los 
cambios y optimizar los procesos de negocio son 
factores claves para la competitividad y el 
crecimiento de las organizaciones. La agilidad de 
éstas puede verse cuestionada si se apoya en 
entornos de IT que no pueden responder de forma 
flexible a los cambios que afectan  la actividad del 
negocio. Liberar el potencial que poseen las 
aplicaciones y recursos de IT y hacerlo disponible de 
forma general a toda la organización, facilita la 
optimización de procesos y mejora la agilidad 
empresarial.  Las organizaciones, por lo tanto, se han 
dado cuenta que el objetivo final es la 
automatización de los procesos de negocio 
(desarrollar aplicaciones que darán soporte a todos y 
cada uno de los pasos de un proceso de negocio, 
desde su comienzo hasta su finalización). La 
Arquitectura Orientada a Servicios (SOA, Service 
Oriented Architecture) es una filosofía de diseño que 
permite un mejor alineamiento de las Tecnologías de 
Información (IT) con las necesidades de 
negocio[7][12]. 
 
Se percibe cada vez con mayor claridad que los 
procesos de negocio no son constantes y necesitan 
ser adaptados. Necesitan ser flexibles, por lo tanto, 
IT también debe ser flexible. [12] 
 
Las empresas necesitan poder interconectar los 
procesos, personas e información tanto con la propia 
Organización como -atravesando sus fronteras- con 
subsidiarias y socios comerciales. La falta de 
WICC 2012 606
2012 XIV Workshop de Investigadores en Ciencias de la Computación
integración e interoperabilidad entre los 
componentes de IT –sistemas, aplicaciones y datos-  
hace difícil obtener una respuesta rápida y efectiva 
ante los cambios que afectan de forma natural a los 
negocios. La inflexibilidad genera costos, reduce la 
capacidad de respuesta ante los clientes, 
compromete el cumplimiento de normativas legales 
y  afecta negativamente en el personal de la empresa. 
En síntesis, la interoperabilidad y la adaptabilidad de 
los sistemas son algunos de los problemas más 
importantes a los que las  organizaciones deben 
hacer frente para mantener su competitividad y 
garantizar su crecimiento[7].  
 
El software administrativo está estrechamente unido 
a la organización interna, procesos y modelos de 
negocio. Este software subyace tanto en las 
dependencias interdepartamentales como en las 
relaciones exteriores de la empresa. En 
consecuencia, una arquitectura de software 
administrativo debe hacer frente a un gran número 
de requisitos diferentes. Muchos de estos requisitos 
son contradictorios, mientras que otros no están 
claros. En casi todos los casos, los requisitos son un 
blanco en movimiento por el cambio permanente de 
mercados, la organización de la empresa, y sus 
objetivos de negocio. Es por esto que el desarrollo 
de software administrativo se hace realmente muy 
complejo. 
 
Las aplicaciones administrativas de las 
organizaciones rara vez contienen una gran cantidad 
de algoritmos complicados. El código que describe 
un trozo de lógica de negocio suele ser muy simple. 
La estructura de un sistema de facturación basado en 
COBOL es mucho más simple que, por ejemplo, un 
sistema embebido de un dispositivo específico (que 
contiene necesidades de cálculos complejos en 
tiempo real, y necesidades multi-threading). En las 
aplicaciones empresariales usualmente se encuentran  
estructuras de datos muy simples, a diferencia, 
nuevamente, de otros sistemas tales como sistemas 
de información geográfica (SIG)[8]. 
Los sistemas administrativos normalmente tienen 
que interactuar con distintos stakeholders, incluso 
algunos de ellos pueden ser CEOs de otras 
compañías, proveedores o usuarios que pueden verse  
influenciados por entornos políticos (de la propia 
empresa o del propio gobierno) que hacen realmente 
complejo contemplar todas estas variables dentro del 
sistema a desarrollar.  En cambio en otros tipos de 
software (software de escritorio, embebido, etc), el 
entorno y el espacio del problema son mucho más 
pequeños e incluso más acotado[8]. 
 
Se puede concluir que los sistemas o el software 
administrativo es único en varios aspectos y, por lo 
tanto, requiere el uso de medidas y metodologías 
únicas para mejorar su desarrollo y mantenimiento 
posterior[8]. 
Como resultado de la estrecha relación con la 
organización interna, los procesos y modelos de 
negocio, una arquitectura de software para la 
empresa debe cumplir con requisitos muy diferentes 
que los de una arquitectura de software para un 
sistema que es controlado por un pequeño número 
de expertos altamente calificados de dominio, como 
enviar un robot a Marte o un motor de juego de 
vídeo. 
Para poder brindar agilidad y eficiencia, una 
arquitectura de software administrativo debe 
contemplar características particulares, a saber: 
simplicidad, flexibilidad y mantenimiento, 
reusabilidad y, por último, poder desacoplar la 
funcionalidad y la tecnología. 
 
A través de la utilización de una Arquitectura 
Orientada a Servicios (SOA) se puede ayudar a 
lograr los objetivos de diseño para el desarrollo de 
software administrativo, planteados anteriormente. 
Para ello se introducirán algunos conceptos de la 
orientación a servicios.  
 
El término "servicio" ha estado presente en la 
computación comercial durante mucho tiempo y  ha 
sido utilizado de muchas maneras diferentes. Hoy, 
por ejemplo, nos encontramos con grandes 
empresas, tales como IBM, promocionando el 
concepto de "servicios a la carta". A principios del 
nuevo siglo, el término "servicios web" se convirtió 
en muy popular, aunque a menudo se ha utilizado 
para referirse a conceptos muy diferentes de 
computación: algunas personas lo utilizan para 
referirse a la aplicación de servicios prestados a los 
usuarios humanos a través de Internet, otras 
personas lo utilizaron para referirse a los módulos de 
aplicación accesibles para otras aplicaciones a través 
de Internet, haciendo uso de los protocolos basados 
en XML[8]. 
Se puede definir entonces Arquitectura orientada a 
servicios (SOA) como “una arquitectura débilmente 
acoplada diseñada para satisfacer las necesidades de 
negocio de una organización”[9].  
SOA es un enfoque arquitectural para la creación de 
sistemas a partir de servicios autónomos. Esta 
arquitectura permite la creación de sistemas de 
software altamente escalables que reflejan el negocio 
de la organización, brindando además una forma 
bien definida de cómo se exponen y se invocan los 
servicios, lo que facilita la integración e interacción 
de sistemas tanto propios como de terceros. 
 
La Arquitectura SOA establece un marco de diseño 
para la integración de aplicaciones independientes de 
manera que desde la red pueda accederse a sus 
funcionalidades, las cuales se ofrecen como 
servicios. La forma más habitual de implementarla 
es mediante Servicios Web, una tecnología basada  
en estándares e independiente de la plataforma, con 
la que SOA puede descomponer aplicaciones 
WICC 2012 607
2012 XIV Workshop de Investigadores en Ciencias de la Computación
monolíticas en un conjunto de servicios e 
implementar esta funcionalidad en forma modular. 
En este punto es importante brindar una definición 
de “servicio”,  si bien en la literatura existen varias,  
este trabajo utiliza la siguiente conceptualización: 
 
 
  “Un servicio es una funcionalidad concreta 
que puede ser descubierta en la red y que describe 
tanto lo que puede hacer como el modo de 
interactuar con ella.”’ 
 
Desde la perspectiva de la empresa, un servicio 
realiza una tarea concreta: puede corresponder a un  
proceso de negocio tan sencillo como introducir o 
extraer un dato como “Código del Cliente”. Pero  
también los servicios pueden acoplarse dentro de 
una aplicación completa que proporcione servicios 
de alto nivel, con un grado de complejidad muy 
superior –por ejemplo, “introducir datos de un 
pedido”-, un proceso que, desde que comienza hasta 
que termina, puede involucrar varias aplicaciones de 
negocio. 
 
La estrategia de orientación a servicios permite la 
creación de servicios y aplicaciones compuestas que 
pueden existir con independencia de las tecnologías 
subyacentes. En lugar de exigir que todos los datos y 
lógica de negocio residan en un mismo ordenador, el 
modelo de servicios facilita el acceso y consumo de 
los recursos de IT a través de la red.  
 
Puesto que los servicios están diseñados para ser 
independientes, autónomos y para interconectarse 
adecuadamente, pueden combinarse y recombinarse 
con suma facilidad en aplicaciones complejas que 
respondan a las necesidades de cada momento en el 
seno de una organización. Las aplicaciones 
compuestas (también llamadas  “dinámicas”) son las 
que permiten a las organizaciones mejorar y 
automatizar sus procesos manuales,  disponer de una 
visión consistente de sus clientes y socios 
comerciales, y orquestar sus procesos de  negocio 
para que cumplan con las regulaciones legales y 
políticas internas.  
 
El resultado final, es que  las organizaciones que 
adoptan la orientación a servicios pueden crear y 
reutilizar servicios y aplicaciones, adaptarlos ante 
los cambios evolutivos que se producen dentro y 
fuera de ellas, y con ello adquirir la agilidad 
necesaria para ganar ventaja competitiva. 
 
La figura 1 muestra un resumen de cómo se puede 
descomponer un proceso en servicios. 
 
2. LÍNEAS DE INVESTIGACIÓN y 
DESARROLLO 
Tal como se menciona en la Introducción, la 
capacidad para responder rápidamente ante los 
cambios y optimizar los procesos de negocio son 
factores claves para la competitividad y el 
crecimiento de las organizaciones. 
 
Figura 1. Descomposición de un proceso en servicios. 
 
Con el ánimo de dar respuesta a las necesidades 
planteadas anteriormente, se genera la arquitectura 
orientada a servicios, que permite enfocar la 
solución de los problemas de desarrollo de software  
para empresas, de una manera más sencilla, rápida y 
ágil. De esta forma es posible conseguir una 
adaptación fácil a los cambios organizacionales y 
estructurales de la empresa. A partir de esta 
arquitectura, también se han generado nuevos 
paradigmas de programación, como por ejemplo: 
Programación orientada a servicios (SOP),  
Computación Orientada a Servicios (SOC). Además, 
debe recordarse que la orientación a servicios se 
basa en metodologías y paradigmas existentes como 
los Servicios Web, la Programación orientada a 
objetos, programación orientada a componentes. 
SOA tiene sus bases también en la Arquitectura 
basada en modelos (MDA) y UML. 
 
Un enfoque que no debe perderse de vista, que se 
encuentra explícitamente expresado en la 
Introducción, es el concepto de BPM, que a su vez 
ha sido acompañado en estos últimos años por el 
lenguaje de especificación de procesos BPEL, que es 
la traducción a servicios de los procesos de 
negocios. Con todo esto es posible expresar que el 
modelo de desarrollo de software para generar 
aplicaciones orientadas a servicios debe estar basado 
en la arquitectura SOA, utilizando los metamodelos 
de MDA, la notación de procesos de negocios 
BPMN, su traducción BPEL, y los diagramas y 
especificaciones de UML. La Figura 2 muestra un 
detalle de cómo sería una posible arquitectura, que 
contiene los conceptos mencionados y sirve de base 
al modelo en el que se está trabajando para el 
desarrollo de sistemas orientados a servicios.  
 
WICC 2012 608
2012 XIV Workshop de Investigadores en Ciencias de la Computación
 Figura 2. Arquitectura de servicios. [13] 
 
Existe la fuerte convicción de que si las 
organizaciones tuvieran herramientas que les 
permitieran desarrollar sistemas en forma rápida y 
sencilla, siguiendo un ciclo de vida que incluya  
modelos / técnicas / arquitecturas / paradigmas / 
metodologías establecidos, podrían tener ventajas 
competitivas respecto del resto. 
 
Estas herramientas y la forma de combinarlas para 
lograr el desarrollo rápido y sencillo, surgirán de la 
especificación formal de un modelo para el 
desarrollo de sistemas orientados a servicios basados 
en los conceptos mencionados anteriormente. 
 
La hipótesis más importante que se plantea, por lo 
tanto, es que si las organizaciones contaran con 
herramientas que les permitan desarrollar sistemas 
en forma rápida y sencilla siguiendo modelos 
establecidos, probados y de utilización directa 
tendrían ventajas competitivas respecto del resto. 
Esto conduciría o redundaría  en un mejor 
posicionamiento en el mercado frente a los desafíos 
que se presentan hoy en día. 
 
Cuando se menciona la construcción de un modelo 
de desarrollo, no significa estrictamente un modelo 
nuevo, sino por el contrario, se intentará tomar la 
mejor estrategia luego de hacer un exhaustivo 
análisis de las tecnologías existentes. Posteriormente 
se decidirá si es mejor o no realizar una construcción 
nueva, mejorar alguna existente, o bien tomar la 
mejor alternativa ya probada. 
 
Las líneas de investigación se basan principalmente 
en los siguientes tópicos, a saber: 
 
• Búsqueda minuciosa acerca de las 
tecnologías / metodologías en relación al 
ámbito de este proyecto de investigación. 
Este análisis permitirá realizar un cuadro 
comparativo que posibilitará evaluar las  
fortalezas y desventajas de cada una de las 
tecnologías. De este análisis surgirán La 
conclusiones acerca de cómo debería ser un 
modelo teórico para el desarrollo de 
sistemas enfocados a servicios. 
• Definición teórica del modelo para 
desarrollo de sistemas orientados a 
servicios  a utilizar y luego especificación 
formal del mismo. La definición del 
modelo se realizará de manera informal, es 
decir en un lenguaje ambiguo, pero que 
sentará las bases para luego poder 
especificarlo formalmente. En esta 
definición del modelo se incluirán todos los 
detalles necesarios para que el pasaje a 
lenguajes formales sea lo más directo 
posible. Para la definición del modelo se 
utilizarán todas las herramientas que 
puedan facilitar la tarea, como, por 
ejemplo, diagramas UML. 
• Formalización del modelo definido durante 
el segundo año de trabajo. Para esta tarea se 
utilizarán lenguajes de especificación 
formal como son RSL. 
 
El lenguaje de especificación formal a utilizar para 
la especificación del modelo será RAISE 
Specification Language (RSL), dado que el mismo 
es reconocido en la industria del software para 
especificaciones formales de desarrollos reales.  
 
RSL es un lenguaje formal, basado en el formalismo 
de la matemática usando conceptos tales como la 
teoría de conjuntos, lógica de primer orden, lógica 
de orden superior. Está netamente orientado a 
construir modelos, ya sea describiendo un dominio 
de la realidad o describiendo una herramienta a 
desarrollar y sus requerimientos 
 
Durante el transcurso de los dos primeros años 
también se harán estudios del estado del arte 
respecto de lenguajes para especificaciones 
formales, pudiendo surgir otra alternativa de 
lenguaje a utilizar como puede ser MAUDE o Alloy 
(sólo por mencionar algunos). Si bien se asume que 
se utilizará RSL, se espera evaluar otras alternativas. 
 
3. RESULTADOS OBTENIDOS/ESPERADOS 
Hasta el momento se puede concluir que el primer 
tópico planteado en las líneas de investigación se 
encuentra en su etapa final,  actualmente se está 
componiendo la matriz de fortalezas y debilidades 
de los conceptos planteados. De esta primer etapa se 
puede concluir, como se menciona en el apartado 2 
del presente trabajo, que las metodologías utilizadas 
serán: SOA, MDA, UML, BPMN y BPEL. Aquí se 
debe destacar que éstas son las herramientas base, 
las cuales podrán ser modificadas, adaptadas y/o 
mejoradas para lograr el objetivo final. 
 
WICC 2012 609
2012 XIV Workshop de Investigadores en Ciencias de la Computación
De acuerdo a lo planteado se desprende que existe 
un campo de trabajo interesante (y con áreas no 
cubiertas) en el ámbito del problema, y más aún en 
su especificación formal. 
 
4. FORMACIÓN DE RECURSOS HUMANOS 
Además de los resultados obtenidos/esperados en el 
punto 3, se espera como resultado en la formación 
de recursos humanos, la continuación de esta misma 
línea de proyecto como tesis doctoral de alguno(s) 
de los investigadores. También se espera lograr una  
mayor interrelación con la Universidad de Minas 
Geráis con la que se cuenta con un convenio con tal 
objetivo como parte de él. Adicionalmente, se espera 
que otras tesis de Maestría, así como tesinas de 
Licenciatura surjan a partir de los logros obtenidos 
en la presente línea de investigación. Es oportuno 
aclarar que uno de los docentes investigadores se 
encuentra actualmente becado por el CAFP-BA 
(Centro Asociados para el Fortalecimiento de 
Posgrados Brasil Argentina). Selección a cargo del 
Proyecto: “Contribución a la Homogeneidad 
Regional Académica Regional Considerando 
Estándares de Alta Calidad y a la Competitividad de 
la Industria del Software Mediante la Formación de 
Recursos Humanos de Cuarto Nivel en Ciencias 
Aplicadas a la Informática y Computación en las 
Zonas de Influencia de la Universidad de San Luis y 
la de la Universidad Federal de Minas Gerais”. La 
beca incluye una estadía durante el primer semestre 
de 2012 en la Universidad Federal de Minas Gerais. 
Brasil, con el fin de realizar un curso de 
perfeccionamiento docente, académico, científico y 
tecnológico en informática, más la realización de 
una tesis de maestría. Coordinador del Proyecto: Dr. 
Roberto Uzal. 
 
5.
