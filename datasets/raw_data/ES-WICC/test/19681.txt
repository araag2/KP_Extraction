Programación orientada a agentes en el marco de lenguajes multiparadigmas
﻿
La presente línea de investigación surge de dos observaciones. Por un lado, observamos
que el paradigma orientado a agentes aún hoy no se encuentra consensuadamente definido dentro de las diferentes áreas de las ciencias de la computación. Por el otro lado, la
combinación de conceptos y herramientas de los diferentes paradigmas de programación
en lenguajes actuales demostraron ser la vía más adecuada para la elaboración de herramientas de desarrollo de software que permitan representar adecuadamente los problemas
y soluciones de dominios de la vida real. A partir de estas observaciones comenzamos
una investigación cuyo objetivo es establecer las bases para dar origen a una definición
definitiva del paradigma orientado a agentes, mostrando que constituye la convergencia
entre los demás paradigmas. Con este fin nos proponemos desarrollar un lenguaje de programación que incorpore sus ideas elementales de manera armónica. Para su desarrollo
escogimos un lenguaje multiparadigma basado en la programación lógica, por sus numerosas extensiones y la facilidad con la que permite definir nuevas estructuras sintácticas,
semánticas y de control. Como conclusión de este trabajo utilizaremos el nuevo lenguaje
para desarrollar aplicaciones prácticas en diversos campos como la robótica, la domótica,
el desarrollo de aplicaciones móviles, etc.
1. Contexto
Presentamos aqui una línea de investigación contenida dentro del proyecto de investigación
Técnicas Avanzadas y Análisis para el Desarrollo Multiparadigma de la Secretaría de Investigación de la Universidad Nacional del Comahue, código 04/E073. Entre los principales objetivos de
esta investigación se encuentran establecer las bases para dar origen a una definición definitiva
del paradigma orientado a agentes y su relación con los demás paradigmas de programación.
2. Introducción
Según el paradigma orientado a objetos el mundo puede ser representado como un conjunto
de objetos que interaccionan entre ellos a través del envío de mensajes. Estos mensajes provocan
la ejecución de porciones de código que pueden modificar el estado interno del objeto que lo
recibe o enviar a su vez nuevos mensajes a otros objetos. La adhesión estricta a este paradigma
demostró ser viable sobre todo con la aparición de Smalltalk [14], un lenguaje orientado a
objetos puro que aún hoy es utilizado en parte de la industria del desarrollo de software.
Pero fue debido a la amplia utilización de lenguajes basados en el paradigma estructurado
que la programación orientada puramente a objetos no gobernó la industria, y en su lugar lo
hizo una fusión entre ambos paradigmas. Ejemplos claros de lenguajes ampliamente difundidos
en la actualidad que adoptaron este modelo son Java [15] y C++ [6]. Fue esta combinación de
conceptos lo que hizo de ambos paradigmas una base sólida sobre la cual pudieron sostenerse
y crecer las herramientas de diseño y desarrollo de software actuales.
Las capacidades cada vez mayores de hardware y el veloz avance de las redes hicieron absolutamente necesario que los programas y sistemas sean capaces de ejecutarse distribuidamente
en distintas plataformas, interoperar con otros componentes y aprovechar múltiples unidades de
procesamiento. Por este motivo los lenguajes de programación debieron incorporar elementos
que les permitiesen modelar esta nueva situación. Fue así como se hicieron comunes conceptos
como procesos livianos o lightweight processes, hilos de ejecución o threads, sincronización de
procesos, etc. Se denominó a la programación que se enfocaba en este modelo programación
concurrente [1] o paralela, dependiendo si se compite por los recursos subyacentes o si pueden utilizarse simultáneamente. Si bien esta manera de programar no fue sustentada por un
paradigma bien definido, su importancia actual es definitiva. Poco a poco los sistemas comenzaron a estructurarse a través de entidades autónomas que realizaban sus propios cómputos y
se comunicaban entre sí a través de algún tipo de protocolo de intercambio de mensajes. Estas
entidades no necesariamente estaban escritas en un mismo lenguaje de programación, o incluso
se ejecutaban en plataformas muy distintas. Más tarde, la ingeniería del software denominó a
estas entidades autónomas como agentes.
Paralelamente, el área de la Inteligencia Artificial adoptó el concepto de agente [12, 17]
como una entidad activa que actúa percibiendo distintos estímulos de su entorno y actuando
en consecuencia de estas percepciones, con el propósito de alcanzar una o varias metas.
Para el desarrollo de agentes racionales [12] resultó muy adecuado el paradigma lógico,
por su claridad para representar estados mentales gracias a su naturaleza declarativa. Así,
el comportamiento de un agente podía representarse estableciendo los hechos de su entorno,
y codificando las reglas mediante las cuáles podría inferir nuevo conocimiento. Variantes y
extensiones interesantes de este paradigma fueron surgiendo [13, 11, 8] para acercarse cada vez
más a las estructuras y mecanismos de pensamiento de los seres humanos.
Si bien han habido intentos de acercamiento de estas dos concepciones de agencia [7, 5, 10],
no creemos que una combinación definitiva haya surgido aún. Esto se demuestra claramente con
la falta de acuerdo respecto a cuáles son las características básicas que un agente debe poseer.
Como consecuencia de esta falta de claridad, todavía no es común oír hablar del diseño de sistemas en función de agentes, y sí lo es en función de threads, componentes, objetos distribuidos,
etc. En esta línea de investigación tenemos como objetivo hallar una combinación adecuada de
estos conceptos que de origen al paradigma orientado a agentes definitivo. Consideramos que
la mejor manera de encontrar esta fusión es la implementación de un lenguaje de programación que incorpore estos conceptos de manera nativa y clara, permitiendo su utilización en el
desarrollo de sistemas inteligentes distribuidos.
3. Líneas de Investigación y Desarrollo
Para alcanzar los objetivos propuestos por esta línea de investigación, se abordarán los ejes
principales detallados a continuación.
Características esenciales y deseables de un lenguaje orientado a agentes Determinaremos cuál es el conjunto minimal de características que debe poseer un lenguaje para
cumplir con los lineamientos de la orientación a agentes, clasificándolas entre características
inter-agentes o exógenas e intra-agentes o endógenas. Para esto, analizaremos varias plataformas y lenguajes que actualmente incorporan en alguna medida conceptos de agencia.
Representación del conocimiento y razonamiento mediante FLUX Desarrollaremos
las estructuras mentales que podrán incorporar los agentes de nuestro lenguaje adaptando el
método de programación lógica FLUX basado en el cálculo fluent [16]. Éste método utiliza
Constraint Handling Rules [9] para implementar el razonamiento en dominios parcialmente
observables, por lo que será necesario su estudio y la eventual colaboración con el grupo de
investigación.
Implementación del lenguaje en Ciao Prolog Implementaremos el lenguaje sobre Ciao
Prolog [3], una plataforma de desarrollo y ejecución multiparadigma desarrollada y mantenida
por el grupo CLIP. Esta herramienta brinda facilidades para incorporar nuevas características
mediante las técnicas de metaprogramación [4] y compilación de control [2]. Además, en versiones recientes de Ciao Prolog se incorporaron construcciones para la comunicación entre agentes
que nos resultarán útiles para construir sobre ellas nuestro lenguaje permitiendo abstraernos
de esas cuestiones.
4. Resultados esperados
A través de la presente línea de investigación pretendemos alcanzar dos resultados fundamentales. Por un lado, establecer las bases sobre las cuáles poder llegar a una definición definitiva
y consensuada entre las diferentes áreas de la comunidad de ciencias de la computación de la
orientación a agentes. Por otro lado, implementar un lenguaje que respete estrictamente la definición antes mencionada, demostrando su utilidad práctica a través del desarrollo de diversas
aplicaciones en diferentes dominios de la vida real.
5. Formación de recursos humanos
La presente línea de investigación constituirá el tema para la tesis de fin de carrera de Maximiliano Klemen, para alcanzar el título de grado de Licenciatura en Ciencias de la Computación,
proyectándose a realizar estudios de postgrado en colaboración con algunos de los grupos de
investigación mencionados anteriormente.
