Agentes en bases de datos distribuidas
﻿
El paradigma de agentes móviles permite acceder, recolectar o actualizar
información desde cualquier estación de trabajo dentro de una red heterogénea de
computadoras.  De esta forma, el código ejecutable de un agente móvil puede migrar
entre los puestos de trabajo.
Mantener una BD distribuida actualizada en todos los puntos de un sistema
distribuido y en todo momento mediante transacciones,  tiene difervas dificultades
(inestabilidad) debido a la carga de trabajo que varía de acuerdo a la utilización de la
BD y de la red de computadoras. Si bien existen variantes para actualización de réplicas,
como por ejemplo un esquema master-slave, que ayuda a solucionar algunos de estos
problemas, se están desarrollando algoritmos que utilizan agentes móviles para
manipular las transacciones que realizan estos movimientos sobre la BD.
Esta línea de investigación presenta los estudios realizados para actualizar
réplicas de una BDD mediante el uso de agentes móviles, generados por estaciones de
trabajo, las cuales eventualmente pueden permanecer mucho tiempo desconectadas del
sistema.
1 Licenciada en Informática. Becaria UNLP.  E-Mail: imiaton@lidi.info.unlp.edu.ar
2Profesor Titular. Prof. Principal CIC. Co-Director de Proyecto. E-Mail: ppesado@lidi.info.unlp.edu.ar
3Profesor Adjunto. E-Mail: pbertone@lidi.info.unlp.edu.ar
4 Profesor Titular Ded. Exclusiva. Investigador Principal CONICET.
E-Mail: degiusti@lidi.info.unlp.edu.ar
5 LIDI - Facultad de Informática. UNLP - Calle 50 y 115 1er Piso, (1900) La Plata, Argentina.
  TE/Fax +(54)(221)422-7707. http://lidi.info.unlp.edu.ar
                                                
Introducción
Los agentes móviles son procesos de software capaces de viajar entre nodos de
redes heterogéneas de computadoras, interactuando con ellos, recuperando o
actualizando información en favor de su propietario y regresando a la localidad
originaria con los resultados obtenidos. La movilidad no es característica suficiente para
la agenticidad, los agentes móviles son autónomos (pueden definir la ruta a viajar) y
cooperativos (pueden intercambiar datos e información con otros agentes). La principal
hipótesis de los agentes móviles es que no necesitan ser estacionarios. Proveen ventajas
como:
! Reducción de costos de comunicación
! Utilización de recursos no propios, en caso que los recursos locales resultan
limitados.
! Fácil coordinación
! Comunicación asíncrona
! Proveen un ambiente natural desarrollado para la implementación de servicios
en un "mercado libre"
! Una arquitectura flexible de computación distribuida 
! Representan una oportunidad distinta para abordar el diseño de procesos en
general.
Cuando se estudia el esquema de actualización de réplicas en un entorno
distribuido, generalmente se asumen dos métodos: Eager y Lazy. Ahora bien, también
existen dos formas para regular la actualización de las réplicas, estas son: Group
(cualquier nodo con una copia del dato puede modificarlo) y  Master (cada objeto de
dato tiene una copia maestra residente en un nodo, solo se puede modificar esta copia,
el resto es de solo lectura).
De acuerdo a la combinación de los métodos de propagación y de regulación de
réplicas, se pueden efectuar las modificaciones sobre la BDD. En el caso que se
presenta en este estudio, se disponen de nodos que se denominan base, los cuales se
encuentran siempre conectados, y un conjunto de nodos denominados móviles, que
generalmente se encuentran desconectados de la red. Esto genera dos aspectos a tener
en cuenta:
1- Los nodos móviles generan transacciones de modificación tentativas para
objetos que son propiedad de otros nodos (usualmente base).
2- Los nodos móviles ocasionalmente se conectan a los nodos base y proponen la
ejecución de transacciones tentativas para modificar la BDD. Las transacciones
tentativas pueden ser rechazadas, en el caso de no poder satisfacer la
actualización requerida. Estas transacciones rechazadas deben ser tratadas
nuevamente por el nodo móvil que la generó, debido a que no llegó a un estado
de cometido total.
Cuando cada nodo móvil genera una transacción, utiliza un agente móvil para
ejecutarla, debido a que los agentes móviles disponen de las características necesarias
para ese efecto. Como se indicó anteriormente, los esquemas Eager no sirven en este
caso, solo los esquemas Lazy son aplicables. Se presenta a continuación un análisis
sobre las dos diferentes formas de actualización de réplicas.
Líneas actuales de trabajo
Para realizar la experiencia de actualización de réplicas mediante agentes móviles
se realizaron una serie de suposiciones iniciales, las cuales se describen a continuación:
! Se realizan las primeras pruebas sobre un esquema Lazy-Master.
! Los nodos denominados base contienen copias maestras de los objetos de dato.
! Como corolario de lo anterior, los nodos móviles solamente podrán contener
copias secundarias de los objetos de dato.
! Cada nodo de la red posee una copia de Diccionario de Datos del modelo que
permite conocer la ubicación de la copia maestra correspondiente a cada objeto
de dato.
! Además, el Diccionario de Datos mantiene información sobre la ubicación de las
copias secundarias de datos.
! Se propone un esquema libre de fallos.  Esto se debe a que los protocolos más
usuales que tratan sobre la integridad de la base de datos resultan muy complejos
de adaptar para esquemas wireless, con nodos usualmente desconectados. Los
estudios realizados previamente sobre el comportamiento de los protocolos de
cometido de dos y tres fases junto con sus variantes, resulta inviable para
entornos con nodos móviles.
Bajo las precondiciones mencionadas la actualización de las réplicas se realizará
mediante la utilización de agentes móviles, generados tanto por nodos móviles como
por nodos base.
Un nodo móvil genera un agente móvil para intentar realizar una modificación de
una copia maestra de algún objeto de dato de la BD.  De esta forma, en el momento en
que el nodo móvil se conecta a la red envía un agente hacia el nodo base donde se
encuentra la copia maestra del objeto que desea actualizar, llevando con sí la
transacción a efectivizar.
Cuando el agente llega al nodo base, se encarga de hacer ejecutar la transacción.
Como se supone un modelo libre de fallos, la transacción podrá o no tener éxito pero
uno de esto dos resultados está garantizado.  En caso de alcanzar el estado de cometido,
el nodo base disparará un nuevo agente que se encargue de llevar esta actualización
hacia cada copia secundaria del objeto de dato modificado. Este comportamiento se
describe a continuación.
Los nodos base generan agentes móviles para actualizar las copias secundarias de
los objetos que, en ese nodo base, figuren como maestros.  Las posibilidades para la
generación de agentes móviles son dos:
! Se genera un agente que contenga la transacción que modificará cada copia.
Luego se clona dicho agente tantas veces como copias secundarias posea ese
objeto de dato. Y, posteriormente, se envía cada clon al nodo adecuado. (Figura
1)
Figura 1: agente que se clona para modificar copias secundarias
! Se genera un solo agente con la transacción que modificará cada copia, y,
posteriormente, se asigna al agente un itinerario que debe cubrir.  En dicho
itinerario se definen los diferentes nodos que debe “visitar” el agente (Figura 2).
Figura 2: agente con itinerario para modificar copias secundarias
 En cualquiera de las dos alternativas planteadas hay que tener en cuenta que los
agentes generados por un nodo base, con el fin de actualizar copias de objetos de datos,
pueden dirigirse hacia nodos móviles, los cuales, probablemente, se encuentren
desconectados del sistema.  El mecanismo de trabajo propuesto es el siguiente:
migr
a
Nodo base con copia maestra
migra
Nodo con copia secundaria
1
2
3
migra
IT
1 - 2 - 3
IT
2 - 3
IT
3
ItinerarioIT
migr
a
Nodo base con copia maestra
migra
Nodo con copia secundaria
migra
se clona
Agente clonado
! Para el primer caso, un agente móvil por cada nodo a actualizar, el agente móvil
debe esperar en el nodo base por la conexión del nodo móvil al cual se debe
dirigir para la actualización.
! En la segunda hipótesis planteada, puede ocurrir que un nodo del itinerario
resulte ser un nodo móvil desconectado. En ese caso, el agente móvil estará
dotado de la suficiente “inteligencia” como para detectar esta situación e intentar
continuar con el camino, dejando pendiente dicho nodo.  Esto puede llevar a que
varios puntos del recorrido se “salteen” temporariamente hasta que se conecten a
la red.
 La selección del esquema Lazy Master como modelo de actualización de réplicas
no es la mejor solución para un entorno con agentes móviles. En nuestra caso, la
elección se debe a que con las suposiciones de base realizadas, se convierte en un
esquema más sencillo para implementar como primera aproximación a la solución del
problema.
