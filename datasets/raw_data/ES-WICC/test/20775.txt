Plug in de eclipse para un Sistema Prolog de código abierto
﻿
En este trabajo presentamos la implementación de
componentes para un plug-in de Eclipse que permite
la visualización del Modelo de Byrd de depuración
de programas lógicos sobre el código fuente de los
programas. La depuración en el código fuente es una
característica esencial en un entorno de programación
moderno para el lenguaje Prolog. Este trabajo contribuye en el creación de un entorno de programación
visual de código abierto para Prolog.
1. Introducción
Este trabajo expone la construcción de un esquema
de depuración de código fuente1 para Ciao Prolog[5]
en la plataforma Eclipse[1].
Se busca con el mismo proveer un entorno amigable
tanto para principiantes como para usuarios expertos
para el uso de Ciao de forma que el usuario solo necesite aprender las características del lenguaje.
Antes de este trabajo las formas de utilización del
ambiente Ciao Prolog se limitaban a un shell en modo
texto y al entorno de programación Emacs. Éste último posee un rico entorno con herramientas de ayuda,
depuración fuente y preprocesador, además de ser, al
igual que el Ciao, distribuido bajo licencia GNU junto con su código fuente para que sea modificado por
cualquier persona.
1En ingles: source debugger
El problema principal del Emacs es su entorno poco
amigable, básicamente se trabaja en modo texto, con
muy poco uso de las bondades de los entornos gráficos actuales. Al mismo tiempo posee una definición
propia del uso de elementos de tal forma que es necesario aprender a utilizar la plataforma antes de poder
trabajar cómodamente con Ciao.
A diferencia del Emacs, Eclipse posee un rico entorno gráfico que se asemeja a la mayoría de las
plataformas actuales, utiliza conceptos estandarizados para la realización de acciones (como pueden ser
las formas de copiar y pegar texto, navegación de recursos, etc) y al igual que Emacs y Ciao es distribuido
de forma libre y gratuita como un proyecto de código
abierto.
Si bien actualmente no puede ser reemplazo del
Emacs (ya que el proyecto se encuentra en la etapa
inicial) es de esperar que adquiera la funcionalidad
del mismo con el correr del tiempo.
En la figura 1 puede verse la opción de source debugger que hemos implementado funcionando bajo la
plataforma Eclipse.
En ella pueden observarse los tres componentes
básicos del entorno, a la izquierda el Navegador de
Recursos (desde donde se puede interactuar con los
archivos, carpetas y proyectos), a la derecha, en la
parte superior, se encuentra el editor con características como el resaltado de sintaxis y debajo del mismo
la consola de ejecución sobre la cual podemos ingresar
consultas y recibir respuestas de ejecución y errores.
Puede verse en la consola una secuencia de ejecución de un programa prolog junto con la información
de salida para el source debugger que es provista por
el shell de Ciao y el coloreo del éxito de la llamada al
predicado antecesor(juan,ana) (en verde).
Figura 1: Source Debugger en Eclipse
El articulo se organiza de la siguiente manera en
la sección 2 se resume las características de Eclipse;
en la sección 3 se explica el modelo de depuración
en Prolog; en la sección siguiente se muestra nuestra implementación y por ultimo en la sección 5 se
presentan conclusiones y trabajo futuro.
2. Plataforma de Desarrollo de
Software Eclipse
La plataforma de desarrollo Eclipse no posee en si
misma funcionalidad alguna. Es a través de los plugins, que le incorporan funcionalidades para el desarrollo de tareas específicas, que obtiene la funcionalidad adecuada para cada usuario.
Como se puede ver en la figura 2 existen conectores básicos que dan funcionalidad a la plataforma
definiendo puntos de extensión con los cuales un plugin puede contribuir. Estos conectores son Help (que
aporta funcionalidad común para la introducción de
ayudas en la plataforma (tanto estática como dinámica y emergente)), Workbench (que aporta funcionalidad para el uso del entorno gráfico de trabajo), Debug
(que aporta la funcionalidad común para el lanzamiento y depuración de programas), etc. Para mayor
información o detalle vea [1].
Nuestro plug-in declarará el uso de algunos de los
puntos de extensión, provistos por estos conectores
en el archivo plugin.xml, denominado manifiesto, que
define las propiedades del plug-in, los puntos de extensión que provee o implementa, datos del creador,
librerías que utiliza, etc. Además proveerá la implementación de los puntos de extensión que declare,
Figura 2: Plataforma Eclipse y sus plug-ins
entre los cuales se encuentran:
org.eclipse.debug.ui.ConsoleColorProviders
que define mecanismos para un esquema de
coloreado de un documento de consola asociada
a un proceso.
org.eclipse.debug.ui.ConsoleLineTrackers
que provee mecanismos para la escucha de
eventos de inserción en una consola asociada a
un proceso.
ambos seran utilizados para lograr el source debugger.
3. Modelo de Byrd e implementación de Ciao Prolog
A diferencia de los lenguajes imperativos en el
que una ejecución siempre posee una correspondencia
única con cada parte del código fuente, la ejecución
de un predicado en los lenguajes declarativos como
Ciao pueden resultar en cuatro tipos distintos de resultado. Como puede verse en [4], cuando utilizamos
el source debugger debemos estar atentos a cuatro
tipos distintos de eventos correspondientes a los cuatro puertos que el Modelo de Byrd (figura 4) asocia a
cada uno de los literales que componen un programa
fuente, estos son:
Call: llamada a un predicado
Figura 3: Modelo de Byrd
Exit: éxito de un predicado
Fail: falla de un predicado
Redo: backtraking
El top-level de Ciao Prolog implementa este modelo.
En cada una de las detenciones provee la siguiente
salida, estando en modo traza:
In /home/jvanrell/ciao/familia.pl (5-7)
antecesor-1
S 13 7 Call: T user:antecesor(roberto,_123) ?
La primer línea indica el punto del programa en
donde se está ejecutando y sus campos indican la dirección completa del archivo fuente que se está depurando, los números de líneas de inicio y fin de un rango en el cual el literal puede ser encontrado dentro de
ese archivo, la cadena de caracteres a ser localizada y
el número de ocurrencia de la misma. Con esta información podemos obtener el número de línea que debe
ser coloreado para el seguimiento de la ejecución.
La segunda línea indica lo que se está ejecutando.
De esta línea solo nos interesa (a fines de la implementación del source debugger) el tipo de puerto que
la genera (indicado como cuarto valor) que nos permite configurar un color distinto para cada una de las
cuatro opciones de información vistas anteriormente.
Dicha información permite el coloreo de código
fuente de forma que pueda seguirse la ejecución de
un programa. Para ello coloreamos aquél predicado
que se está utilizando en cada momento con un color
distintivo según el puerto por el cual se está obteniendo la información. Por defecto estos colores son azul
para una llamada, verde para un éxito, rojo para una
falla y naranja para un redo.
4. Implementación
Entre otras herramientas Ciao incluye un shell
interactivo (top-level) llamado ciao o ciaosh que
contiene herramientas para la construcción incremental de programas, debugging y ejecución así como la
modificación de los mismos sin necesidad de iniciar
desde cero. Al iniciar el shell recibimos como se
muestra a continuación un mensaje de bienvenida y
un prompt (?-) indicando que está listo para recibir
instrucciones.
Ciao-Prolog 1.10 #5: Fri Aug 6 19:01:54 2004
?Una vez inicializado el shell podemos invocar
distintos predicados nativos. Para el debugger de
programas utilizaremos los siguientes:
use module/1: ?- use_module(Module). carga
en el top-level el módulo definido por Module,
importando todos los predicados que el exporta con lo cual se encuentran disponibles para
ser invocados. Module es el nombre completo del
archivo que declara el modulo a cargar.
debug module source/1:
?- debug_module_source(Module). carga
en el top-level el modulo definido por Module en
modo debug de forma que pueda ser depurado.
Es importante destacar que solo los módulos
que se carguen con este predicado van a ser
depurados, por lo que solo cargaremos aquellos
que nos interese revisar y pasando por alto los
restantes que serán ejecutados en modo interpretado (de forma mucho más veloz). Module es
el nombre del módulo.
trace/0: ?- trace. inicializa la traza habilitando el debugger. El interprete va a detenerse
en cada salida de los puertos de los predicados
que sean marcados para debug, imprimiendo un
mensaje en cada punto de detención y esperando
una entrada del usuario.
Eclipse provee algunas herramientas útiles al momento de generar plug-ins a través del PDE (Plug-in
Developement Enviroment) que provee un conjunto
de extensiones de la plataforma (vistas, editores, perspectivas, etc) que permiten la generación de plugins dentro del mismo workbench de Eclipse. PDE
está basado en la plataforma y en Java Developement Tooling (JDT). Para mas información vea [2] o
[1].
Junto con los puntos de extensión Eclipse define
una API que permite la implementación de las características más comunes que puede necesitar nuestro
plug-in.
En la figura 4 podemos ver un esquema de la forma
en que nuestro plug-in contribuye con Eclipse.
Figura 4: Esquema de conexión con Eclipse
5. Conclusiones
Hemos logrado obtener un plug-in para Eclipse utilizable tanto para edición de código Prolog como para
lanzamiento y depuración fuente del mismo como
puede verse en la figura 1. El plug-in será liberado
con las mismas características del Ciao en cuanto se
posea una versión lo suficientemente testeada.
En trabajos posteriores se incorporarán distintos
elementos que permitan una mayor integración del
entorno Eclipse con las herramientas provistas por
Ciao .
