Herramientas y métodos de soporte a la trazabilidad y evolución de modelos aplicado a la producción ágil de software en ambientes de desarrollo dirigido por modelos MDD
﻿
 
El objetivo de este proyecto es realizar 
actividades de investigación y desarrollo en 
temas relacionados a Ingeniería de Software 
Basado en Modelos (ISBM) y el paradigma de 
Desarrollo de Software Dirigido por Modelos 
(MDD) en conjunción con las metodologías 
ágiles para la producción de software, con el 
interés particular de evaluar e implementar 
mecanismos de trazabilidad entre los distintos 
artefactos involucrados en el proceso de 
construcción de proyectos software que utilizan 
lenguajes notacionales estándar UML-OCLSysML y herramientas CASE de soporte a la 
edición de modelos. En este contexto es 
necesario establecer mecanismos que permitan 
automatizar la transformación de modelos en un 
ambiente de desarrollo ágil de aplicaciones 
conducido por modelos, considerando aspectos 
que incluyen trazabilidad de artefactos de 
modelado y evolución en un marco de trabajo 
cambiante. 
 
Palabras clave: Ingeniería de Software, 
Metodologías ágiles, Lenguajes de modelado, 
Herramientas CASE, Trazabilidad de modelos, 
Desarrollo Dirigido por Modelos. 
 
CONTEXTO 
 
Las bases de conocimiento y línea de 
investigación se apoyan en la experiencia de 
estudios y desarrollos obtenidos a través del 
proyecto "PAMPA" (Precise Assistant for 
Modelling Process Activities) [1, 2] y el 
proyecto “Lenguajes para transformaciones de 
Modelos en MDD” [4], homologados por 
resolución académica UTN y apoyados por 
Microsoft que ha desarrollado el grupo de 
investigación en la UTN-Facultad Regional La 
Plata. Como resultado del primer proyecto se 
construyó una herramienta CASE (Computer 
Aided Software Engineering) orientada al 
modelado formal incluyendo especificación de 
refinamientos de modelos, aspectos que puede 
verse como un caso particular de 
transformación de modelos en MDD. Sobre 
estos tópicos han sido publicados - entre otros - 
los artículos: [3, 6, 15] que aportan una base 
formal a la herramienta.  
Como resultando del segundo proyecto, 
relacionado con la definición de lenguajes y 
transformaciones de modelos en MDD se han 
publicado los trabajos [7, 8, 9, 10, 11, 12, 14, 
16] y dictado tutoriales como [13].  
Ambos proyectos, publicaciones citadas y sus 
resultados teóricos constituyen un aporte a la 
construcción de prototipos de herramientas 
CASE de código abierto. Este grupo de 
investigación también ha recibido apoyo de la 
industria a través de grants como el siguiente: 
Grant Microsoft a la Innovación Curricular: 
“Request For Proposals 2005” en el tema 
“Application of formal methods to software 
development”, consistente en US$25,000 
(Marzo 2005, por concurso internacional). 
Actualmente, esta propuesta se enmarca dentro 
de un proyecto PID-UTN 2010 con Incentivos 
Docentes aprobado recientemente, con número 
de Resolución en trámite. 
 
1. INTRODUCCION 
 
Actualmente la ingeniería de sistemas está 
siendo orientada a un enfoque basado en 
modelos soportado por potentes herramientas 
CASE para generar código fuente de software, 
frente al tradicional enfoque documental, a la 
hora de escribir los sistemas. 
Los modelos son representaciones parciales de 
los sistemas. Utilizan una notación y una 
semántica claramente definida para describir de 
forma rigurosa ciertos aspectos, en 
contraposición al lenguaje natural. Son parte 
fundamental del paradigma de desarrollo de 
software conocido como “Model Driven 
Development” (MDD) [5], [24]. En las etapas 
de MDD se parte de los requisitos del sistema y 
se desarrollan modelos de arquitectura y diseño 
desde niveles de abstracción altos a niveles más 
detallados, que incluyen la definición de la 
plataforma de ejecución. En particular, UML 
(Unified Modeling Language), SysML [21] 
(Systems Modeling Language) y OCL (Object 
Constraint Language) representan tres lenguajes 
notacionales estándar. UML está ampliamente 
instalado en la industria de software, SysML 
fue específicamente concebido para la 
descripción de sistemas complejos (no 
necesariamente software) y actualmente ha 
logrado fuerte aceptación por la industria de 
sistemas, mientras que OCL [22] provee 
soporte formal para definir restricciones en 
fases de diseño de sistemas que siguen las bases 
del estilo de programación orientada a objetos. 
También existen en el mercado, herramientas 
estándares más genéricas basadas en la técnica 
de metamodelado, que permiten definir la 
sintaxis de nuevos lenguajes de modelado y no 
se reducen sólo a la edición de modelos en 
UML. 
En el contexto del Desarrollo Dirigido por 
Modelos (MDD), la trazabilidad o rastreo de 
elementos es un importante desafío teórico y 
práctico [18], [19], [20]. Los mecanismos de 
rastreo son necesarios en procesos que 
involucran transformación automática entre 
modelos, en generación de código y en 
actividades de modelado manual. Actualmente 
se enfrenta el desafío de mantener modelos 
consistentemente sincronizados, modelos y 
código en estados consistentes, como así 
también sincronizar actualizaciones manuales 
mezcladas con procesos automáticos. Algunas 
de las áreas de aplicación son: Administración 
de cambios de modelos, Administración de 
cambios de código y Análisis de impacto de 
cambios. 
Más allá de la metodología basada en modelos, 
en la última década ha surgido una nueva 
corriente metodológica de soporte al desarrollo 
ágil de aplicaciones software [17], centrada en 
la productividad e integración de los equipos de 
trabajo para lograr una rápida interacción con el 
usuario, permitiendo así validar y consensuar 
los requerimientos de la aplicación requerida de 
forma temprana. Los procesos ágiles para el 
desarrollo de software, conocidos anteriormente 
como metodologías livianas, intentan evitar las 
rigidez de normativas, fuerte dependencia de 
planificaciones detalladas previas al desarrollo 
y burocráticos caminos de las metodologías 
formales de la Ingeniería de Software, 
enfocándose en los valores esenciales del 
Manifesto Ágil [23]: “A los individuos y su 
interacción, por encima de los procesos y las 
herramientas”; “El software que funciona, por 
encima de la documentación exhaustiva.”; “La 
colaboración con el cliente, por encima de la 
negociación contractual.”; “La respuesta al 
cambio, por encima del seguimiento de un 
plan". Existen muchos métodos de desarrollo 
ágil; la mayoría minimiza riesgos respecto a los 
procesos tradicionales, desarrollando software 
en cortos lapsos de tiempo. El software 
desarrollado en una unidad de tiempo es 
llamado una iteración, la cual debe durar de una 
a cuatro semanas. Una iteración no debe 
agregar demasiada funcionalidad, pero la meta 
es lograr obtener una demo (versión de 
demostración que permite al usuario la prueba 
de un programa.) sin errores al cierre de cada 
iteración para validar con el usuario el avance, 
calidad y ajustes en los requerimientos de 
sistema; allí el equipo vuelve a evaluar las 
prioridades del proyecto. 
Resulta entonces interesante poder combinar o 
relacionar la metodología MDD con el proceso 
ágil de desarrollo de software. Por lo expuesto, 
el objetivo general de este proyecto es el 
desarrollo, a través del estudio, análisis e 
implementación de prototipos, de una 
herramienta de producción de software con base 
formal (basada en metamodelos) en el contexto 
MDD, siguiendo un proceso ágil de modelado 
que favorezca la propagación de cambios (por 
el mecanismo de trazabilidad) a partir de los 
requisitos del sistema.  
Por otro lado, la propuesta de Gestión de 
Procesos de Negocios (BPM) [26] ha adquirido 
una atención considerable en la última década, 
tanto por las comunidades de administración de 
negocios como por la comunidad informática. 
BPM provee un conjunto de metodologías para 
el análisis, comprensión y documentación de 
los procesos del negocio. En este dominio, el 
lenguaje de modelado estándar del OMG 
(Object Management Group), Business Process 
Modeling Notation (BPMN) [25] se ha tornado 
popular, así como otras notaciones existentes en 
el mercado. Sin embargo estas notaciones no 
son simples y siguen existiendo problemas 
básicos; por ejemplo, la validación de estos 
modelos por parte del cliente. Esta validación es 
una etapa crucial en un entorno 
interorganizacional en el que varias empresas 
interactúan para lograr sus objetivos del 
negocio. En consecuencia, como continuación 
al objetivo ya expuesto, proponemos facilitar y 
agilizar el modelado de procesos del negocio 
desde los requisitos del sistema a través de los 
mecanismos de trazabilidad y transformaciones 
de modelos que integraremos a la herramienta 
CASE a desarrollar. 
 
2. LINEAS DE INVESTIGACION  y 
DESARROLLO 
 
Será necesario para el desarrollo del trabajo, el 
estudio y análisis de los siguientes estándares y 
herramientas: 
• Estándar MDA (Model Driven Architecture) 
[22] de OMG para la visión MDD (Model 
Driven Development). 
• Lenguajes de modelado: UML (Unified 
Modeling Language), OCL (Object 
Constraint Language), SysML (Systems 
Modeling Language), BPMN (Business 
Process Modeling Notation). 
• Lenguajes de metamodelado: MOF (Meta 
Object Facility), EMF (Eclipse Modeling 
Framework), EuGENia. 
• Metodologías ágiles de desarrollo de 
software: Feature Driven Development 
(FDD), Adaptive Software Development 
(ASD), Agile Modeling (AM), Agile Unified 
Process (AUP), Essential Unified Process 
(EssUP), Test Driven Development (TDD), 
eXtreme Programming (XP), SCRUM, 
Kanban, Crystal Clear.  
• Estándares para los procesos de ciclo de vida 
del software (Normas ISO/IEC 12207:2008). 
• Patrones funcionales del campo de la 
Ingeniería de Requerimientos: Feature 
(característica/ventaja del producto), User 
Story, Casos de Uso, Requisitos SysML. 
• Patrones arquitectónicos para el diseño e 
implementación de software: GoF (Gang Of 
Four), GRASP (General Responsibility 
Assignment Software Patterns). 
• Patrones de Arquitectura (Capes, Pipeline, 
MVC, entre otros.)  
• Diseño y ejecución  de Test Cases (Casos de 
Prueba) para determinar que la herramienta 
CASE cumpla con los requisitos planteados. 
 
3. RESULTADOS Y OBJETIVOS 
 
Se planifica avanzar en la capacitación continua 
de los miembros de ésta línea de investigación. 
 
Como objetivo general se espera desarrollar una 
herramienta CASE con base formal de soporte 
al manejo de evolución y trazabilidad de 
modelos en un ambiente ágil de producción de 
software conducido por modelos, aplicable a un 
dominio específico (tal como al modelado de 
procesos de negocio (BPM)). 
Para tal fin, se han considerado desarrollar los 
siguientes objetivos específicos: 
 
• Personalizar artefactos estándares de 
modelado que permitan construir ágilmente 
modelos PIM (Platform Independent Model – 
Modelo independiente de la plataforma 
tecnológica de desarrollo) y PSM (Platform 
Specific Models – Modelo descrito en una 
plataforma o tecnología de implementación 
específico) para producir software en un 
ambiente MDD. 
 
•  Establecer mecanismos de trazabilidad entre 
los distintos artefactos de modelado para 
facilitar la escalabilidad y evolución de los 
modelos productivos en ambientes MDD. 
 
•  Definir un metamodelo para especificar 
evolución y trazabilidad entre modelos de 
distinto nivel de abstracción: PIM  PSMs y 
PSM  Modelo texto (código fuente). 
 
•  En base al metamodelo definido 
previamente, definir un marco de proceso 
para el desarrollo ágil de sistemas que de 
soporte a la producción de software 
considerando evolución y trazabilidad de 
modelos.  
 
• Construir una herramienta CASE con 
capacidades tales que permitan automatizar  
tareas de evolución y trazabilidad entre 
modelos de distinto nivel abstracción. 
 
• Extender la herramienta CASE para agilizar y 
facilitar el modelado de procesos del negocio 
desde los  requisitos del sistema, mediante 
mecanismos de trazabilidad y 
transformaciones de modelos.  
 
4. FORMACION DE RECURSOS 
HUMANOS 
 
El Proyecto I/D en el que se enmarcan estas 
líneas de trabajo, es parte de un proceso de 
incentivación para el desarrollo de actividades 
I/D, que se originan en el Laboratorio LINSI 
del Departamento de Sistemas de Información 
de la FRLP-UTN. Consecuentemente, se está 
poniendo acento y esfuerzo en las siguientes 
actividades: 
- Desarrollo de seminarios abiertos de 
formación general en relación a temas, técnicas 
y tecnologías incluidos en esta línea de 
investigación, para alumnos avanzados en la 
carrera de Ingeniería en Sistemas y para 
becarios de este equipo de trabajo, realizados en 
UTN-Facultad Regional La Plata y UNLPFacultad de Informática. 
- A cargo de integrantes de este equipo de 
trabajo, se encuentran en curso 2 Tesis de 
Postgrado  (Magíster en Ingeniería de Software,  
UNLP) relacionadas con el campo de 
investigación de éste proyecto. 
- Finalmente, los docentes integrantes de esta 
línea de investigación participan en el dictado 
de asignaturas con contenidos relacionados a 
este campo I/D: 
En grado: UTN-Facultad Regional La Plata, 
Ingeniería en Sistemas de Información y 
UNLP- Facultad de Informática. 
En postgrado: UAI-Facultad de Tecnología 
Informática, Maestría en Tecnología 
Informática y UNLP-Facultad de Informática, 
Maestría en Ingeniería de Software. 
 
 
5.
