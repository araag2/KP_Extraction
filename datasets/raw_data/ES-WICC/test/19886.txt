CPU GPU Un entorno de cómputo de alto rendimiento
﻿
NVIDIA abrió la arquitectura de
los procesadores gráficos de sus placas de video (GPUs) para ser utilizados en aplicaciones de propósito general y desarrolló el lenguaje de programación CUDA permitiendo a los
programadores crear funciones con explícito paralelismo de datos, brindando una plataforma de cómputo de alto rendimiento y paralelismo a gran escala.
Este trabajo forma parte del proyecto ”Métodos numéricos para ecuaciones diferenciales y aplicaciones”
que reúne investigadores de la Universidad de Buenos Aires y de la Universidad Nacional de General Sarmiento, y
tiene como objetivo utilizar dicha arquitectura de cómputo paralelo para
acelerar el tiempo de ejecución de un
método de mallado de elementos finitos creado por P. Persson y G. Strang
para MATLAB.
Dado que los GPUs poseen decenas de
unidades de procesamiento, son adecuadas para el procesamiento de datos
en paralelo. Esto es una ventaja para el
algoritmo seleccionado, el cual presenta un evidente paralelismo de datos.
Palabras claves Algoritmos Paralelos,
Procesadores Gráficos, GPU, Cómputo de
Alto Rendimiento, Paralelismo de datos.
Contexto de la Investigación
Este trabajo es parte del proyecto
PICT2007-910, ”Métodos numéricos
para ecuaciones diferenciales y aplicaciones”que reúne investigadores de
la Facultad de Ciencias Exactas y Naturales de la Universidad de Buenos Aires
y del Instituto de Ciencias de la Universidad Nacional de General Sarmiento.
La generación de mallas es un insumo
indispensable en la implementación del
método de elementos finitos. En particular, para mallas en 3D, el costo
computacional es muy elevado. Sería
de enorme utilidad acelerar el tiempo de ejecución de estos métodos
aprovechando el poder de cómputo que
ofrecen actualmente los procesadores
gráficos (GPUs) presentes en las tarjetas gráficas. [2] [7]
- Las causas de esta elección
La elección de esta tecnología de
cómputo paralelo se debió a diversos
factores. Ellos son:
La facilidad de acceso a los
GPUs como los que se encuentran en las tarjetas gráficas
NVIDIA, algunas de bajo costo.
El modelo de programacion de
CUDA permite programar aplicaciones de propósito general,
fácilmente escalables a GPUs
con más cantidad de cores. Esta arquitectura se comporta como un co-procesador paralelo
de la CPU ofreciendo un gran
rendimiento a aplicaciones que
puedan correr sobre una gran
cantidad de hilos de ejecución
independientes.[6] [3]
El paralelismo de datos es una
característica propia del algoritmo de mallado. Esta propiedad
permite realizar muchas operaciones a-ritméticas sobre las estructuras de datos y de manera simultánea. Esta es una situación
ideal para el modelo de programación de CUDA, obteniendo el
máximo provecho de la arquitectura SIMT-Single InstructionMultiple Thread que la caracteriza. [1] [5]
- El problema de Aplicación
Per-Olof Persson y Gilbert Strang,
desarrollaron un código generador
de mallas para MATLAB, llamado
DistMesh, el cual está a disposición del
público1. Este código fue escrito con el
objetivo de brindar un método simple y
de muchas menos líneas que otras técnicas de mallado. Persson-Strang toman
el mallado que provee el algoritmo de
Delaunay[12],[11] y, según se explica a
continuación, utilizan una técnica que
le permite mejorarlo y obtener un mallado de más calidad.[8]
La idea de este algoritmo es utilizar una simple analogía mecánica entre una malla de triángulos o tetraedros,
y una estructura de resortes. Cualquier
conjunto de puntos en el plano puede
ser triangulado por el algoritmo de
Delaunay.[10] Los puntos de la mallason nodos de una estructura armada con
“barras” o “resortes” que se encuentran comprimidos dentro del dominio.
Se trata de dejar evolucionar el sistema
mediante un proceso iterativo hasta llegar algún equilibrio establecido para el
método, por ejemplo cuando la sumatoria de fuerzas en cada nodo sea cero,
a menos de una tolerancia. Si en cada iteración algún nodo es reubicado
fuera del dominio, entonces debe ser reproyectado hacia la superficie. En el caso que los puntos se separen en más de
alguna tolerancia preestablecida para el
método se vuelve a utilizar Delaunay
para generar un nuevo mallado, y se
1http://persson.berkeley.edu/distmesh/
sigue adelante con el método general.
El código MATLAB de DistMesh
fue vectorizado para evitar los ciclosfor y lograr mayor eficiencia aunque
aun podría ser mejorado según explican
los autores en [9].
Para este trabajo hemos seleccionado, como herramienta para el desarrollo, una implementación del algoritmo
de Delaunay, del tipo Divide y Vencerás
escrito por Geo Leach en lenguaje C2.
Este algoritmo es de complejidad O(n
logn), la mejor complejidad lograda,
siendo n la cantidad de puntos del dominio. El mismo fue optimizado como
explica su autor en [4].
Objetivos teóricos y experimentales
Se propone disminuir el tiempo de
ejecución del método propuesto por
Per-Olof Persson y Gilbert Strang, para
generar un mallado de elementos finitos en 2D y 3D, migrando a una arquitectura de cómputo paralelo de alto rendimiento como la ofrecida por los
procesadores gráficos GPUs.
En una primera etapa se implementa la versión paralela y 2D de DistMesh
usando CUDA. En esta etapa es de
suma importancia enfocar los esfuerzos
en maximizar el paralelismo de datos
del algoritmo. Una manera de lograrlo
será concentrándose en la naturaleza de
los datos y en su organización durante
el cómputo.
Este desarrollo en 2D contiene los
ingredientes conceptuales necesarios
para permitir la extensión al caso 3D.
En esta segunda etapa del trabajo se implementará el caso 3D del método, resultando en consecuencia un incremento de la necesidad de memoria. Esto requiere mejorar aun más el acceso a los
diferentes niveles de memoria presentes
en la arquitectura de los GPUs mediante
el uso del modelo de programación
CUDA.
En una etapa final se escribirá la
nueva función de mallado para Matlab
optimizada, o sea, se elaborará una nueva función DistMesh modificada para
que ejecute haciendo uso de los GPUs.
Esto implica la escritura de una función
de tipo MEX para ser incluida dentro de
las funciones de Matlab.
Formación de recursos Humanos
Este segmento del proyecto pretende fortalecer el área de matemática
aplicada de la UNGS promoviendo el
contacto con investigadores del departamento de matemática de la Facultad
de Ciencias Exactas y Naturales de la
UBA. Además, uno de los coautores del
trabajo está ingresando al Doctorado
en Ciencia y Tecnología de la UNGS,
sirviendo los temas desarrollados en
este trabajo de guía para su inserción en
los tópicos que abordará en su tesis.
Agradecimientos
Los integrantes de este trabajo
quieren agradecer a los investigadores
del Instituto de Investigación en Informática-LIDI de la Universidad Nacional de La Plata, dirigido por el Ing.
Armando De Giusti, cuya ayuda inestimable está presente siempre en el mo2Copyright c©2008 RMIT CS
mento de requerirla.
