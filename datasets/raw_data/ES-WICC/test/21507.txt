Representación de versiones de modelos en el proceso de diseño
﻿ones del objeto que se diseña, el cual puede consistir, según el 
dominio ingenieril, en un sistema de información, un equipo industrial, o una planta de procesos 
químicos. Los modelos generados difieren en granularidad, complejidad e hipótesis asociadas a los 
mismos; siendo necesario un mecanismo explícito que administre adecuadamente las distintas 
versiones de modelos generadas, permitiendo luego el seguimiento del proceso de diseño y la 
navegabilidad por las distintas versiones que surgieron durante tal proceso. Tal mecanismo es el 
centro de interés de investigación en el presente trabajo, el cual continúa los avances presentados en 
[2] y [3]. La principal contribución que se espera es la explicitación de un modelo que permita la 
captura y representación del proceso de diseño en términos de las operaciones aplicadas a las 
distintas versiones de los objetos que intervienen en el proceso de diseño. La definición del modelo 
debe ser lo suficientemente flexible para facilitar la especialización del mismo según un dominio de 
diseño particular, empleando los conceptos del dominio y las operaciones aplicables en el mismo. A 
partir de tal especialización se persigue la implementación de herramientas de soporte a las 
actividades del proceso de diseño, como puede ser una herramienta de soporte a las actividades de 
solución de problemas de ingeniería de procesos o de ingeniería de software.  
Con el objeto de representar las diferentes versiones de modelo que son generadas durante el 
curso del proyecto de diseño se considera el cálculo situacional propuesto por McCarthy en 1963 
[4], como un lenguaje de primer orden para razonar acerca de acciones, y si bien ha recibido 
muchas críticas acerca de su falta de generalidad para representar problemas del mundo real, 
recientes trabajos que se están realizando a partir del mismo están revirtiendo estas críticas [5,6]. 
Tal mecanismo debe extenderse con la tecnología de orientación a objetos [1] para poder 
representar adecuadamente como un producto del diseño evoluciona durante un proyecto dado y 
permitir la especialización del mismo para un dominio de diseño ingenieril en particular. 
2.  Esquema para la Representación de Versiones de Modelos en el Proceso de Diseño 
El proceso de diseño puede concebirse como una secuencia de actividades que operan sobre 
los productos del proceso de diseño, denominados objetos de diseño. En este contexto se consideran 
objetos de diseño a los requerimientos, la representación del artefacto de diseño mismo, los 
argumentos de las decisiones tomadas, etc. En un instante dado, durante la realización del proyecto 
de diseño, los estados asumidos por el conjunto relevante de objetos de diseños, denominado 
versión de modelo (m), provee una descripción del estado del proceso de diseño, incluyendo el 
artefacto que está siendo diseñado. 
En la Figura 1 se ilustra el esquema de representación de las versiones de los modelos 
generados durante el proceso de diseño. El ejemplo presentado se corresponde al dominio de 
ingeniería de procesos químicos, donde una estructura de entrada salida fue refinada en una sección 
de reacción y una sección de separación, y los flujos de entrada han sido modificados, especificando 
las características de los mismos. En la Figura 1 se ilustran tres niveles: Repositorio, Versiones y 
Modelos Inferidos. Como se puede apreciar, las distintas versiones de modelos son inferidas a partir 
de vistas sobre un repositorio. El repositorio contiene los distintos objetos que surgen durante el 
proceso, como así también las asociaciones que se establecen entre los mismos. Los objetos que 
 Figura 1. Esquema de Representación de 
Versiones de Modelos del Diseño 
componen al repositorio se denominan objetos versionables (o). Sobre el repositorio se representa 
el nivel versiones, donde se definen las distintas 
versiones que se han generado para cada objeto 
existente en el repositorio, los objetos definidos 
en este nivel se denominan versión de objeto (v).  
En la presente propuesta se considera que 
cada versión de modelo (m) se genera a partir de 
una versión de modelo precedente (mp), sobre la 
cual se han aplicado una serie de operaciones que 
en general implican la eliminación, creación, 
modificación, etc., de las versiones de los objetos 
de diseño (es decir, de los componentes del 
modelo: objetos, clases, relaciones, en el caso de 
ingeniería de software; flujos, separadores, 
reactores, en el caso de ingeniería de procesos 
químicos). Resulta entonces, que toda versión de 
modelo puede tener cero o más versiones de 
modelos sucesoras (ms) y posee una única versión 
de modelo precedente; a excepción de la versión 
de modelo inicial (m0), la cual carece de 
precedente. En consecuencia, el esquema de representación de versiones tiene una estructura de 
árbol donde cada versión de modelo es un nodo del mismo y cuya raíz es la versión de modelo m0.  
3.  Esquema Formal para la Representación de Versiones de Modelo del Proceso de Diseño 
Dado que se plantea la evolución de los modelos del diseño como una historia compuesta por 
situaciones discretas, se toma el cálculo situacional para el modelado del proceso de generación de 
versiones. La ontología básica del cálculo situacional consiste en situaciones, las cuales 
corresponden a fotografías del universo estudiado en un instante dado, y acciones, que producen 
evoluciones de una situación a otra. Se considera que cada nueva situación se genera a partir de una 
precedente por la aplicación de una acción. En el contexto dado por el proceso de diseño, cada 
nuevo modelo que se genera se puede asimilar con una situación, y una acción es el conjunto de 
operaciones que se realizaron sobre el modelo precedente. 
Entonces, una nueva versión de modelo mn se genera como consecuencia de la aplicación de 
una secuencia de operaciones básicas φ sobre los componentes de una versión de modelo m. Esto se 
logra ejecutando la siguiente evaluación: aplicar(φ, m) = mn. La función aplicar se define en la 
expresión 1, donde Φ es el conjunto de todas las secuencias de operaciones posibles, y M es el 
conjunto de las versiones de modelos posibles. 
En la expresión 2 se define en forma recursiva una secuencia de operaciones, donde λ es una 
secuencia vacía, o es una operación, y • representa la concatenación entre una operación y una 
secuencia de operaciones. 
aplicar: Φ × M → M (1) 
operaciónoo :

•
= φ
λφ  (2) 
A partir de la expresión 2 se puede definir por inducción a la función aplicar: 
aplicar(λ, m) = m 
aplicar(o•λ, m) = mi, m ≠ mi 
aplicar(o•φ, m) = aplicar(φ, aplicar(o•λ, m)) 
(3) 
Las operaciones primitivas propuestas inicialmente para representar la transformación de 
versiones de modelos son: agregar, borrar, y modificar. A través de la operación agregar(v) se 
puede incorporar a una versión de modelo una versión de objeto inexistente en la versión de modelo 
 anterior. Inversamente, la operación borrar(v) elimina una versión de objeto existente en la versión 
de modelo anterior. La operación modificar(va, vs) crea una nueva versión de objeto vs a partir de la 
versión de objeto previa va, donde vs es una versión de objeto sucesora de va. Entonces, una versión 
de objeto v pertenece a la versión de modelo resultante de aplicar la secuencia de operaciones φ a la 
versión de modelo m si y solo si: (i) v fue agregada cuando se generó la nueva versión de modelo 
(agregar(v) ∈ φ o modificar(va, v) ∈ φ); o (ii) v pertenecía a la versión de modelo previa m y no fue 
eliminada cuando se aplicó φ (borrar(v) ∉ φ) ∧ (modificar(v, vp) ∉ φ). Estas definiciones, se 
especifican formalmente en la expresión 4 utilizando el formato de los axiomas de estado sucesor 
propuesto por Reiter [5]. 
(∀ φ, v, va, vp, m) pertenece(v, aplicar(φ, m)) ⇔ 
((pertenece(v, m) ∨ (agregar(v) ∈ φ) ∨ (modificar(va, v) ∈ φ)) ∧ 
((borrar(v) ∉ φ) ∧ (modificar(v, vp) ∉ φ)) 
(4) 
A partir de la expresión 4 es posible determinar que versiones de objetos pertenecen a una 
versión de modelo (pertenece(v, m)). Entonces, de esta manera se puede reconstruir una versión de 
modelo mi+1 aplicando todas las secuencias de operaciones desde la versión de modelo inicial m0. 
En la expresión 5 se presenta tal reconstrucción, donde φi •  φj representa la concatenación de las 
secuencias φi y φj. 
mi+1 = aplicar(φi, mi); mi = aplicar(φi-1, mi-1); ...; m1 = aplicar(φ0, m0) 
mi+1 = aplicar(φi, aplicar(φi-1, aplicar(...aplicar(φ0, m0)...))) 
mi+1 = aplicar(φ0•  ... •  φi-1 •  φi, m0) 
(5) 
Una vez definidas que versiones de objetos conforman una versión de modelo, es necesario 
especificar que relaciones existen entre las mismas. Se debe notar, que en la presente propuesta las 
versiones de objetos pertenecientes a una versión de modelo no están explícitamente asociadas entre 
sí. En cambio, se define por cada objeto de diseño que fue agregado y/o modificado durante un 
proyecto de diseño un objeto versionable (o) que conoce todas sus versiones de objetos generadas a 
través del predicado versión(v, o) y que mantiene las asociaciones con los diversos objetos de 
diseño que surgieron durante el proceso de diseño. Estas asociaciones son capturadas por el 
predicado asociación(ak, oi, oj) que significa que la asociación ak relaciona al objeto versionable oi 
con el objeto oj. Consecuentemente, las asociaciones existentes entre dos versiones de objetos se 
deben inferir a partir de las asociaciones entre objetos versionables (expresión 6).  
(∀ v, v1, v2, a, m) asociaciónInf(a, v1, v2, m) ⇔ 
(∃ o1, o2) pertenece(v1, m) ∧ pertenece(v2, m)  
∧ versión(v1, o1) ∧ versión(v2, o2) ∧ asociación(a, o1, o2) 
(6) 
4.  Modelo Orientado a Objetos de Versiones de Modelos del Proceso de Diseño 
A partir del esquema de Representación de Versiones de Modelos propuesto se trabajó en un 
modelo orientado a objetos que lo soporte y permita su especialización en distintos dominios de 
diseño ingenieriles. En la Figura 2 se presentan los distintos paquetes que conforman el modelo del 
esquema propuesto. El paquete ModeloDominio, permite expresar los conceptos modelables, sus 
características y las relaciones existentes entre los distintos conceptos de un domino en particular; 
dominio que se empleará en el desarrollo de un proyecto dado.  
El esquema propuesto utiliza el cálculo situacional para representar si una versión de objeto 
pertenece o no a una versión de modelo dada y permitir la reconstrucción de una versión de modelo 
particular. En este esquema se utiliza la tecnología de orientación a objetos para modelar las 
relaciones existentes entre las versiones de objetos de distintas versiones de modelos, permitiendo la 
navegación a través de la historia de las versiones de objetos que conforman una versión de modelo 
dada. 
Las relaciones entre versiones de objetos se representan a través de asociaciones de clase 
explícitas en el paquete Nivel Versiones (Figura 2, especialización de Historia). Cada operación de 
 transformación que se aplica a una versión de un modelo, incorpora información necesaria para 
mantener rastros de la evolución del mismo. Esencialmente, cada operación, además de ejecutar la 
acción que la misma involucra, establece una relación entre las versiones de objetos a las que se 
aplica y las que surgen como resultado de su ejecución (operaciones implementadas en los métodos 
ejecutar, especializados por las distintas operaciones en el paquete ModeloOperación).  
Una versión de modelo en particular (clase VersiónModeloTrabajo del paquete 
ModeloInferido) está conformada por las versiones de objetos y las asociaciones entre estas 
versiones, que pertenecen a la misma. Las asociaciones entre las versiones de objetos se determinan 
a partir de las asociaciones explícitas en el repositorio entre los objetos que éstas versionan 
(expresión 6), además, a partir de los objetos versionables del repositorio se determina los tipos de 
conceptos modelables que representan (tipoConcepto). Las características de los distintos objetos 
inferidos se determinan a partir del paquete ModeloDominio, donde se definen las características 
para cada concepto modelable. Los valores asumidos por las características para una versión de 
objeto dada se obtienen a partir de la información almacenada en el Nivel Versiones.  
Nivel Repositorio
Nivel Versiones ModeloDominio
Proyecto
ModeloInferidoModeloOperación
Historia
VersiónModelo
HistoriaModelo HistoriaAgregar
VersiónObjeto ValorCaracterística Característica
HistoriaModificar
HistoriaVersiónHistoriaBorrar
Dominio
Asociación
ObjetoVersionable
RelaciónDominio
ConceptoModelable
VersiónModeloTrabajo
ObjetoDiseñoInferido CaracterísticaInferida
ValorInferidoAsociaciónInferida
Comando
Agregar
Borrar
Modificar
contenedor
1 origen
destino
*
característica
*
1
*sucesor
historiaModelo
predecesor
ejecutar()
agregar()
borrar()
modificar()
ejecutar()
ejecutar()
ejecutar()
historiaVersión
origen
*
*
*
historiaBorrar
historiaAgregarpredecesor
1..*
sucesor
predecesor
versión
versión
sucesor
*
predecesor 1..*
objeto
*
sucesor
*
asociación
tipoAsociación
*
*
tipoCaract
destino
*
tipoConcepto
*
*
valor
componente*
*
*
 
Figura 2. Modelo de Objeto del Esquema de Versionamiento 
5.  Extensión de las Operaciones Básicas 
Existen otras operaciones frecuentes en la generación de modelos que son necesarias 
representar si se quiere mantener la historia de los cambios realizados en la versión de modelo. Por 
ejemplo, una operación frecuente en el modelado es la que permite detallar un objeto a partir de su 
descomposición en una estructura de nuevos objetos. En este contexto tal operación es denominada 
refinar, y la misma permite que en la nueva versión de modelo aparezcan las versiones de objetos 
que desarrollan el refinamiento, un ejemplo de tal operación se presentó en la Figura 1. La 
operación inversa a refinar es simplificar, mediante la cual una estructura de objetos (conjunto de 
versiones de objetos) se condensa en una versión de objeto.  
En principio, la operación refinar(v, ψ) se expresa en términos de una serie de operaciones 
agregar y borrar de acuerdo a la expresión 7. La posibilidad de expresar operaciones compuestas en 
término de operaciones básicas, como se propuso en la expresión 7, permite mantener el axioma de 
estado sucesor presentado en la expresión 4, sin tener que actualizarlo con cada nueva operación 
que se incorpore. Por otro lado, la expresión 7 tiene la falencia de no expresar la relación existente 
 entre la versión de objeto v y las versiones de objetos vr que pertenecen a ψ, refinamiento(v, ψ). 
Dicha relación se modela a través del paradigma orientado a objetos. Una versión de objeto se 
vincula con una o más versiones de objetos antecesoras y una o más versiones de objetos sucesoras. 
Este vínculo se lo denomina Historia Versión (Figura 2 – NivelVersiones) y es la asociación a 
especializar para definir las distintas operaciones. En el caso de la operación refinar, Historia 
Versión se especializa en Historia Refinar, donde su antecesor es una versión de objeto y su sucesor 
es una o más versiones de objetos. La generación de las instancias de Historia Refinar es 
responsabilidad del método ejecutar() redefinido en la clase Refinar, que especializa Comando. Tal 
método incorpora además las operaciones sobre las versiones de objeto según la expresión 7. 
φ = φ1 • refinar(v, ψ) • φ2 ⇒ 
(∀ vr ∈ ψ,  agregar(vr) ∈ φ3 ∧ borrar(v) ∈ φ3) ∧ (φ = φ1 •φ3 • φ2) (7) 
6.  Conclusiones 
Se ha observado la necesidad en distintas disciplinas ingenieriles de contar con un esquema 
que permita manejar consistentemente y navegar a través de los modelos generados en el proceso de 
diseño, para lo cual es necesario especializar el modelo propuesto según el dominio particular con el 
cual se quiera trabajar. Se pretende a través de esta propuesta documentar la evolución de un 
modelo resultante de un proceso de diseño, de forma tal de poder rastrear la evolución de los 
distintos objetos identificados durante el proceso, formando las bases para el aprendizaje y el futuro 
reuso. 
El empleo en conjunción del paradigma de objetos con el cálculo situacional permite la 
especialización del modelo según los conceptos modelables que conforman a un dominio en 
particular y el conjunto de operaciones aplicables a una versión de modelo dada. Actualmente se 
está trabajando en la extensión del modelo para dar soporte al trabajo cooperativo, principalmente 
en la selección de alternativas desarrolladas por distintos actores y en el trabajo concurrente 
independiente o débilmente acoplado. Por otro lado, se está desarrollando un prototipo basado en 
tecnología de base de datos orientada a objetos, para la implementación del mismo se está 
empleando la base de datos Versant [7] y el lenguaje de programación Java. 
