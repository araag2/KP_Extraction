Refactoring de diagramas de clases UML
﻿REFACTORING DE DIAGRAMAS DE CLASES UML
Claudia Pereira  Liliana Favre*
INTIA -  Facultad de Ciencias Exactas
Universidad Nacional del Centro de la Provincia de Buenos Aires
Tandil -  Argentina
{ cpereira, lfavre @exa.unicen.edu.ar }
*CIC (Comisión de Investigaciones Científicas de la Provincia de Buenos Aires)
1. INTRODUCCIÓN
Se denomina refactoring al proceso de reestructurar software orientado a objetos aplicando una
secuencia de transformaciones que preservan la funcionalidad del mismo a fin de mejorar alguna
métrica. Es una actividad esencial para controlar la evolución del software facilitando futuras
adaptaciones y extensiones. Cobró importancia en procesos de desarrollo como XP (eXtreme
Programming) que requiere de la  reestructuración de  modelos y código existentes a partir de pasos
pequeños y sistemáticos (Beck, 2000). También es fundamental en el contexto de técnicas de
ingeniería reversa de sistemas legacy.
Algunas herramientas CASE UML proveen facilidades, si bien limitadas, para el refactoring sobre
código, es decir ligado a la sintaxis de un lenguaje de programación en particular. Actualmente
OMG (Object Management Group) promueve desarrollos de software basados en UML (OMG,
2004) a partir de una arquitectura Model Driven (MDA, 2004). MDA define un framework para
modelar que separa la especificación de la funcionalidad del sistema de su implementación sobre
una plataforma en una tecnología específica. La idea clave es la automatización de transformaciones
de modelo-a-modelo. En este contexto se vuelven esenciales las técnicas de refactoring para
mejorar los modelos de los distintos niveles de abstracción de un diseño.
En esta investigación se propone el refactoring de diagramas de clases UML enriquecidos con
expresiones OCL (Warmer y Kepple, 2003) a partir de  un sistema transformacional basado en
reglas y estrategias. El objetivo de este sistema transformacional es proveer asistencia para los
refactorings de modelo-a-modelo mediante la aplicación de reglas de transformación que preservan
la funcionalidad del modelo original. Las transiciones entre versiones se realizan de acuerdo a
reglas precisas basadas en la redistribución de clases, atributos, operaciones y asociaciones del
diagrama. Durante el proceso de transformación, se necesitan estrategias para guiar la aplicación de
las reglas de transformación que permiten construir un nuevo diagrama UML.
Se describen en la sección 2 los trabajos relacionados. La sección 3 presenta el sistema de
transformación y un conjunto de reglas y estrategias para reestructurar clases y asociaciones.
Finalmente la sección 4 concluye y discute futuros trabajos.
2. TRABAJOS RELACIONADOS
La primera publicación relevante sobre refactoring fue realizada por Opdyke (1992), quien
establece precondiciones que aseguran la preservación del comportamiento para un conjunto de
refactorings definidos en términos de C++. Roberts (1999) describe técnicas basadas en contratos
de refactoring. Fowler (1999) aplica informalmente técnicas de refactoring sobre código fuente en
el lenguaje de programación Java, explicando los cambios estructurales a través de ejemplos con
diagramas de clases. Fanta y Rajlich (1998) y Fanta y Rajlich (1999) estudian el refactoring de
código C++.
Varias propuestas proveen soporte para reestructurar modelos UML. Gogolla y Ritchers (1998)
proponen transformar características avanzadas de diagramas de clases UML en construcciones más
básicas con restricciones OCL. En Evans (1998) se establecen reglas que permiten transformar un
modelo estático en otro diagrama con propiedades deducidas basado en el uso de transformaciones
diagramáticas. En Sunyé y otros (2001) se presenta un conjunto de reestructuraciones y se explica
cómo pueden ser diseñadas para preservar el comportamiento de modelos UML. Philipps y Rumpe
(2001) reconsideran propuestas de refinamiento existentes para tratar formalmente con nociones de
comportamiento, equivalencia de comportamiento y preservación de comportamiento. Whittle
(2002) investiga el rol de las tranformaciones sobre diagramas de clases UML con restricciones
OCL. Demeyer y otros (2002) describen el estado del arte sobre el área de refactoring. Porres
(2003) define e implementa refactorings de modelos en base a transformaciones basadas en reglas.
Van Gorp y otros (2003) proponen un conjunto de extensiones al metamodelo UML que permiten
razonar sobre refactoring para todos los lenguajes orientados a objetos.
Varias herramientas automatizan distintos aspectos de refactoring. Por ejemplo, Guru (Moore,
1995) es una herramienta que soporta transformaciones automáticas para reestructurar jerarquías de
herencia de objetos SELF preservando el comportamiento de los mismos. Smalltalk Refactoring
Browser (Roberts y otros, 1997) es un browser avanzado para VisualWork que realiza
automáticamente transformaciones que preservan el comportamiento. Together ControlCenter
(TogetherSoft, 2004) aplica refactoring de código sobre requerimientos del usuario.
3. REFACTORING A PARTIR DE “REGLAS + ESTRATEGIAS”
Se propone en esta investigación aplicar reglas y estrategias para el refactoring de modelos estáticos
UML anotados en OCL. Las reglas de transformación preservan el comportamiento observable del
modelo original y pueden crear nuevos elementos en el modelo, modificar o remover existentes.
La Figura 1 muestra el proceso de transformación a partir de “reglas + estrategias”. Cada
refactoring se realiza sobre un subconjunto del modelo seleccionado por el diseñador manteniendo
el historial de las transformaciones aplicadas para soportar traceability. Los refactorings resultan
una técnica poderosa cuando son aplicados repetidamente en un modelo.
Figura 1- Refactoring a partir de “reglas + estrategias”
Las reglas de transformación se denotan mediante un esquema de entrada, un esquema de salida  y
condiciones de aplicabilidad  que deben ser chequeadas para poder efectuar las transformaciones.
Se definen un conjunto de reglas para la reestructuración de jerarquías de herencia y un conjunto de
reglas más poderosas para la reestructuración de diagramas de clases que permiten una
transformación gradual y automática garantizando consistencia y equivalencia funcional.
Se describen en 3.1 un conjunto de reglas para el refactoring de clases y estrategias para aplicarlas y
en 3.2. reglas de transformación vinculadas a  asociaciones.
Transformación
de ModelosDiagramas estáticosUML / OCL
Diagramas estáticos
UML / OCL
“Reglas + Estrategias”
Historial
3.1. Refactoring de jerarquías de herencia
Reglas de  transformación
Se describen a continuación un conjunto de reglas para transformar jerarquías de clases.
Folding
Une dos clases que tienen una relación de herencia directa obteniendo una nueva clase que reúne el
comportamiento de ambas. Esta regla reduce el nivel de una jerarquía de clases en aquellos casos
donde no hay un interés particular en el comportamiento de la clase base, ya sea porque es una clase
abstracta o porque la cantidad de operaciones de la clase no justifica tener otro nivel en la jerarquía.
Abstracción
Divide el comportamiento de una clase generando dos clases que mantienen una relación de
herencia directa. Mediante la aplicación de esta regla se puede abstraer en una nueva clase base el
comportamiento más general reconocido dentro de otra clase.
Composición
Dadas dos clases sin relación de herencia entre sí, se forma una nueva clase con la unión de ambas.
Esta regla es útil para agrupar comportamiento y reducir la herencia múltiple fundamentalmente
cuando las clases comparten un descendiente.
Factorización
Factoriza las operaciones equivalentes en una nueva clase base a partir de dos clases sin relación de
herencia entre sí. Esta regla elimina operaciones y atributos duplicados.
Unfolding por atributos
Divide el comportamiento de una clase, generando dos clases que mantienen una relación de
herencia directa. Tales clases surgen a partir de realizar una partición de los atributos en dos
subconjuntos disjuntos. Esta regla es útil cuando las operaciones no se refieren simultáneamente a
todos los atributos, sino que sólo hacen referencia a algunos de ellos.
Estrategias para el refactoring de jerarquías de herencia
Las reglas de reestructuración son unidades básicas de transformación, es decir a partir de ellas se
pueden construir secuencias particulares de aplicación de reglas denominadas estrategias de
reestructuración. A continuación se describen algunas de ellas.
Composición sin duplicación de métodos
Integra el comportamiento de dos clases no genéricas eliminando la repetición de métodos, ya que
se obtiene una sola clase que reúne todo el comportamiento sin repetición de aquellos métodos que
fueran equivalentes. La secuencia de reglas es:  Factorización 
