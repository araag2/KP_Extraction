Un ambiente gráfico para testear estrategias evolutivas en el problema inverso de las IFS
﻿Un Ambiente Gr¶a¯co para Testear
Estrategias Evolutivas en el Problema Inverso
de las IFS
Mar¶³a Laura Ivanissevich1, Paula Millado1, Luis Sierpe1 y Claudio Delrieux2
1Univ. Nacional de la Patagonia Austral, L. de la Torre 1070, (9300) R¶³o Gallegos,
2Universidad Nacional del Sur, Alem 1253, (8000) Bah¶³a Blanca, ARGENTINA.
Voice: (54)(291)4595101 ext. 3381 | Fax: (54)(291)4595154 | e-mail: claudio@acm.org
Palabras Clave: Sistemas de Funciones Iteradas (IFS), Programaci¶on Evolutiva, Programaci¶on Gen¶etica.
1 Introducci¶on
Los sistemas de funciones iteradas (IFS) constituyen una manera de representar im¶agenes por
medio de conjuntos fractales. La factibilidad de representar im¶agenes con IFS se fundamenta
en el Teorema del Collage, seg¶un el cual una imagen cualquiera puede ser arbitrariamente
aproximada por un atractor fractal adecuadamente representado por un IFS. Esta propiedad
hace tentadora la idea de buscar un m¶etodo de compresi¶on de im¶agenes que encuentre el
collage adecuado para cualquier imagen de entrada. Esto constituye el problema inverso del
IFS. Sin embargo, la b¶usqueda exhaustiva de un IFS para aproximar una imagen dada est¶a
fuera de las posibilidades de los sistemas de c¶omputo actuales. Un IFS como el del helecho
consta de 24 par¶ametros, por lo que encontrar sus respectivos valores por \fuerza bruta"
requerir¶³a un tiempo de c¶omputo imposible de cuanti¯car.
Las estrategias hasta ahora propuestas para solucionar esta di¯cultad son dos. Por un
lado, es posible restringir el espacio de b¶usqueda a un subconjunto de las transformaciones
a¯nes, como se propone en la compresi¶on fractal en bloques (CFB) [4, 6]. En la CFB se
utiliza un conjunto relativamente grande de mapas entre segmentos de la imagen, utilizando
escalas ¯jas, y rotaciones cuantizadas a cuartos de circunferencia. Por lo tanto, el espacio
de b¶usqueda es relativamente pequeeño para cada transformaci¶on. Los resultados obtenidos
con la CFB poseen una buena relaci¶on de compromiso entre tiempo de c¶omputo, compresi¶on
resultante, y calidad ¯nal, aunque est¶an evidentemente lejos de las posibilidades te¶oricas [5].
Por otro lado, es posible utilizar un mecanismo de b¶usqueda adaptativo, que tenga cierta
inteligencia como para guiarse dentro del un subconjunto del espacio de b¶usqueda en el
cual los resultados se acercan a la soluci¶on buscada. Este es el tipo de estrategia buscada
con la programaci¶on evolutiva (PE) [8] y con la programaci¶on gen¶etica (PG) [7]. El uso
de PE y PG para la soluci¶on del problema inverso ha sido mucho menos estudiado, pese a
que permitir¶³a obtener mejores compresiones, tal vez con mayores tiempos de c¶omputo, que
la CFB. Al mismo tiempo, el problema inverso representa un caso interesante de estudio
Workshop de Investigadores en Ciencias de la Computación WICC 2002
Página 1101
para comparar las diversas estrategias evolutivas y gen¶eticas, combinarlas, y eventualmente
proponer algunas nuevas. Este es el objetivo de esta l¶³nea de investigaci¶on. Para obtener
estos resultados se implement¶o un ambiente gr¶a¯co que permite testear y comparar los
resultados del uso de dichas estrategias, y evaluar num¶erica y visualmente los resultados que
se van produciendo a lo largo de las generaciones.
2 Sistemas de funciones iteradas
Un sistema de funciones iteradas (IFS) consiste en una colecci¶on de transformaciones a¯nes
contractivas que mapea al plano <2 sobre s¶³ mismo. Esta colecci¶on de transformaciones
de¯ne un mapa
W (¢) =
n[
i=1
wi(¢):
Las transformaciones a¯nes contractivas tienen la importante caracter¶³stica que cuando son
aplicadas repetidamente, convergen a un punto ¯jo. El mapa W no es aplicado a todo el
plano sino a un subconjunto, es decir, a una colecci¶on de puntos del plano. Dado un conjunto
inicial S, podemos calcular wi(S) para cada i, tomar la uni¶on de estos conjuntos y obtener
un nuevo conjunto W (S). W es un mapa en el espacio de los subconjuntos del plano. Seg¶un
el teorema de Hutchinson [2], cuando las transformaciones wi son contractivas en el plano,
entonces W es contractiva en el espacio (cerrado y acotado) de subconjuntos del plano. Por
lo tanto, la iteraci¶on de un IFS converge a un ¶unico subconjunto del plano, el cual es un
punto ¯jo del mapa W , denominado atractor A del IFS. Para la obtenci¶on del c¶odigo IFS de
una ¯gura I arbitraria, se parte de una representaci¶on inicial aproximada de la silueta S del
objeto que se desea modelar. La idea del m¶etodo es buscar un grupo de mosaicos |copias
transformadas de S| que en conjunto cubran la silueta original (Teorema del Collage [3]).
Si por d(I; J) denotamos la distancia de Hausdorf entre subconjuntos I y J del plano en
una m¶etrica adecuada, y r es la contractividad global de W , entonces el teorema del collage
permite a¯rmar la desigualdad
d(A; I) ∙ 11¡ rd(I;
[
wi(I));
lo cual signi¯ca que la distancia entre la ¯gura I y el atractor A del IFS est¶a acotada por
la distancia entre I y el cubrimento determinado por W . A mejores cubrimientos, mejor
aproximaci¶on a la imagen ¯nal. Como ya mencion¶aramos, este cubrimiento hasta ahora no
ha podido implementarse en forma autom¶atica, debi¶endose trabajar con asistencia humana.
A partir de la silueta S, son introducidas una a una copias reducidas de S, de modo de poder
ir cubri¶endola con sus copias transformadas. Cada copia podr¶a ser torcida, escalada, rotada
o trasladada seg¶un convenga para lograr el prop¶osito buscado. Es importante que el tamaaño
de cada wn(S) sea menor que el de S para asegurar que cada transformaci¶on sea contractiva.
En otras palabras, para lograr la codi¯caci¶on se deben determinar un conjunto de transformaciones a¯nes contractivas fw1; w2; : : : ; wng con la siguiente propiedad: La silueta original S y el conjunto

S =
N[
n=1
wn(S)
deben ser visualmente cercanos, siendo el n¶umero de transformaciones el menor posible.
wn(S) es llamado el n-¶esimo mosaico del collage. En la Figura 1 se muestra un atracWorkshop de Investigadores en Ciencias de la Computación WICC 2002
Página 1112
Figura 1: Cubrimiento de una hoja para la obtenci¶on de los c¶odigos IFS y atractor que se logra
con ellos.
tor obtenido utilizando el procedimiento descripto. Un algoritmo utilizado para generar el atractor o imagen a partir de las transformaciones, comienza con el c¶odigo IFS
fwn; pn : n = 1; 2; : : : ; Ng junto con la ventana de gra¯caci¶on V de resoluci¶on L £ M .
El algoritmo, denomindado \juego del caos" [3], realiza una recorrida aleatoria del atractor
del siguiente modo: parte de un punto inicial, escoge al azar un mapa wn, y transforma el
punto mediante este mapa, obteniendo las coordnadas de un pixel. Este pixel es gra¯cado, y
su punto correspondiente es luego sometido al mismo proceso, y as¶³ una cantidad prede¯nida
de iteraciones.
3 Estrategias evolutivas y gen¶eticas
La programaci¶on evolutiva (PE) y la programaci¶on gen¶etica (PG) son t¶ecnicas bien conocidas
que surgen de imitar lo que conocemos de la evoluci¶on natural. La PE y la PG se utilizan,
entre otros contextos, para resolver problemas que con los m¶etodos de Inteligencia Arti¯cial
de alto nivel tradicionales (b¶usqueda heur¶³stica, l¶ogica, etc.) son o bien intratables o bien
impr¶acticos.
Las ideas principales provienen de una met¶afora de la evoluci¶on natural, en la cual existen
individuos (fenotipos) que expresan una informaci¶on gen¶etica (genotipo), y adem¶as est¶an
sujetos a la presi¶on evolutiva del medio (¯tness). Los individuos m¶as exitosos (con mejor
¯tness) ven aumentadas sus posibilidades reproductivas, generando nuevos individuos con
su mismo genotipo. Sin embargo, en el proceso reproductivo ocurre el fen¶omeno distintivo
de la evoluci¶on natural: la aparici¶on de mutaciones al azar.
Este mismo esquema din¶amico, con un sinn¶umero de variaciones, ha sido desarrollado
para diversas aplicaciones. En este trabajo veremos c¶omo el problema inverso de la IFS
puede resolverse por medio de estrategias evolutivas y gen¶eticas. Supongamos la existencia
de una poblaci¶on con ¹ ancestros, cuyo genotipo ¹gi se encuentra codi¯cado con n¶umeros.
Entonces se crea un conjunto ¸ de descendientes siguiendo el esquema
¹pi = (¹gi; ¹¾i) mut! (¹gi + n0( ¹¾i); ®( ¹¾i));
donde n0( ¹¾i) denota la elecci¶on de un n¶umero de una aleatoria normal con media cero y
variancia ¾i. ® de¯ne una funci¶on de adaptaci¶on, la cual puede ser la distancia de Hamming
entre el atractor A del IFS resultante y la imagen I de entrada.
Workshop de Investigadores en Ciencias de la Computación WICC 2002
Página 1123
En nuestro caso, ¹gi representa los par¶ametros de la IFS W que estamos tratando de
encontrar. Cada mapa wk requiere seis reales para su objetivo:
wk(x; y) =
Ã
ak bk
ck dk
!Ã
x
y
!
+
Ã
ek
fk
!
(1)
=
Ã
r1kcosµ1k ¡r2ksinµ1k
r1ksinµ2k r2kcosµ2k
!Ã
x
y
!
+
Ã
ek
fk
!
(2)
En general, la expresi¶on 2 es preferible a la 1 por tener un signi¯cado geom¶etrico m¶as
intuitivo. Por lo tanto, ¹gi representar¶a las n s¶extuplas (r1k; r2k; µ1k; µ2k; ek; fk); k 2 [1::n] en
un determinado individuo de una generaci¶on. Como estrategia h¶³brida se puede introducir,
adem¶as de la mutaci¶on, el crossover o cruzamiento entre el genotipo de dos ancestros para
obtener el genotipo del sucesor.
Para evitar los m¶³nimos locales, y quedar atrapado en un \nicho ecol¶ogico", la estrategia
mantiene una diversidad genot¶³pica seleccionando un grupo numeroso de individuos con la
mejor adaptaci¶on. Entre estas t¶ecnicas de niching podemos contar el ¯tness sharing (escalar
el ¯tness en un entorno de cada individuo), el crowding (reemplazar al padre m¶as cercano
del individuo recientemente creado), y el clustering o agrupamiento, la cual resulta ser la
m¶as e¯ciente en la pr¶actica.
4 Implementaci¶on de un ambiente para testear estrategias
Una vez de¯nido el prop¶osito y la metodolog¶³a de trabajo, se implement¶o un prototipo en el
lenguaje Matlab para testear el funcionamiento de los algoritmos y la e¯cacia de las estrategias. Luego, para contar con una implementaci¶on m¶as adecuada en velocidad y capacidad de
c¶omputo, se reescribi¶o el programa en el leguaje visual Delphi, construy¶endose un ambiente
gr¶a¯co para testear y evaluar las diferentes estrategias. En la Fig. 2 es posible observar
la interfase gr¶a¯ca del sistema. Se puede observar abajo a la izquierda el atractor resultante, y abajo a la derecha, la curva que muestra la evoluci¶on del ¯tness del atractor a lo
largo de las generaciones. Los controles de la parte superior izquierda permiten elegir un
conjunto de im¶agenes de entrada, para testear el correcto funcionamiento en varios casos,
mientras que los controles a la derecha permiten controlar la ejecuci¶on del sistema, modi¯car
los par¶ametros, las diversas estrategias, etc. La implementaci¶on en una herramienta como
Delphi permiti¶o migrar con cierto trabajo el prototipo original, pero con el bene¯cio de la
velocidad de c¶omputo, la °exibilidad del uso de las componentes visuales, y otras posibilidades importantes. En la Fig. 2 se pueden ver los par¶ametros de la simulaci¶on realizada.
Se realizaron 2000 generaciones, a 3000 ¶orbitas por generaci¶on, con 3 transformaciones por
genotipo, 10 antecesores y 5 sucesores. El tiempo total en un equipo PC standard fue de
menos de dos minutos.
Workshop de Investigadores en Ciencias de la Computación WICC 2002
Página 1134
Figura 2: La interfase del sistema, mostrando la convergencia evolutiva de un conjunto de transformaciones al atractor de la imagen inicial.
