Procesos colaborativos en comunidades de pr√°ctica virtuales
Ôªø
 
Este documento resume el trabajo de investigaci√≥n desarrollado en el √°rea de Web Sem√°ntica y 
Resoluci√≥n Colaborativa de Problemas en Comunidades de Pr√°ctica Virtuales. En el documento se 
introducen los conceptos relevantes del √°rea -Comunidades de Pr√°ctica Virtuales, Resoluci√≥n 
Colaborativa de Problemas, Web Sem√°ntica y Resource Description Framework-,  se explica el 
trabajo realizado para desarrollar modelos que permitan proveer soporte computacional para el 
proceso de resoluci√≥n colaborativa de problemas en comunidades de pr√°ctica virtuales y se 
presentan los resultados alcanzados hasta el momento. Finalmente, se describen los trabajos futuros. 
 
Palabras Clave: Procesos Colaborativos, Resoluci√≥n de Problemas, Repositorio de Conocimiento, 
Comunidades de Pr√°ctica, Comunidades Virtuales. 
 
 
1. Introducci√≥n 
Las Comunidades de Pr√°ctica (CP) son grupos de personas que comparten inter√©s por un √°rea 
particular de conocimiento que interact√∫an regularmente compartiendo experiencias e 
involucr√°ndose en actividades conjuntas aprendiendo unos de otros y desarrollando a su vez el √°rea 
en cuesti√≥n [6]. Las Comunidades de Pr√°ctica Virtuales (CPV) son comunidades en las cuales 
algunas de las interacciones entre los miembros son soportadas por tecnolog√≠a [5]. Las CPs est√°n 
caracterizadas por tres elementos: 
  
1) dominio ‚Äì el tema de inter√©s que une a los miembros; el √°rea de conocimiento que comparten; 
2) comunidad ‚Äì definida por los miembros al interactuar a trav√©s de diversas actividades. Las 
actividades definen y dan forma a la comunidad y construyen las relaciones entre los miembros; 
3) pr√°ctica ‚Äì es el conjunto de recursos, experiencias, historias, herramientas, estilos de trabajo, 
etc. compartidos por los miembros de la comunidad. 
 
Las comunidades de pr√°ctica organizan actividades para involucrar y relacionar a sus miembros, 
tanto en el portal que la comunidad posee en l√≠nea, como ocasionalmente, en encuentros cara a cara 
que permiten a los miembros conocerse personalmente, y de este modo aumentar el nivel de 
identificaci√≥n de los miembros con la comunidad. De las actividades que los miembros realizan en 
l√≠nea un gran n√∫mero cuenta con soporte computacional maduro como por ejemplo los llamados 
Bulletin Boards o Tablones de Anuncios que permiten a los miembros publicar mensajes para la 
comunidad y recibir respuestas, entablando as√≠ un dialogo p√∫blico. Sin embargo, a√∫n no se cuenta 
con soluciones que den soporte a actividades colaborativas creativas, como por ejemplo, la 
resoluci√≥n de problemas, que involucra alta interacci√≥n entre miembros, es evolutiva, y presenta 
dificultades para su automatizaci√≥n. Por otro lado, la falta de registro de la sem√°ntica de toda la 
informaci√≥n publicada por la comunidad dificulta este tipo de tareas, que requieren poder interpretar 
la informaci√≥n para su posterior procesamiento. 
 
La Web Sem√°ntica se defini√≥ como una extensi√≥n de la Web actual en la cual se le da a la 
informaci√≥n un significado bien definido, permitiendo que las computadoras y las personas trabajen 
en conjunto [1]. Plantea la idea de tener datos definidos y enlazados de manera que puedan ser 
usados para un efectivo descubrimiento, automatizaci√≥n, integraci√≥n y reuso a trav√©s de las 
aplicaciones. En la Web Sem√°ntica, toda entidad es considerada un recurso. Los recursos son 
identificados un√≠vocamente, descriptos a trav√©s de metadatos asociados, y pueden ser enlazados a 
otros recursos. La implementaci√≥n de la Web Sem√°ntica se basa en una serie de tecnolog√≠as y 
est√°ndares de los cuales uno es el Marco de Descripci√≥n de Recursos (RDF ‚Äì Resource Description 
Framework) [8]. RDF es un lenguaje definido por el World Wide Web Consortium (W3C) para 
representar informaci√≥n y conocimiento en la web con sintaxis y sem√°ntica precisa. Su prop√≥sito es 
representar metadatos acerca de los recursos de la web, y generalizando este concepto representar 
informaci√≥n acerca de toda entidad que pueda ser identificada en la web. Se basa en la idea de 
asignar a toda entidad un identificador √∫nico de recurso web utilizando URI ‚Äì Uniform Resource 
Identifiers, y describir los recursos en t√©rminos de propiedades simples y valores de propiedades. 
De este modo, se pueden escribir sentencias que especifiquen propiedades y valores sobre los 
recursos web. Las sentencias est√°n compuestas por tres partes: 
 
- sujeto - identifica el recurso sobre el cual habla la sentencia mediante un identificador URI; 
- predicado - identifica la propiedad o caracter√≠stica del sujeto que la sentencia describe. Se 
representa con una palabra que le da nombre a la propiedad; 
- objeto - identifica el valor que toma la propiedad para ese sujeto. 
 
Los objetos en RDF pueden ser identificadores URI en cuyo caso identifican otro recurso, o un 
valor constante representado por una cadena de caracteres llamado literal. Los tipos de literales que 
pueden ser usados est√°n especificados en [7]. Utilizaremos los conceptos definidos en RDF como 
base para la definici√≥n y descripci√≥n de recursos de una CP. 
 
Esta secci√≥n present√≥ los conceptos b√°sicos utilizados en el dominio de las CPs  y en la Web 
Sem√°ntica. La Secci√≥n 2 explica los modelos construidos hasta el momento y los resultados 
obtenidos. Finalmente, la Secci√≥n 3 describe el trabajo futuro y presenta las conclusiones.  
 
 
2. Especificaci√≥n de modelos 
Los objetivos definidos originalmente para el proyecto de investigaci√≥n [2] inclu√≠an la producci√≥n 
de modelos de dominio para comunidades de pr√°ctica virtuales y particularmente para un proceso 
de resoluci√≥n colaborativa de problemas. A fin de alcanzar estos objetivos, se desarrollaron las 
especificaciones que modelan el repositorio de conocimiento [3], sobre el que una CP basa sus 
actividades e interacciones, y sirve de fundamento para el mencionado proceso de resoluci√≥n de 
problemas en forma colaborativa. En las pr√≥ximas secciones se describe, brevemente la estructura 
del modelo, sus componentes, y los m√≥dulos desarrollados.  
 
2.1 Repositorio 
El conocimiento recopilado y generado durante el desarrollo de las actividades de la comunidad es 
almacenado en un repositorio compartido. Este repositorio fue modelado siguiendo las ideas y 
est√°ndares de la Web Sem√°ntica, y est√° compuesto por tres tipos de elementos:  
 
1) Recursos - elementos recopilados por miembros de la comunidad que representan el 
conocimiento adquirido y el trabajo desarrollado por la CP; 
2) Propiedades - relaciones binarias definidas para expresar caracter√≠sticas de los recursos o 
establecer relaciones entre ellos;  
3) Sentencias - expresiones acerca de los recursos, construidas a partir de las propiedades. 
 
Los recursos de la comunidad se clasifican en categor√≠as que forman parte de una jerarqu√≠a. 
Algunas categor√≠as t√≠picas utilizadas por las comunidades de pr√°ctica virtuales son: persona, 
miembro, proyecto, problema, soluci√≥n, art√≠culo, organizaci√≥n, entre otros. Las propiedades son 
tripletas <sujeto, nombre, objeto> donde el sujeto es una categor√≠a de recurso que representa el tipo 
de recurso al cual la propiedad esta caracterizando; el nombre identifica a la propiedad; y el objeto 
puede ser una categor√≠a de recurso ‚Äì si la propiedad representa una relaci√≥n entre dos recursos, o un 
tipo de dato b√°sico (valor simple) ‚Äì si la propiedad representa un atributo del recurso. Las 
sentencias son tripletas [sujeto, predicado, objeto]. En este caso, el sujeto es el recurso sobre el cual 
habla la sentencia, el predicado es la propiedad utilizada para describir el recurso, y el objeto es el 
valor de la propiedad - un recurso o un valor simple. 
 
 
 
 
Figura 1 ‚Äì Estructura de m√≥dulos del Repositorio 
 
La especificaci√≥n del modelo del repositorio se hizo en el Lenguaje de Especificaci√≥n de RAISE 
(RSL ‚Äì RAISE Specification Language) [4] y est√° compuesta por los m√≥dulos que se ven en la 
Figura 1. El m√≥dulo ELEMENT define un tipo de dato abstracto Element, que modela todos los 
elementos del repositorio: recursos, propiedades y sentencias. El m√≥dulo CATEGORY 
representa categor√≠as de recursos y de tipos de datos. RELATION define una relaci√≥n entre un 
elemento y la categor√≠a a la que pertenece y permite clasificar de esa manera a los recursos. Los 
m√≥dulos DATA y RESOURCE definen los tipos de datos necesarios para representar valores simples  
y recursos (Data y Resource), tipos de datos y tipos de recursos (DataType y ResourceType), 
y jerarqu√≠as de tipos de datos y recursos (DataTypes y ResourceTypes); para esto hacen uso del 
m√≥dulo CATEGORY y el m√≥dulo RELATION. Dado que el objeto de las propiedades puede ser 
tanto una categor√≠a de recursos como una categor√≠a de datos se necesita un tipo que encapsule 
ambas clases de categor√≠as y ambas jerarqu√≠as, esto es lo que hace el m√≥dulo VALUE. Este m√≥dulo 
introduce los tipos Value, ValueType y ValueTypes. El m√≥dulo PROPERTY define el tipo 
Property, y el m√≥dulo STATEMENT puede a su vez utilizar dicho m√≥dulo para definir el tipo 
Statement.  
 
Una vez definidos todos los tipos de datos necesarios y las operaciones para manipularlos, se define 
el m√≥dulo REPOSITORY para modelar el repositorio. Este m√≥dulo utiliza el m√≥dulo COLLECTION 
para crear colecciones de recursos (Resource), propiedades (Property) y sentencias 
(Statements); y las dos jerarqu√≠as de recursos (ResourceTypes) y datos (DataTypes). 
	

	
	 	
	 	
	
	
	
	
Asimismo, REPOSITORY define un amplio conjunto de funciones para manipular el repositorio 
permitiendo la incorporaci√≥n de nuevas instancias de recursos, propiedades y sentencias, as√≠ como 
tambi√©n nuevos tipos a las jerarqu√≠as. 
 
2.2 Resoluci√≥n Colaborativa de Problemas 
El proceso de resoluci√≥n colaborativa de problemas se basa en el repositorio compartido de la 
comunidad y est√° definido en seis etapas:  
1) Registro del Problema: un miembro agrega un nuevo problema al repositorio como un nuevo 
recurso; 
2) Exploraci√≥n del Problema: el problema es analizado y se agregan al repositorio las sentencias 
que lo describan y de ser necesario nuevas propiedades y recursos descubiertos durante el 
proceso;  
3) Comparaci√≥n del Problema: en esta etapa el problema es comparado contra los otros problemas 
del repositorio para encontrar similitudes que posteriormente ayuden en la construcci√≥n de la 
soluci√≥n;  
4) Dise√±o de Soluci√≥n: se descompone el problema original en sub-problemas que a su vez se 
registran en el repositorio. Se crea un nuevo recurso de tipo soluci√≥n. Los sub-problemas y la 
soluci√≥n se relacionan con el problema - la soluci√≥n mediante una sentencia con la propiedad 
solving y los sub-problemas mediante una sentencia con la propiedad contains; 
5) Refinamiento de la Soluci√≥n: se agregan al repositorio nuevas sentencias con informaci√≥n 
relevante para la soluci√≥n, recursos y propiedades; 
6) Integraci√≥n de la Soluci√≥n: una vez que todos los sub-problemas han sido resueltos, se crea una 
sentencia con la soluci√≥n como sujeto, la propiedad solved como predicado y el problema 
original como objeto. 
 
El proceso trabaja con los recursos, sentencias y propiedades del repositorio, utilizando los 
elementos existentes y realiment√°ndolo con nuevos elementos. Con el fin de incorporar al 
repositorio los elementos que ser√°n utilizados durante el proceso de resoluci√≥n de problemas, se 
define un nuevo m√≥dulo MYREPOSITORY que extiende al m√≥dulo REPOSITORY definiendo las 
categor√≠as de recursos (como Problem y Solution) y de datos (integer, boolean, string, 
etc.) relevantes para el proceso, as√≠ como tambi√©n las propiedades utilizadas para relacionar 
problemas con soluciones y problemas con otros problemas (por ej. solving y contains). Para 
cada una de las etapas del proceso se define un m√≥dulo con las operaciones inherentes a esa etapa. 
La Figura 2 muestra dichos m√≥dulos. 
 
 
 
 
Figura 2 ‚Äì Estructura de m√≥dulos del Proceso de Resoluci√≥n Colaborativa de Problemas 
 
El m√≥dulo PROBLEM_REGISTRATION especifica la primera etapa del proceso y define la funci√≥n 
	
	
	
	
	

	
	
	
	
	
	
	
	
	
que permite crear y agregar un nuevo recurso de tipo Problem al repositorio. Las operaciones para 
agregar elementos (recursos, propiedades y sentencias) encontrados durante la exploraci√≥n del 
problema se definen en el m√≥dulo PROBLEM_EXPLORATION y las operaciones para comparar 
problemas y establecer las similitudes encontradas se definen en el m√≥dulo PROBLEM_MATCHING. 
La descomposici√≥n del problema en sub-problemas para componer la soluci√≥n, junto con la 
creaci√≥n y adici√≥n de la misma al repositorio se especifica a trav√©s de las operaciones definidas en 
el m√≥dulo SOLUTION_DESIGN. SOLUTION_REFINEMENT provee operaciones para incorporar al 
repositorio los resultados y elementos encontrados al resolver los sub-problemas y combinarlos para 
construir la soluci√≥n. Por √∫ltimo, el m√≥dulo que introduce los √∫ltimos pasos del proceso es 
SOLUTION_INTEGRATION definiendo las operaciones para dar por terminada la soluci√≥n y crear la 
sentencia que enlaza la soluci√≥n creada con el problema original. 
 
 
3. Conclusiones 
El objetivo de este trabajo era presentar los conceptos, motivaciones, objetivos y avances del trabajo 
de investigaci√≥n en el √°rea de Web Sem√°ntica y Resoluci√≥n Colaborativa de Problemas en 
Comunidades de Pr√°ctica Virtuales. Se describieron las Comunidades de Pr√°ctica Virtuales, las 
caracter√≠sticas, el soporte existente y las carencias detectadas. Luego se presentaron los resultados 
de modelos y especificaciones desarrolladas con el objetivo de proveer soporte para la 
representaci√≥n del conocimiento de las CPV y para la actividad de resoluci√≥n de problemas. 
El trabajo a futuro incluye la especificaci√≥n de la comunidad y sus miembros, y la implementaci√≥n 
de los modelos especificados. Tambi√©n se espera explorar la automatizaci√≥n de partes del proceso 
que actualmente se consideran realizadas manualmente por los miembros de la comunidad como es 
la comparaci√≥n de problemas en el repositorio.  
 
 
4. Agradecimientos 
Deseamos agradecer al Dr. Tomasz Janowski por su direcci√≥n y colaboraci√≥n para la realizaci√≥n de 
este trabajo, como as√≠ tambien a United Nations University ‚Äì Internacional Institute for Software 
Technology (UNU-IIST) por el sustento para llevar adelante estas tareas de investigaci√≥n.  
 
