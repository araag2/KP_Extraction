Cooperación en la tarea de Aprendizaje
﻿Cooperación en la tarea de Aprendizaje
Telma Delladio Fedi
Laboratorio de Investigación y Desarrollo en Inteligencia Artificial (LIDIA)
Departamento de Ciencias de la Computación
 Universidad Nacional del Sur
e-mail: td@cs.uns.edu.ar
Introducción
La cooperación en la tarea de aprendizaje puede proponerse como una herramienta útil a la
hora de solucionar muchos de los problemas que esta actividad presenta. Afrontar una tarea tan
compleja de manera cooperativa permitiría obtener resultados más efectivos.
La capacidad de aprender cosas nuevas es una habilidad de las entidades inteligentes y por
esto el aprendizaje es un tema de interés en Inteligencia Artificial. El área de Machine Learning se
dedica al estudio e investigación de estos temas. En particular un área que ha ido tomando relevancia
en estos tiempos es la Programación en Lógica Inductiva o ILP (Inductive Logic Programming) que
propone a la Programación en Lógica como herramienta en la tarea del aprendizaje a partir de
ejemplos.
Son muchos los elementos que intervienen en el problema del aprendizaje a partir de ejemplos
lo que hace que sea un problema de alta complejidad. Para una entidad, el aprendizaje a partir de
ejemplos es una tarea muy difícil que requiere, entre otras cosas, una gran cantidad de información de
gran calidad para poder obtener buenos resultados. Si el aprendizaje se llevara a cabo de manera
cooperativa por un grupo de entidades, es de esperar que esta tarea pueda realizarse de forma más
rápida y efectiva.
Problemas en el Aprendizaje a partir de Ejemplos
Se han desarrollado varios sistemas que “aprenden” conceptos por medio de la síntesis de
programas lógicos a partir de un conjunto de observaciones. Esas observaciones suelen dividirse en
dos conjuntos: ejemplos positivos y ejemplos negativos. Los ejemplos positivos representan instancias
ciertas del concepto que se desea aprender y los ejemplos negativos representan instancias que no
pertenecen ese concepto [1,2].  Luego, a partir de esas observaciones, se genera (induce) una teoría o
programa lógico que sirve como definición para ese concepto. Idealmente esa definición deberá
satisfacer cualquier instancia del concepto real que se está aprendiendo. La calidad del programa
lógico hallado dependerá, más allá de las técnicas utilizadas, de la calidad y cantidad  de ejemplos
considerados, del conocimiento previo que se tenga y de las restricciones operacionales que se
impongan al momento de generar el programa.
Es imprescindible que los ejemplos tanto positivos como negativos sean representativos. De
no ser así es casi imposible obtener una definición cercana al concepto real que se está modelando.
Cuando se dan ejemplos positivos, lo que se suele hacer es dar ejemplos de instancias que son
consideradas típicas y de instancias que representen casos especiales del concepto. De manera similar
cuando se dan ejemplos negativos se intenta que estos sirvan para marcar las principales diferencias
con los ejemplos positivos, posiblemente representen instancias de conceptos que son muy similares
(que pueden llegar a confundirse) con el concepto que se pretende aprender. Muchas veces esto hace
que al momento de proponer los ejemplos al sistema ya se tenga en mente una determinada idea de
como debiera ser el programa lógico que se desea generar. Por ejemplo, cuando se quiere aprender el
concepto: “un elemento pertenece a una lista”, mediante el predicado “pertenece(Elemento,Lista)” es
común que se dé una secuencia de ejemplos muy similar a la siguiente:
e1
+
: pertenece(1,[1,2]).
e2
+
: pertenece(2,[1,2]).
e3
+
: pertenece(3,[1,2,3,4]).
e1
: pertenece(3,[1,2]).
e2
: pertenece(4,[1,2]).
e3
: pertenece(5,[1,2,3,4]).
Una definición típica del predicado “pertenece” consta de dos casos, uno cuando el elemento
está en la cabeza de la lista, y otro cuando el elemento está en la cola de la lista. El ejemplo e1+ lo que
hace es simplemente representar el primer caso. El ejemplo e3+ se refiere al caso general y el ejemplo
e2
+
 representa otra instancia que responde al segundo caso más precisamente cuando el elemento está
al final de la lista. El conjunto de ejemplos negativos, muestra sobre las mismas listas, instancias que
no corresponden al concepto que se desea aprender. En casos como este los ejemplos provistos no
solamente sirven para ejemplificar el concepto que se desea aprender sino que también dan una pauta
de los distintos casos que debería cubrir el programa que se desea generar: cuando el elemento es el
primero en la lista o cuando el elemento está en la cola de la lista. Es decir, ya se tiene en mente la
solución que se pretende al momento de dar los ejemplos.
Otro  aspecto muy importante al momento de aprender un concepto es el conocimiento previo.
Cuanto más sea el conocimiento previo posiblemente será más fácil la tarea de aprendizaje. Un
concepto se define a partir de otros conceptos, por esto el conocimiento previo puede ayudar a definir
nuevos conceptos de manera más directa. Por ejemplo, supongamos que contamos con una base de
conocimiento que solamente define las relaciones padre y madre de una determinada familia y se
desea aprender el concepto “ancestro”.  Con los ejemplos adecuados posiblemente se obtenga una
definición como la siguiente:
ancestro(X,Y) 
