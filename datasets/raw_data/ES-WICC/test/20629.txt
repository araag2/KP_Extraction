Clasificación de los lenguajes definidos en torno a servicios web y web semántica
﻿ La combinación de dos tecnologías, los Servicios Web y la 
Web Semántica, para posibilitar la integración de las aplicaciones, tanto 
dentro como entre las empresas, han influenciado en el diseño y 
desarrollo de estándares Web que afrontan diversos aspectos. En este 
trabajo presentamos una clasificación de los lenguajes que han surgido 
en relación a estas tecnologías. 
1. Introducción 
Dos tecnologías fundamentales para el intercambio de información en la Web son la Web 
Semántica y los Servicios Web.  
La Web Semántica pretende conseguir una comunicación efectiva entre computadoras, para lo 
cual centra sus esfuerzos en la búsqueda de descripciones enriquecidas semánticamente para los 
datos en la Web. Para lograrlo se requieren descripciones que incluyan no sólo las estructuras de 
datos, sino también las relaciones existentes con otros conceptos, las restricciones, reglas que 
permitan realizar inferencia, etc. En este contexto también se promueve la definición y reutilización 
de vocabularios u ontologías de conceptos que faciliten el procesamiento por parte de las máquinas.  
Por otro lado los Servicios Web promueven la interacción entre aplicaciones. El servicio es un 
componente software que puede procesar documentos XML recibidos a través de protocolos de 
transporte y de aplicación.  
La combinación de ambas tecnologías promete ser la solución a los problemas de integración de 
aplicaciones, tanto dentro de las empresas como fuera de ellas. Por un lado gracias a que los 
servicios Web tienen la característica de ser componentes de software de bajo acoplamiento e 
independientes de la plataforma, hacen posible la integración de software perteneciente a diferentes 
empresas. El uso de la semántica provee por otro lado, el entendimiento y la posibilidad de razonar 
compartiendo el mismo significado. Como resultado se prevé el desarrollo de servicios Web 
semánticos capaces de interactuar en forma automática y desarrollando todo tipo de tareas. 
Para que esto sea posible se han propuesto y desarrollado una gran cantidad lenguajes que tienen 
diferentes objetivos y funciones, y son de utilidad en diferentes etapas. A continuación se detalla el 
análisis y clasificación que hemos hecho de algunos de estos lenguajes. 
2. Clasificación y comparación de los lenguajes  
Lenguajes para la descripción de la estructura de los documentos 
Muchos de los lenguajes que tienen como objetivo la descripción de la estructura de los 
documentos se basan en XML. Mediante etiquetas determinan cuales son los elementos que definen 
la estructura del documento, si hay una jerarquía entre ellos, en que orden pueden aparecer los 
elementos, cuales son sus propiedades, tipos, valores, etc. 
• DTD 
Mediante etiquetas XML especifica restricciones en la estructura y sintaxis de un documento. 
Permite especificar qué etiquetas son permitidas y el contenido de dichas etiquetas, el orden en 
que pueden aparecer dentro de un documento y qué etiquetas van dentro de otras.  
 Tiene algunas limitaciones como no permitir definir elementos locales que sólo sean válidos 
dentro de otros elementos. Es poco flexible la definición de elementos con contenido mixto y no 
es posible indicar a qué tipo de dato corresponde un atributo o el texto de un elemento. 
• XML Esquema 
Este lenguaje pretende aumentar la potencia expresiva que provee el DTD. El principal aporte 
de XML Schema es el gran número de los tipos de datos que incorpora  incluyendo tipos de 
datos complejos como fechas, números y strings.  
Define los Elementos y atributos que pueden aparecer en un documento, cuales elementos son 
hijos de otros elementos, el número de hijos y el orden de los elementos. Si un elemento es 
vacío o puede incluir texto, los tipos de datos de los elementos y de los atributos y los valores 
por defecto de ambos [15]. 
• RDF (Resource Description Framework) 
La idea sobre la que se basa RDF es la posibilidad de identificar cosas usando identificadores 
Web (Uniform Resource Identifiers, URIs), y describir los recursos en términos de propiedades 
y el valor de estas propiedades:  
Soporta tipos de datos literales: decimal, entero, binario, string y es posible representar el tipo 
de los recursos y de las propiedades. Además permite crear tipos y propiedades para representar 
grupos de recursos (Contenedor, Colección y Reification). También permite representar 
relaciones binarias y relaciones de mayor aridad [3].  
Lenguajes para la definición de vocabulario (ontologías) 
Estos lenguajes permiten definir ontologías otorgando un significado claro y bien definido a cada 
elemento mencionado en una descripción. 
• RDFS o RDF Schema 
El modelo de datos RDFS permite describir las interrelaciones de los recursos en términos de 
propiedades y valores. Las propiedades RDF pueden ser los atributos de los recursos o pueden 
representar relaciones entre los recursos [1]. 
Los documentos RDF-S mantienen la sintaxis y la estructura de los documentos RDF. Es 
posible usar tipos de datos simples y otros definidos, jerarquías de clases y de propiedades, 
definir restricciones y relaciones específicas entre clases, restringir el dominio de una propiedad 
y el rango, etc. La semántica de la información es expresada a través de la definición de 
propiedades.  
• DAML 
El lenguaje DAML ha sido desarrollado como una extensión de XML y RDF, agregando otras 
propiedades tales como equivalencia o que propiedades particulares son únicas [2].  
Puede especificarse la cardinalidad de los elementos, enumerar los valores de las propiedades, 
pueden especificarse las propiedades y rangos global y localmente, usarse tipos de datos básicos 
y estructurados. Se puede expresar negación: daml:complementOf  y permite especificar la 
relación de equivalencia y la unicidad de ciertas propiedades. 
• DAML+OIL 
Se basa en otros estándares como RDF y RDF Schema. Una ontologías DAML+OIL está 
compuesta por varios componentes, algunos de los cuales son opcionales  y algunos de los 
cuales pueden estar repetidos: permite definir cero o mas headers, en el cual se puede incluir 
información sobre la versión y referencias a otras ontologías DAML+Oil; permite definir cero o 
mas elementos clase e instancias.  
En cuanto a las clases permite expresar jerarquía, clases disjuntas, equivalencia, enumeración de 
instancias, etc. En cuanto a las propiedades permite expresar jerarquías, el dominio y el rango, 
equivalencia, transitividad, unicidad, etc. En cuanto a las instancias existen sentencias que 
permiten verificar si dos objetos son el mismo individuo o no [12]. 
• OWL o DAML-S 
 OWL provee tres sublenguajes incrementalmente expresivos: OWL Lite soporta  una jerarquía 
de clasificación y restricciones simples. OWL DL soporta máxima expresividad mientras 
retiene la completitud computacional (todas las conclusiones se garantiza que son computables) 
y decidibilidad (todos los cómputos terminan en un tiempo finito). OWL Full soporta máxima 
expresividad y sintaxis proveniente de RDF sin garantías computacionales. OWL Full permite 
que una ontología sea aumentada con significado predefinido de vocabulario (RDF u OWL).  
OWL extiende RDFS para permitir la expresión de relaciones complejas entre diferentes clases 
RDFS, y mayor precisión en las restricciones de clases y propiedades específicas. Esto incluye 
por ejemplo la posibilidad de limitar las propiedades de clases con respecto a número y tipo, 
expresar relaciones uno-a-uno, varios-a-uno o uno-a-varios, permite expresar relaciones entre 
clases definidas en diferentes documentos en la Web, construir nuevas clases a partir de 
uniones, intersecciones y complementos de otras, así como restringir rangos y dominios para 
especificar combinaciones de clases y propiedades [17]. 
• SWRL(Semantic Web Rule Language) 
Es un lenguaje de reglas para la Web Semántica, que combina sublenguajes de OWL Web 
Ontology (OWL DL and Lite) con lenguajes Rule Markup (Unary/Binary Datalog).  
Este es un lenguaje se usa en el contexto de los servicios Web. Consiste de reglas de la forma de 
una implicación entre antecedente (body) y consecuente (head). El significado se puede leer 
como: si las condiciones especificadas en el antecedente se verifican, luego las condiciones 
especificadas en el consecuente también deben verificarse [4]. 
El antecedente y el consecuente consisten de cero o más átomos. Los átomos son de la forma 
C(x), P(x,y), sameas(x,y) o differentFrom(x,y). Donde C es una descripción OWL, P es una 
propiedad, x e y son variables, individuos OWL o valores. La sintaxis de este lenguaje es una 
extensión de la sintaxis OWL en la que se combina BNF. Es posible expresar que la 
combinación de dos propiedades implica otra propiedad, expresar condiciones de 
existencialidad, etc. 
Lenguajes para la descripción de los servicios Web 
• WSDL (Web Services Description Language) 
WSDL describe un servicio Web en dos formas fundamentales: una abstracta y una concreta, 
con el fin de promover la reusabilidad de la descripción y separar los aspectos de diseño.  
A nivel abstracto WSDL describe un servicio Web en término de los mensajes que envía y 
recibe. A nivel concreto un binding especifica los detalles del formato de transporte para una o 
más interfaces. Una descripción de un servicio en WSDL indica cómo los potenciales clientes 
pueden interactuar con el servicio descrito [14].  
Lenguajes para la descripción semántica de los servicios Web 
El objetivo principal de los lenguajes que caen en esta categoría es el de automatizar las 
operaciones relacionadas con los servicios Web: descubrimiento, selección, composición y 
ejecución. Algunos de estos lenguajes han sido pensados para atender algunas de cuestiones más 
específicas de los servicios Web como es la composición. 
• OWL-S 
Con el fin de proveer diferente tipo de conocimiento sobre los servicios esta ontología se 
estructura en tres partes: Profile: permite enfocarse en qué hace el servicio desde la perspectiva 
del cliente; Modelo de procesos que responde a cómo se usa; y Grounding que especifica cómo 
es la forma de interactuar con el servicio (especificación concreta que incluye: protocolo y 
formato de mensajes, serialización, transporte, direccionamiento) [11]. 
• WSMF (Web Service Modeling Framework) 
WSMF es un formato XML para describir servicios en la red como un endpoint operando sobre 
mensajes que contienen información orientada a documentos u orientada a procedimientos. Un 
 endpoint está constituido por puertos, los puertos constituyen un servicio. La asignación de un 
protocolo a un puerto constituye un binding.  
El modelo WSMF consiste de cuatro elementos diferentes: ontologías que proveen la 
terminología usada por otros elementos, metas que representan los problemas que deberían ser 
resueltos por los servicios Web, descripciones de servicios Web que definen varios aspectos de 
un servicio, y mediadores que resuelven los problemas de interoperabilidad. [5]  
• WSMO (Web Service Modeling Ontology) y WSML (Web Service Modeling Language) 
WSMO se basa en WSMF (Web Service Modeling Framework) refinando y extendiéndolo, y 
diseñando una ontología formal y un conjunto de lenguajes.  
Los cuatro elementos principales de esta propuesta son: ontologías, descripciones de servicios y 
mediadores[6]. Utiliza el lenguaje WSML [13] que provee una sintaxis formal y semántica.  
• WSDL-S 
Define un mecanismo para anotar documentos WSDL con información semántica, las cuales se 
refieren a conceptos semánticos que definen el significado de las operaciones del servicio así 
como el de sus entradas y salidas. Las anotaciones semánticas son definidas como un conjunto 
de elementos de extensión de WSDL y atributos que no están ligados a ningún lenguaje de 
representación de ontologías en particular. También se agrega un mecanismo para especificar 
precondiciones y efectos de los servicios Web [7]. 
• SAWSDL (Semantic Annotations for WSDL and XML Schema) 
La extensión de WSDL y XML Schema permite agregar semántica a los componentes de 
WSDL. SAWSDL no representa un lenguaje para especificar modelos semánticos, sino que 
provee mecanismos por los cuales se pueden referenciar los conceptos del modelo semántico, 
que están especificados fuera del documento WSDL, desde los componentes WSDL y XML 
Schema.  
Define una forma de anotar interfaces y operaciones WSDL con información de categorización, 
anotaciones sobre los tipos Schema, define atributos que pueden ser aplicados tanto a los 
elementos WSDL como elementos XML Schema, etc. El mecanismo de anotación es 
independiente del lenguaje ontológico, también es independiente de los lenguajes de mapeo. [8] 
Lenguajes para la especificación de la composición de los servicios Web  
• BPEL4WS 
Éste es un estándar para especificar procesos del negocio y los protocolos de interacción del 
negocio. BPEL define un estado y la lógica de coordinación entre esas interacciones y formas 
semánticas de tratar las condiciones excepcionales. El modelo de procesos definido por BPEL 
se basa en el modelo de descripción de servicios de WSDL [9]. 
• WSFL (Web Services Flow Language) 
WSFL es un lenguaje XML para la descripción de la composición de los servicios Web. WSFL 
considera dos tipos de composiciones de servicios Web: el primer tipo (modelo de flujos) 
especifica un patrón de uso de una colección de servicios Web, de forma tal que la composición 
resultante describa cómo se alcanza una meta en particular. El segundo tipo (modelo global) 
especifica un patrón de interacción de una colección de servicios Web, en este caso el resultado 
es una descripción del patrón de interacción total [16].  
• WSCL (Web Services Conversation Language) 
Provee una forma para modelar los procesos públicos de un servicio, habilitando a los servicios 
para participar en ricas interacciones. WSCL ha sido desarrollado como un complemento de 
WSDL.  Este último especifica como enviarle mensajes a un servicio sin establecer el orden en 
el cual se pueden enviar esos mensajes, WSCL define la secuencia de documentos 
intercambiados entre los servicios Web. [10] 
El objetivo principal de WSCL es definir una conversación.  
• BPML 
 Su objetivo es expresar procesos de negocios abstractos y ejecutables. Permite definir procesos 
entre empresas, servicios Web complejos y colaboración entre múltiples partes.  Un proceso en 
BPML es una composición de actividades que realizan funciones específicas. Los procesos 
dirigen la ejecución de estas actividades. A su vez puede ser parte de otra composición 
definiéndose como parte de un proceso padre o invocándolo desde otro proceso.  
Las especificaciones en BPML soportan la importación de definiciones en WSDL [10]. 
3. Conclusiones y Trabajo futuro 
Varios de estos estándares pretenden afrontar el problema de la composición de los servicios 
Web. Más allá de los lenguajes hay otras cuestiones que se deben atender: el número de servicios 
nuevos y actualizaciones hace que sea imposible hacer la composición de servicios en forma 
manual. Además no hay un lenguaje único que describa la semántica de los servicios. Para 
automatizar esta tarea se han propuesto por un lado, técnicas que usan Workflow, ya que  un 
servicio compuesto puede ser visto como un workflow: incluye un número de servicios atómicos 
con flujos de control y de datos. Y por otro lado técnicas de Planning de IA, donde se supone que 
cada servicio puede ser especificado en términos de sus precondiciones y efectos, los cuales 
corresponderían a los parámetros de entrada y de salida respectivamente, el estado del mundo 
también integra a las precondiciones, el estado antes de la ejecución de servicio, y los efectos, el 
estado resultante tras la ejecución del servicio. Es posible de esta manera generar el plan de los 
procesos que deben ocurrir, usando las precondiciones y los efectos especificados. Además se 
pueden agregar restricciones, por ejemplo para reflejar la lógica del negocio. 
Como trabajo futuro nos proponemos profundizar en los aquellos lenguajes cuya función es la 
descripción de la composición de servicios Web para obtener otros servicios mas complejos. 
