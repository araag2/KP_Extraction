Comparación de tres métodos de búsqueda incompletos para el problema de la mochila
﻿
COMPARACIÓN DE TRES MÉTODOS DE BÚSQUEDA INCOMPLETOS PARA 
EL PR08LElVIA DE LA MOCHILA 
ALFONSO H., BERTONE E., MINETTI G. 
Proyecto UNLPAM-09!F009 1 
Dpto. dI: Informática - Facultad de Ingeniería - Universidad Nacional de La Pampa 
Calle 110 csq. 9 - (6360) General Pico - La Pampa - Rep. Argentina 
E-mail: {alfonsoh.bertonee.minettig}(((;ing.ulllpam.edu.ar 
Phone: (02302)422780/422372, Ex!. 6302 
GALLARDR. 
Proyecto UNSL-338403" 
Departamento de Informática - Universidad Nacional de San Luis 
Ejército de los Andes 950 - Local 106 - (5700) San Luis - Rep. Argentina 
E-mail: rgallard<ttunsl.edu.ar 
Phone: +54 2652420823 - Fax: +54 2652 430224 
El objetivo de éste trabajo es analizar el comportamiento de distintos algoritmos de búsqueda 
incompletos en un problema clásico de optimización combinatoria!. El problema seleccionadu l:S el 
prublema de la mochila, clasificado como NP-duro. Siendo los algoritmos evaluados: el genético. d 
tahu search y el simulated annealing. 
1. Introducción 
La optimización es el proceso de encontrar la mejor solución (u óptimo) de un conjunto de 
soluciones [Ilog97]. En forma general el problema se puede formular de la siguiente manera [Pérez 
Serrada96]: 
xO = argopt ¡(x) 
xEX 
en el que la aplicación f (.) asocia a cada elemento x del conjunto X un vector de números reales f 
(x) E  W)!. Naturalmente, no es necesario que f(x) tenga una forma cerrada o explícita. Los candidatos 
a solución x son estructuras (conjuntos, árboles, grafos, etc.) de objetos los cuales se pueden 
caracterizar inequívocamente a través de m atributos en cierto orden. Al dominio del problema se le 
denota X y no necesariamente coincide con el espacio de búsqueda del algoritmo (usado para 
encontrar la solución al problema), que se denota X. 
Si estudiamos la complejidad de los problemas de optimización se dice que son polinómicamcl/(, 
programables cuando existen algoritmos de resolución que dan una respuesta tras realizar un número 
de operaciones que es - a lo sumo - una función polinómica del tamaño del problema. Este es un 
requisito mínimo de complejidad, es decir, si un problema no es polinómicamente programable todos 
los métodos de resolución serán inútiles para tamaños crecientes del problema ya que ninguna 
computadora sería capaz de afrontarlos en un tiempo razonable. Generalmente en la prúctica la 
mayoría de los problemas de optimización son no polinómicamente programables. Por lo anterior 
puede ser imposible encontrar el óptimo global en algunas aplicaciones, o no haber una manera de 
chequear si una solución es un óptimo globaL En muchos casos encontrar el óptimo global puede ser 
innecesario. Encontrar una buena solución (un óptimo local) rápidamente puede ser más deseable que 
encontrar la mejor solución (el óptimo global) lentamente. 
Un problema de optimización clásico es el problema de la mochila que consiste en encontrar un 
plan de carga adecuado para llenar la misma con el mayor número de items, tratando de lograr Ull 
máximo beneficio. Para ello se dispone de un conjunto de n ítems, los cuales tienen un peso y un 
beneficio asociado, y se debe seleccionar un subconjunto de dichos ítems de forma que la suma de los 
beneficios sea máxima, y la suma total de sus pesos no supere la capacidad de la mochila. 
1 Grupo de Inveetigadón apoyado por la Universidad Nac.;ional de La Pampa. 
Z Grupo de Investigación apoyado por la Universidad Nacional de San Luis y la ANPCYT (Agencia Nacional para ProlllllVl"I 
la Ciencias y la Tec.;nología). 
Wicc 2000 - 52 
Este problema pertenece a la familia de los problemas NP-Completos, por lo que es de interés 
analizar su comportamiento mediante las siguientes técnicas de optimización: Algoritmos genéticos, 
Simulated annealing, Tabu-Search. 
A continuación se presenta el modelo del problema: 
Dado un conjunto de pesos W[i], beneficios P[i] y capacidad e, encontrar un vector, en nuestro 
caso será binario, x=<x[ 1 J, .. ,x[n]> tal que, 
Max P(x)= Li=l..n xli] *P[i] 
s.a 
Lj=l"n x[i]*W[i]<= C 
La generación de los pesos y beneficios puede ser aleatoria, pero según [Martell090], la dificultad 
del problema se ve afectada por la correlación que pueda existir entre los beneficios y pesos. En este 
caso se tomaron datos nu correlacionados, dónde: 
W[i]:= uniformemente aleatorio ([Lv]). 
P[i]:= uniformemente aleatorio ([Lv]). 
2. Breve Descripción De Las Técnicas De Optimización 
2.1. Algoritmos Genéticos 
Los Algoritmos Genéticos (AG) son técnicas de búsqueda inspirados en los mecanismos dI: 
selección y genética natural; que combinan la capacidad de supervivencia de individuos (posibles 
soluciones o reglas de inferencia), con operadores genéticos. Mantienen una población que se renueva 
continuamente. La nueva generación se construye probabilísticamente, a partir de los individuos más 
aptos de la generación anterior (operador de selección), combinando su "código genético" (a través de 
operadores de crossover y mutación) [Goldberg 89]. A partir de este esquema, una población puede 
evolucionar proponiendo nuevos y mejores individuos. 
El problema de la mochila presenta una característica interesante y es la existencia de una 
restricción (Lj=l..n x[i]*W[i]<= C). Durante la construcción de los individuos que formarán las distintas 
poblaciones, se puede dar el caso de que dicha restricción sea violada, por lo que se plantea la 
necesidad de implementar algún mecanismo, dentro del Algoritmo Genético, que evite o disminuya el 
impacto que pueden tener los individuos ilegales dentro de la población. Se conoce que para disminuir 
el efecto de individuos ilegales se puede utilizar [unciones de penalidad, algoritmos reparadores enln.' 
otras técnicas. 
En este trabajo se utilizó un algoritmo genético con penalidad lineal [Michalewicz96], la cual es 
definida a continuación: 
Eval(x)= Li=l..n x[i]*P[i]-Pen(x) 
Si el individuo es factible: Pen(x)=O 
En otro caso: Pen(x)= P*((i=l..n x[i]*W[i]-C) 
p=max,=l.n {P[i]/W[i]} 
C=O.5* Lj=l..n W[i] 
debido a que en trabajos previamente desarrollados por el grupo se ha observado un mejor 
comportamiento al usar penalidad lineal en vez de utilizar penalidad cuadrática o logarítmica [Alfonso 
99]. 
2.2. Simulated Annealing 
Simulated Annealing es una técnica similar a la programaclOn genética. Esta basado en 
observaciones del proceso de enfriado de metales. El término annealing está relacionado con la 
manera con la que los metales líquidos son enfriados lentamente para asegurar un estado de energía 
mínima. Se puede decir que el algoritmo de simulated annealing enfría la solución lentamente hasta 
alcanzar el objetivo posible mas bajo [Ilog 97]. 
Se chequea si el equilibrio térmico es alcanzado. La temperatura T es reducida gradualmente a 
través de la función g(T,t), en algunos casos T es reducido cada cierto número de iteraciones t. El 
algoritmo finaliza con un valor pequeño de T, el criterio de detención controla si el sistema está 
congelado, por ejemplo no aceptará mas cambios. 
Wicc 2000 - 53 
2.3. Tabu Search 
Este procedimiento ha sido tradicionalmente usado en problemas de optimización combinatorial, el 
cual guía una heurística de escalamiento descendiente con el objetivo de continuar la exploración 
evitando un retroceso a un óptimo local desde el cual ya se ha salido. En cada iteración un movimiento 
admisible se aplica a la solución actual, transformándola de ésta manera en una solución vecina con 
menor costo. Son permitidas las soluciones que incrementan la función de costo, mientras que el 
movimiento inverso está prohibido para algunas iteraciones con el objetivo de evitar la ocurrencia de 
ciclos. 
Durante el proceso de búsqueda los movimientos son almacenados en una lista Tabu, representando 
la memoria de los pasos previos del algoritmo. Se cuenta con un proceso de aspiración para determinar 
cuando las restricciones Tabu pueden ser sobreescritas. 
3. Conclusiones 
Los mejores resultados se han observado en la implementación del Simulating Annealing, en 
primer lugar. y del Algoritmo Genético, en el segundo puesto. La ventaja obtenida por el Simulating 
Annealing, estimamos, es causada porque esta implementación en las etapas finales se dedica a 
explotar la mejor solución encontrada. Mientras que el AG, mediante elitismo, mantiene la mejor 
solución durante la evolución beneficiándola con una mayor fitness, aunque nada asegura que esa 
mejor solución sea explotada. 
A diferencia del Simulating Annealing, que es un procedimiento que mantiene un solo candidato ti 
solución, el AG permite trabajar con múltiples candidatos y considerando que la ventaja obtenida en 
los resultados finales son levemente superiores a las obtenidas por el AG se puede sugerir el uso de 
este último en situaciones donde deban contemplarse más de una alternativa para dar una solución 
satisfactoria al problema. 
Con respecto a la implementación del tabu search, se puede concluir que este logra el mayor 
desaprovechamiento de la capacidad de la mochila luego de analizar los pesos de las soluciones 
finales. 
4.
