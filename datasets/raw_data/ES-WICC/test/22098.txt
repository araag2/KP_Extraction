Análisis de la semántica declarativa trivaluada GS para la programación en lógica rebatible básica
﻿Análisis de la semántica declarativa trivaluada tiS 
para la programación en lógica rebatible básica 
Laura A. Cecchi 
Departamento de Informática y Estadística 
UNIVERSIDAD NACIONAL DEL COMAHUE 
e-mail: lcecchi@uncoma.edu.ar 
Guillermo R. Simari 
Departamento de Ciencias de la Computación 
UNIVERSIDAD NACIONAL [)EL SUR 
e-mail: grs@cs.uns.edu.ar 
PALABRAS CLAVE: Extensiones de la Programación en Lógica. Semántica Declarativa de 
Extensiones de la Programación en Lógica. Semántica de Juegos. Sistemas Argumentativos. 
Introducción 
El uso de la Programación en Lógica (de ahora en más P.L.) como una herramienta de 
representación del conocimiento y del razonamiento de sentido común está basado en la idea dc 
proveer a las máquinas con una especificación lógica del conocimiento, independiente de cualquier 
implementación, de tal modo que sea fácil de manipular y de razonar. 
Consecuentemente. un significado preciso debe ser asociado con cualquier programa lógico l'llll 
el objeto de proveer una especificación declarativa. La performance de cualquier mecanismo 
computacional es evaluada comparando su comportamiento con la especificación provista por la 
semántica declarativa. Encontrar una semántica declarativa adecuada para los programas lógicos es 
una de las áreas de investigación de la P.L. más importantes y difíciles 
La Programación en Lógica Rebatible (de ahora en más P.L.R.) [Dun95,GS99,GSC9S. GarlJ7], 
que es una extensión de la P.L., incorpora a los programas básicos un nuevo conjunto de reglas que 
permiten representar información tentativa, las reglas rebatibles. De este modo, un programa lógicll 
rebatible consiste de un conjunto de dos clases de reglas: reglas estrictas y rebatibles. Las reglas 
estrictas son reglas en el sentido clásico de la programación en lógica: siempre que las premisas dc 
una regla son satisfechas, tenemos permitido aplicarla y obtener la conclusión. Las reglas rebatibles 
son reglas que pueden ser derrotadas en presencia de evidencia contraria. Aunque la informaciún 
tentativa representada puede ser eventualmente contradictoria. la P.L.R. provee un criteriu para 
resolver los cont1ictos entre las reglas rebatibles con consecuentes contradictorios. 
La semántica operacional de la P.L.R. se basa en un análisis dialéctico de argumentos y 
contraargumentos. Una consulta q tendrá éxito si existe un argumento.w' de q que lo justifique, ¡.t' .. 
no existen contraargumentos que derroten a .#. Ya que los derrotadores son también argumentus 
podrían existir derrotadores para éstos últimos y así sucesivamente. El análisis dialéctico completo 
puede ser descripto a través del árbol dialéctico. La raíz del árbol dialéctico es un argumento para la 
consulta y todos los contraargumentos del nodo padre son considerados en cada nivel del árbol. 
Si bien la semántica operacional es suficiente para verificar si una consulta está justificada o nu 
en un programa lógico rebatible, creemos que el beneficio de una semántica declarativa para la P.L.R. 
es doble. Por un lado. es necesaria para ayudar al programador a especificar el conocimiento ) 
razonar a partir de él sin preocuparse por la parte de control del sistema. Por otro lado, la uefinicilJll 
de una semántica declarativa ayuda en el estudio de la P.L.R. como sistema de razonamienlo nu 
monótono. Un conjunto de propiedades [Dix95a, Dix95b, Dix95c], han sido presentadas con el 
objeto de clasificar y caracterizar el comportamiento de las semánticas de los programas lógicos COIl 
negación. Analizando el conjunto de propiedades que se cumplen es posible comparar al sistema l'DIl 
otros, mostrando sus ventajas y desventajas. 
En [CS99, CSOO] se introdujo la semántica declarativa trivaluada GSJ basada en la estructura 
de juegos, que permite modelar la semántica operacional de la P.L.R. presentada en [Gar()7]. en 
donde el criterio para decidir entre argumentos contradictorios no permite elementos incomparabh:s. 
El objetivo de este trabajo es presentar un análisis del conjunto de las cunsecuencias de UIl 
programa lógico rebatible. Como resultado inmediato surge un teorema en el que se prueba que la 
semántica GS es sensata y completa con respecto a la semántica operacional. 
Wicc 2000 - 29 
La semántica declarativa trivaluada CiS 
En [Abr97] y [AM97], se introduce a la semántica basada en juegos con el objeto de modelar a la 
computación como un juego entre dos participantes: el Sistema y el Ambiente. La idea presentada e:-. 
la de utilizar un juego para modelar la interacción entre el Sistema y el Ambiente. Una "corrida" u 
"cómputo" simple involucra la interacción entre el proponente y el oponente y es representado pUl 
una secuencia de movidas hechas en forma alternada por P y O. Un juego especifica el conjuntu lk 
todas las posibles corridas o movidas legales y puede ser pensado como un árbol. 
La justificación de un literal puede ser vista como un juego en donde un jugador proplJl1l: un 
argumento para una meta q mientras que el otro jugador, el oponente, trata de bUSl'ar 
contraargumcntos que lo derroten. De este modo, podemos modelar al sistema de dialéctica a tra\'00 
de la interacción de dos jugadores: el proponente y el oponente. 
La semántica GS se basa en la idea de construir la familia de todos los juegos para un literal (j. 
donde cada juego comienza con un argumento diferente que soporta a q. Informalmente, cada juego 
representa un árbol de dialéctica cuya raíz es un argumento a favor del literal q. 
Una vez definida la familia de juegos, diremos que q tendrá valor de verdad verdadero si ell la 
familia existe un juego ganado por el proponente, ¡.c., ganado por el jugador que propuso el primel 
argumento a favor de q. Diremos que el valor de verdad de q es falso, si no existe en la falllili,l 
ningún juego ganado por el proponente. De otro modo, la familia de juegos será vacía, ¡.L'., no exi:-.lL' 
ningún argumento que soporte a q y por lo tanto no podremos jugar ningún juego. En este últilllu 
caso, diremos que el valor de verdad de q es desconocido. 
Notaremos a la sem<intica CiS = (v, F). El conjunto de literales que pertenecen al lenguaje del 
programa lógico rebatihle básico, y no pertenece a V U F, es el conjunto de literales cuyo valor de 
verdad es desconocido. 
El valor de verdad de los literales depende del programa completo y no del valor de verdad (kl 
átomo correspondiente. Por ejemplo, podría darse el caso que bajo un programa lógico rebatible UIl 
literal q tuviese valor de verdad verdadero, Le., existe un juego en la familia de juegos de (j gallaull 
por el proponente, y que la familia de juegos de -q fuese vacía en cuyo caso su valor de verdad es 
desconocido; o bien que la familia de juegos de -q no contuviese ningún juego que fuese ganadll 
por el proponente, en cuyo caso su valor de verdad es falso. La razón de que el valor de verdad de -(/ 
no dependa del valor de verdad de q está estrechamente ligada al hecho de que para cada lIteral/. 
analizamos su familia de juegos, sin tener en cuenta la familia de juegos del complemento de L 
Análogamente, el conjunto compuesto el complemento de todos los elementos en ¡: 11\1 
necesariamente pertenecen a V. Por ejemplo, en el siguiente programa lógico n= { d},  = { -11 i J\ h : 
!Ji Á e; -bi Á d; ci Á d} bajo el criterio de especificidad (en este caso se comporta según la:-. 
condiciones exigidas) -a es falso, pues el único juego es ganado por el oponente. aunque {/ no sea 
verdadero, ya que la familia de juegos es vacía. 
Así el conjunto de consecuencias de un programa lógico rebatible coincide exactamente con 1.'1 
conjunto Ven Gs. 
Un resultado interesante de la semántica GS es el siguiente. Por razones de espacio no se presen!;¡ 
la demostración. 
Teorema: Sea :J' un programa lógico rebatible donde la relación de preferencia entre 
contraargumentos es total, entonces 
q es un literal justificado en P si y sólo si q pertenece al conjunto V de (j-.s 
Este teorema indica que la semántica definida es sensata y completa con respecto a la selllúlltil.';l 
operacional definida para la programación en lógica rebatible, siempre y cuando la rclaciún de 
preferencia entre contra argumentos sea total. 
Wicc 2000 - 30 
Conclusiones y Trabajos Futuros 
El principal aporte de este trabajo es la sensatez y completitud de la semántica trivaluada GS COII 
respecto a la semántica operacional, definida en función del árbol dialéctico. De este modo. lU:lllo:-­
definido de un modo declarativo el conjunto de las consecuencias de tales sistemas. 
Nuestro objetivo final es el de definir el conjunto de consecuencias de un programa lógico 
rebatible donde la relación de preferencia entre argumentos no esté restringida. En particular, estamo:-­
interesados en definir declarativamente el conjunto de consecuencias de los programas lógico:-­
rebatibles cuando la preferencia entre argumentos sea la especificidad. 
Entre nuestros trabajos futuros se encuentra también, extender la semántica para poder dar 
significado a programas lógicos rebatibles que incluyan la negación por falla. 
